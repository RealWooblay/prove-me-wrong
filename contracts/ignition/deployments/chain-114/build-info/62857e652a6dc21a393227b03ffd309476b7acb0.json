{
  "_format": "hh3-sol-build-info-1",
  "id": "62857e652a6dc21a393227b03ffd309476b7acb0",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/ProveMeWrong.sol": "project/contracts/ProveMeWrong.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "optimizer": {
        "enabled": false
      },
      "evmVersion": "cancun",
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "npm/@flarenetwork/flare-periphery-contracts@0.1.33/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@4.9.6/",
        "npm/@flarenetwork/flare-periphery-contracts@0.1.33/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@4.9.6/",
        "npm/@flarenetwork/flare-periphery-contracts@0.1.33/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@4.9.6/",
        "npm/@flarenetwork/flare-periphery-contracts@0.1.33/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@4.9.6/",
        "npm/@flarenetwork/flare-periphery-contracts@0.1.33/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@4.9.6/",
        "npm/@flarenetwork/flare-periphery-contracts@0.1.33/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@4.9.6/",
        "npm/@flarenetwork/flare-periphery-contracts@0.1.33/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@4.9.6/",
        "project/:@flarenetwork/flare-periphery-contracts/=npm/@flarenetwork/flare-periphery-contracts@0.1.33/",
        "project/:@flarenetwork/flare-periphery-contracts/=npm/@flarenetwork/flare-periphery-contracts@0.1.33/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.3.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.3.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.3.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.3.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.3.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.3.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.3.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.3.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.3.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.3.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.3.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.3.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.3.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.3.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.3.0/"
      ]
    },
    "sources": {
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/ContractRegistry.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.25;\n\nimport {IFlareContractRegistry} from \"./IFlareContractRegistry.sol\";\n// AUTO GENERATED - DO NOT EDIT BELOW THIS LINE\nimport {IPriceSubmitter} from \"./IPriceSubmitter.sol\";\nimport {IGovernanceSettings} from \"./IGovernanceSettings.sol\";\nimport {IFtsoRewardManager} from \"./IFtsoRewardManager.sol\";\nimport {IFtsoRegistry} from \"./IFtsoRegistry.sol\";\nimport {IVoterWhitelister} from \"./IVoterWhitelister.sol\";\nimport {IFtsoManager} from \"./IFtsoManager.sol\";\nimport {IWNat} from \"./IWNat.sol\";\nimport {IGovernanceVotePower} from \"./IGovernanceVotePower.sol\";\nimport {IClaimSetupManager} from \"./IClaimSetupManager.sol\";\nimport {IFlareAssetRegistry} from \"./IFlareAssetRegistry.sol\";\nimport {IFlareContractRegistry} from \"./IFlareContractRegistry.sol\";\nimport {ISubmission} from \"./ISubmission.sol\";\nimport {IEntityManager} from \"./IEntityManager.sol\";\nimport {IVoterRegistry} from \"./IVoterRegistry.sol\";\nimport {IFlareSystemsCalculator} from \"./IFlareSystemsCalculator.sol\";\nimport {IFlareSystemsManager} from \"./IFlareSystemsManager.sol\";\nimport {IRewardManager} from \"./IRewardManager.sol\";\nimport {IRelay} from \"./IRelay.sol\";\nimport {IWNatDelegationFee} from \"./IWNatDelegationFee.sol\";\nimport {IFtsoInflationConfigurations} from \"./IFtsoInflationConfigurations.sol\";\nimport {IFtsoRewardOffersManager} from \"./IFtsoRewardOffersManager.sol\";\nimport {IFtsoFeedDecimals} from \"./IFtsoFeedDecimals.sol\";\nimport {IFtsoFeedPublisher} from \"./IFtsoFeedPublisher.sol\";\nimport {IFtsoFeedIdConverter} from \"./IFtsoFeedIdConverter.sol\";\nimport {IFastUpdateIncentiveManager} from \"./IFastUpdateIncentiveManager.sol\";\nimport {IFastUpdater} from \"./IFastUpdater.sol\";\nimport {IFastUpdatesConfiguration} from \"./IFastUpdatesConfiguration.sol\";\nimport {IFeeCalculator} from \"./IFeeCalculator.sol\";\nimport {FtsoV2Interface} from \"./FtsoV2Interface.sol\";\nimport {TestFtsoV2Interface} from \"./TestFtsoV2Interface.sol\";\nimport {ProtocolsV2Interface} from \"./ProtocolsV2Interface.sol\";\nimport {RandomNumberV2Interface} from \"./RandomNumberV2Interface.sol\";\nimport {RewardsV2Interface} from \"./RewardsV2Interface.sol\";\nimport {IFdcVerification} from \"./IFdcVerification.sol\";\nimport {IFdcHub} from \"./IFdcHub.sol\";\nimport {IFdcRequestFeeConfigurations} from \"./IFdcRequestFeeConfigurations.sol\";\nimport {IAssetManagerController} from \"./IAssetManagerController.sol\";\nimport {IJsonApiVerification} from \"./IJsonApiVerification.sol\";\n// END AUTO GENERATED - DO NOT EDIT ABOVE THIS LINE\n\n// Library is intended to be used inline, so the strings are all memory allocated (instead of calldata)\nlibrary ContractRegistry {\n    address internal constant FLARE_CONTRACT_REGISTRY_ADDRESS =\n        0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019;\n\n    IFlareContractRegistry internal constant FLARE_CONTRACT_REGISTRY =\n        IFlareContractRegistry(FLARE_CONTRACT_REGISTRY_ADDRESS);\n\n    /**\n     * @notice Returns contract address for the given name - might be address(0)\n     * @param _name             name of the contract\n     */\n    function getContractAddressByName(\n        string memory _name\n    ) internal view returns (address) {\n        return FLARE_CONTRACT_REGISTRY.getContractAddressByName(_name);\n    }\n\n    /**\n     * @notice Returns contract address for the given name hash - might be address(0)\n     * @param _nameHash         hash of the contract name (keccak256(abi.encode(name))\n     */\n    function getContractAddressByHash(\n        bytes32 _nameHash\n    ) internal view returns (address) {\n        return FLARE_CONTRACT_REGISTRY.getContractAddressByHash(_nameHash);\n    }\n\n    /**\n     * @notice Returns contract addresses for the given names - might be address(0)\n     * @param _names            names of the contracts\n     */\n    function getContractAddressesByName(\n        string[] memory _names\n    ) internal view returns (address[] memory) {\n        return FLARE_CONTRACT_REGISTRY.getContractAddressesByName(_names);\n    }\n\n    /**\n     * @notice Returns contract addresses for the given name hashes - might be address(0)\n     * @param _nameHashes       hashes of the contract names (keccak256(abi.encode(name))\n     */\n    function getContractAddressesByHash(\n        bytes32[] memory _nameHashes\n    ) internal view returns (address[] memory) {\n        return FLARE_CONTRACT_REGISTRY.getContractAddressesByHash(_nameHashes);\n    }\n\n    /**\n     * @notice Returns all contract names and corresponding addresses\n     */\n    function getAllContracts()\n        internal\n        view\n        returns (string[] memory _names, address[] memory _addresses)\n    {\n        return FLARE_CONTRACT_REGISTRY.getAllContracts();\n    }\n\n    // Nice typed getters for all the important contracts\n    // AUTO GENERATED - DO NOT EDIT BELOW THIS LINE\n    function getPriceSubmitter() internal view returns (IPriceSubmitter) {\n        return\n            IPriceSubmitter(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"PriceSubmitter\"))\n                )\n            );\n    }\n\n    function getGovernanceSettings()\n        internal\n        view\n        returns (IGovernanceSettings)\n    {\n        return\n            IGovernanceSettings(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"GovernanceSettings\"))\n                )\n            );\n    }\n\n    function getFtsoRewardManager() internal view returns (IFtsoRewardManager) {\n        return\n            IFtsoRewardManager(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"FtsoRewardManager\"))\n                )\n            );\n    }\n\n    function getFtsoRegistry() internal view returns (IFtsoRegistry) {\n        return\n            IFtsoRegistry(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"FtsoRegistry\"))\n                )\n            );\n    }\n\n    function getVoterWhitelister() internal view returns (IVoterWhitelister) {\n        return\n            IVoterWhitelister(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"VoterWhitelister\"))\n                )\n            );\n    }\n\n    function getFtsoManager() internal view returns (IFtsoManager) {\n        return\n            IFtsoManager(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"FtsoManager\"))\n                )\n            );\n    }\n\n    function getWNat() internal view returns (IWNat) {\n        return\n            IWNat(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"WNat\"))\n                )\n            );\n    }\n\n    function getGovernanceVotePower()\n        internal\n        view\n        returns (IGovernanceVotePower)\n    {\n        return\n            IGovernanceVotePower(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"GovernanceVotePower\"))\n                )\n            );\n    }\n\n    function getClaimSetupManager() internal view returns (IClaimSetupManager) {\n        return\n            IClaimSetupManager(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"ClaimSetupManager\"))\n                )\n            );\n    }\n\n    function getFlareAssetRegistry()\n        internal\n        view\n        returns (IFlareAssetRegistry)\n    {\n        return\n            IFlareAssetRegistry(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"FlareAssetRegistry\"))\n                )\n            );\n    }\n\n    function getFlareContractRegistry()\n        internal\n        view\n        returns (IFlareContractRegistry)\n    {\n        return\n            IFlareContractRegistry(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"FlareContractRegistry\"))\n                )\n            );\n    }\n\n    function getSubmission() internal view returns (ISubmission) {\n        return\n            ISubmission(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"Submission\"))\n                )\n            );\n    }\n\n    function getEntityManager() internal view returns (IEntityManager) {\n        return\n            IEntityManager(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"EntityManager\"))\n                )\n            );\n    }\n\n    function getVoterRegistry() internal view returns (IVoterRegistry) {\n        return\n            IVoterRegistry(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"VoterRegistry\"))\n                )\n            );\n    }\n\n    function getFlareSystemsCalculator()\n        internal\n        view\n        returns (IFlareSystemsCalculator)\n    {\n        return\n            IFlareSystemsCalculator(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"FlareSystemsCalculator\"))\n                )\n            );\n    }\n\n    function getFlareSystemsManager()\n        internal\n        view\n        returns (IFlareSystemsManager)\n    {\n        return\n            IFlareSystemsManager(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"FlareSystemsManager\"))\n                )\n            );\n    }\n\n    function getRewardManager() internal view returns (IRewardManager) {\n        return\n            IRewardManager(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"RewardManager\"))\n                )\n            );\n    }\n\n    function getRelay() internal view returns (IRelay) {\n        return\n            IRelay(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"Relay\"))\n                )\n            );\n    }\n\n    function getWNatDelegationFee() internal view returns (IWNatDelegationFee) {\n        return\n            IWNatDelegationFee(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"WNatDelegationFee\"))\n                )\n            );\n    }\n\n    function getFtsoInflationConfigurations()\n        internal\n        view\n        returns (IFtsoInflationConfigurations)\n    {\n        return\n            IFtsoInflationConfigurations(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"FtsoInflationConfigurations\"))\n                )\n            );\n    }\n\n    function getFtsoRewardOffersManager()\n        internal\n        view\n        returns (IFtsoRewardOffersManager)\n    {\n        return\n            IFtsoRewardOffersManager(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"FtsoRewardOffersManager\"))\n                )\n            );\n    }\n\n    function getFtsoFeedDecimals() internal view returns (IFtsoFeedDecimals) {\n        return\n            IFtsoFeedDecimals(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"FtsoFeedDecimals\"))\n                )\n            );\n    }\n\n    function getFtsoFeedPublisher() internal view returns (IFtsoFeedPublisher) {\n        return\n            IFtsoFeedPublisher(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"FtsoFeedPublisher\"))\n                )\n            );\n    }\n\n    function getFtsoFeedIdConverter()\n        internal\n        view\n        returns (IFtsoFeedIdConverter)\n    {\n        return\n            IFtsoFeedIdConverter(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"FtsoFeedIdConverter\"))\n                )\n            );\n    }\n\n    function getFastUpdateIncentiveManager()\n        internal\n        view\n        returns (IFastUpdateIncentiveManager)\n    {\n        return\n            IFastUpdateIncentiveManager(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"FastUpdateIncentiveManager\"))\n                )\n            );\n    }\n\n    function getFastUpdater() internal view returns (IFastUpdater) {\n        return\n            IFastUpdater(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"FastUpdater\"))\n                )\n            );\n    }\n\n    function getFastUpdatesConfiguration()\n        internal\n        view\n        returns (IFastUpdatesConfiguration)\n    {\n        return\n            IFastUpdatesConfiguration(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"FastUpdatesConfiguration\"))\n                )\n            );\n    }\n\n    function getFeeCalculator() internal view returns (IFeeCalculator) {\n        return\n            IFeeCalculator(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"FeeCalculator\"))\n                )\n            );\n    }\n\n    function getFtsoV2() internal view returns (FtsoV2Interface) {\n        return\n            FtsoV2Interface(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"FtsoV2\"))\n                )\n            );\n    }\n\n    function getTestFtsoV2() internal view returns (TestFtsoV2Interface) {\n        return\n            TestFtsoV2Interface(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"FtsoV2\"))\n                )\n            );\n    }\n\n    function getProtocolsV2() internal view returns (ProtocolsV2Interface) {\n        return\n            ProtocolsV2Interface(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"ProtocolsV2\"))\n                )\n            );\n    }\n\n    function getRandomNumberV2()\n        internal\n        view\n        returns (RandomNumberV2Interface)\n    {\n        return\n            RandomNumberV2Interface(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"RandomNumberV2\"))\n                )\n            );\n    }\n\n    function getRewardsV2() internal view returns (RewardsV2Interface) {\n        return\n            RewardsV2Interface(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"RewardsV2\"))\n                )\n            );\n    }\n\n    function getFdcVerification() internal view returns (IFdcVerification) {\n        return\n            IFdcVerification(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"FdcVerification\"))\n                )\n            );\n    }\n\n    function getFdcHub() internal view returns (IFdcHub) {\n        return\n            IFdcHub(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"FdcHub\"))\n                )\n            );\n    }\n\n    function getFdcRequestFeeConfigurations()\n        internal\n        view\n        returns (IFdcRequestFeeConfigurations)\n    {\n        return\n            IFdcRequestFeeConfigurations(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"FdcRequestFeeConfigurations\"))\n                )\n            );\n    }\n\n    function getAssetManagerController()\n        internal\n        view\n        returns (IAssetManagerController)\n    {\n        return\n            IAssetManagerController(\n                FLARE_CONTRACT_REGISTRY.getContractAddressByHash(\n                    keccak256(abi.encode(\"AssetManagerController\"))\n                )\n            );\n    }\n\n    function auxiliaryGetIJsonApiVerification()\n        internal\n        pure\n        returns (IJsonApiVerification)\n    {\n        return IJsonApiVerification(0x07ad8508C9173DC845817472Ca0484035AbFA3c8);\n    }\n\n    // END AUTO GENERATED - DO NOT EDIT ABOVE THIS LINE\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/data/AgentInfo.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nlibrary AgentInfo {\n    enum Status {\n        // agent is operating normally\n        NORMAL,\n        // agent in collateral call band\n        CCB,\n        // liquidation due to collateral ratio - ends when agent is healthy\n        LIQUIDATION,\n        // illegal payment liquidation - always liquidates all and then agent must close vault\n        FULL_LIQUIDATION,\n        // agent announced destroy, cannot mint again; all existing mintings have been redeemed before\n        DESTROYING\n    }\n\n    struct Info {\n        // Current agent's status.\n        AgentInfo.Status status;\n        // Agent vault owner's management address, used for occasional administration.\n        // Immutable.\n        address ownerManagementAddress;\n        // Agent vault owner's work address, used for automatic operations.\n        // Can be changed by a call from the owner's management address.\n        address ownerWorkAddress;\n        // Agent's collateral pool address\n        address collateralPool;\n        // Agent collateral pool's pool token address\n        address collateralPoolToken;\n        // Underlying address as string - to be used for minting payments.\n        // For most other purposes, you use underlyingAddressHash, which is `keccak256(underlyingAddressString)`.\n        string underlyingAddressString;\n        // If true, anybody can mint against this agent.\n        // If false, the agent can only self-mint.\n        // Once minted, all redemption tickets go to the same (public) queue, regardless of this flag.\n        bool publiclyAvailable;\n        // Current fee the agent charges for minting (paid in underlying currency).\n        uint256 feeBIPS;\n        // Share of the minting fee that goes to the pool as percentage of the minting fee.\n        // This share of fee is minted as f-assets and belongs to the pool.\n        uint256 poolFeeShareBIPS;\n        // The token identifier of the agent's current vault collateral.\n        // Token identifier can be used to call AssetManager.getCollateralType().\n        IERC20 vaultCollateralToken;\n        // Amount, set by agent, at which locked and free collateral are calculated for new mintings.\n        // For agent's vault collateral.\n        uint256 mintingVaultCollateralRatioBIPS;\n        // Amount, set by agent, at which locked and free collateral are calculated for new mintings.\n        // For pool collateral.\n        uint256 mintingPoolCollateralRatioBIPS;\n        // The maximum number of lots that the agent can mint.\n        // This can change any moment due to minting, redemption or price changes.\n        uint256 freeCollateralLots;\n        // Total amount of vault collateral in agent's vault.\n        uint256 totalVaultCollateralWei;\n        // Free collateral, available for new mintings.\n        // Note: this value doesn't tell you anything about agent being near liquidation, since it is\n        // calculated at agentMinCollateralRatio, not minCollateralRatio.\n        // Use collateralRatioBIPS to see whether the agent is near liquidation.\n        uint256 freeVaultCollateralWei;\n        // The actual agent's collateral ratio, as it is used in liquidation.\n        // For calculation, the system checks both FTSO prices and trusted provider's prices and uses\n        // the ones that give higher ratio.\n        uint256 vaultCollateralRatioBIPS;\n        // The token identifier of the agent's current vault collateral.\n        // Token identifier can be used to call AssetManager.getCollateralType().\n        IERC20 poolWNatToken;\n        // Total amount of NAT collateral in agent's pool.\n        uint256 totalPoolCollateralNATWei;\n        // Free NAT pool collateral (see vault collateral for details).\n        uint256 freePoolCollateralNATWei;\n        // The actual pool collateral ratio (see vault collateral for details).\n        uint256 poolCollateralRatioBIPS;\n        // The amount of pool tokens that belong to agent's vault. This limits the amount of possible\n        // minting: to be able to mint, the NAT value of all backed fassets together with new ones, times\n        // mintingPoolHoldingsRequiredBIPS, must be smaller than the agent's pool tokens amount converted to NAT.\n        // Note: the amount of agent's pool tokens only affects minting, not liquidation.\n        uint256 totalAgentPoolTokensWei;\n        // The amount of vault collateral that will be withdrawn by the agent.\n        uint256 announcedVaultCollateralWithdrawalWei;\n        // The amount of pool tokens that will be withdrawn by the agent.\n        uint256 announcedPoolTokensWithdrawalWei;\n        // Free agent's pool tokens.\n        uint256 freeAgentPoolTokensWei;\n        // Total amount of minted f-assets.\n        uint256 mintedUBA;\n        // Total amount reserved for ongoing mintings.\n        uint256 reservedUBA;\n        // Total amount of ongoing redemptions.\n        uint256 redeemingUBA;\n        // Total amount of ongoing redemptions that lock the pool collateral.\n        // (In pool self-close exits, pool collateral is not locked. So the amount of locked\n        // collateral in the pool can be less than the amount of locked vault collateral.)\n        uint256 poolRedeemingUBA;\n        // Total amount of dust (unredeemable minted f-assets).\n        // Note: dustUBA is part of mintedUBA, so the amount of redeemable f-assets is calculated as\n        // `mintedUBA - dustUBA`\n        uint256 dustUBA;\n        // Liquidation info\n        // If the agent is in CCB or if current liquidation started in CCB, the time agent entered CCB (otherwise 0).\n        uint256 ccbStartTimestamp;\n        // If the agent is in LIQUIDATION or FULL_LIQUIDATION, the time agent entered liquidation.\n        // If the agent is in CCB, the time agent will enter liquidation (in future).\n        // If status is neither of that, returns 0.\n        // Can be used for calculating current liquidation premium, which depends on time since liquidation started.\n        uint256 liquidationStartTimestamp;\n        // When agent is in liquidation, this is the amount o FAssets that need to be liquidated to bring the agent's\n        // position to safety. When performing liquidation, only up to this amount of FAssets will be liquidated.\n        // If not in liquidation, this value is 0.\n        // Since the liquidation state may need to be upgraded by, call `startLiquidation` before\n        // `getAgentInfo` to get the value that will actually be used in liquidation.\n        uint256 maxLiquidationAmountUBA;\n        // When agent is in liquidation, this is the factor (in BIPS) of the converted value of the liquidated\n        // FAssets paid by the vault collateral. If not in liquidation, this value is 0.\n        uint256 liquidationPaymentFactorVaultBIPS;\n        // When agent is in liquidation, this is the factor (in BIPS) of the converted value of the liquidated\n        // FAssets paid by the pool collateral. If not in liquidation, this value is 0.\n        uint256 liquidationPaymentFactorPoolBIPS;\n        // Total underlying balance (backing and free).\n        int256 underlyingBalanceUBA;\n        // The minimum underlying balance that has to be held by the agent. Below this, agent is liquidated.\n        uint256 requiredUnderlyingBalanceUBA;\n        // Underlying balance not backing anything (can be used for gas/fees or withdrawn after announcement).\n        int256 freeUnderlyingBalanceUBA;\n        // Current underlying withdrawal announcement (or 0 if no announcement was made).\n        uint256 announcedUnderlyingWithdrawalId;\n        // The factor set by the agent to multiply the price at which agent buys f-assets from pool\n        // token holders on self-close exit (when requested or the redeemed amount is less than 1 lot).\n        uint256 buyFAssetByAgentFactorBIPS;\n        // The minimum collateral ratio above which a staker can exit the pool\n        // (this is CR that must be left after exit).\n        // Must be higher than system minimum collateral ratio for pool collateral.\n        uint256 poolExitCollateralRatioBIPS;\n        // The CR below which it is possible to enter the pool at discounted rate (to prevent liquidation).\n        // Must be higher than system minimum collateral ratio for pool collateral.\n        uint256 poolTopupCollateralRatioBIPS;\n        // The discount to pool token price when entering and pool CR is below pool topup CR.\n        uint256 poolTopupTokenPriceFactorBIPS;\n        // Agent's handshake type - minting or redeeming can be rejected.\n        // 0 - no verification, 1 - manual verification, ...\n        uint256 handshakeType;\n    }\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/data/AgentSettings.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nlibrary AgentSettings {\n    struct Data {\n        // The token used as vault collateral. Must be one of the tokens obtained by `getCollateralTypes()`,\n        // with class VAULT.\n        IERC20 vaultCollateralToken;\n        // The suffix to pool token name and symbol that identifies new vault's collateral pool token.\n        // Must be unique within an asset manager.\n        string poolTokenSuffix;\n        // Minting fee. Normally charged to minters for publicly available agents, but must be set\n        // also for self-minting agents to pay part of it to collateral pool.\n        // Fee is paid in underlying currency along with backing assets.\n        uint256 feeBIPS;\n        // Share of the minting fee that goes to the pool as percentage of the minting fee.\n        // This share of fee is minted as f-assets and belongs to the pool.\n        uint256 poolFeeShareBIPS;\n        // Collateral ratio at which we calculate locked collateral and collateral available for minting.\n        // Agent may set own value for minting collateral ratio on creation.\n        // The value must always be greater than system minimum collateral ratio for vault collateral.\n        // Warning: having this value near global min collateral ratio can quickly lead to liquidation for public\n        // agents, so it is advisable to set it significantly higher.\n        uint256 mintingVaultCollateralRatioBIPS;\n        // Collateral ratio at which we calculate locked collateral and collateral available for minting.\n        // Agent may set own value for minting collateral ratio on creation.\n        // The value must always be greater than system minimum collateral ratio for pool collateral.\n        // Warning: having this value near global min collateral ratio can quickly lead to liquidation for public\n        // agents, so it is advisable to set it significantly higher.\n        uint256 mintingPoolCollateralRatioBIPS;\n        // The factor set by the agent to multiply the price at which agent buys f-assets from pool\n        // token holders on self-close exit (when requested or the redeemed amount is less than 1 lot).\n        uint256 buyFAssetByAgentFactorBIPS;\n        // The minimum collateral ratio above which a staker can exit the pool\n        // (this is CR that must be left after exit).\n        // Must be higher than system minimum collateral ratio for pool collateral.\n        uint256 poolExitCollateralRatioBIPS;\n        // The CR below which it is possible to enter the pool at discounted rate (to prevent liquidation).\n        // Must be higher than system minimum collateral ratio for pool collateral.\n        uint256 poolTopupCollateralRatioBIPS;\n        // The discount to pool token price when entering and pool CR is below pool topup CR.\n        uint256 poolTopupTokenPriceFactorBIPS;\n        // Agent's handshake type - minting or redeeming can be rejected.\n        // 0 - no verification, 1 - manual verification, ...\n        uint256 handshakeType;\n    }\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/data/AssetManagerSettings.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nlibrary AssetManagerSettings {\n    struct Data {\n        // Required contracts.\n        // Only used to verify that calls come from assetManagerController.\n        // Type: AssetManagerController\n        // changed via address updater\n        address assetManagerController;\n        // The f-asset contract managed by this asset manager.\n        // Type: IIFAsset\n        // immutable\n        address fAsset;\n        // Factory for creating new agent vaults.\n        // Type: IAgentVaultFactory\n        // timelocked\n        address agentVaultFactory;\n        // Factory for creating new agent collateral pools.\n        // Type: ICollateralPoolFactory\n        // timelocked\n        address collateralPoolFactory;\n        // Factory for creating new agent collateral pool tokens.\n        // Type: ICollateralPoolTokenFactory\n        // timelocked\n        address collateralPoolTokenFactory;\n        // The suffix to pool token name and symbol that identifies new vault's collateral pool token.\n        // When vault is created, the owner passes own suffix which will be appended to this.\n        string poolTokenSuffix;\n        // If set, the whitelist contains a list of accounts that can call public methods\n        // (minting, redeeming, challenging, etc.)\n        // This can be `address(0)`, in which case no whitelist checks are done.\n        // Type: IWhitelist\n        // timelocked\n        address whitelist;\n        // If set, the owner address registry contains a list of allowed agent owner's\n        // management addresses and mappings from management to work address.\n        // Type: IAgentOwnerRegistry\n        // timelocked\n        address agentOwnerRegistry;\n        // Attestation client verifies and decodes attestation proofs.\n        // Type: IFdcVerification\n        // changed via address updater\n        address fdcVerification;\n        // The address where burned NAt is sent.\n        // (E.g. collateral reservation fee is burned on successful minting.)\n        // immutable\n        address payable burnAddress;\n        // The contract that reads prices from FTSO system in an FTSO version independent way.\n        // Type: IPriceReader\n        // timelocked\n        address priceReader;\n        // Same as assetToken.decimals()\n        // immutable\n        uint8 assetDecimals;\n        // Number of decimals of precision of minted amounts.\n        // assetMintingGranularityUBA = 10 ** (assetDecimals - assetMintingDecimals)\n        // immutable\n        uint8 assetMintingDecimals;\n        // Must match attestation data chainId.\n        // immutable\n        bytes32 chainId;\n        // Average time between two successive blocks on the underlying chain, in milliseconds.\n        // rate-limited\n        uint32 averageBlockTimeMS;\n        // The minimum amount of pool tokens the agent must hold to be able to mint.\n        // To be able to mint, the NAT value of all backed fassets together with new ones times this percentage\n        // must be smaller than the agent's pool tokens' amount converted to NAT.\n        // rate-limited\n        uint32 mintingPoolHoldingsRequiredBIPS;\n        // Collateral reservation fee that must be paid by the minter.\n        // Payment is in NAT, but is proportional to the value of assets to be minted.\n        // rate-limited\n        uint16 collateralReservationFeeBIPS;\n        // Asset unit value (e.g. 1 BTC or 1 ETH) in UBA = 10 ** assetToken.decimals()\n        // immutable\n        uint64 assetUnitUBA;\n        // The granularity in which lots are measured = the value of AMG (asset minting granularity) in UBA.\n        // Can only be changed via redeploy of AssetManager.\n        // AMG is used internally instead of UBA so that minted quantities fit into 64bits to reduce storage.\n        // So assetMintingGranularityUBA should be set so that the max supply in AMG of this currency\n        // in foreseeable time (say 100yr) cannot overflow 64 bits.\n        // immutable\n        uint64 assetMintingGranularityUBA;\n        // Lot size in asset minting granularity. May change, which affects subsequent mintings and redemptions.\n        // timelocked\n        uint64 lotSizeAMG;\n        // The percentage of minted f-assets that the agent must hold in his underlying address.\n        uint16 minUnderlyingBackingBIPS;\n        // for some chains (e.g. Ethereum) we require that agent proves that underlying address is an EOA address\n        // this must be done by presenting a payment proof from that address\n        // immutable\n        bool requireEOAAddressProof;\n        // Maximum minted amount of the f-asset.\n        // rate-limited\n        uint64 mintingCapAMG;\n        // Number of underlying blocks that the minter or agent is allowed to pay underlying value.\n        // If payment not reported in that time, minting/redemption can be challenged and default action triggered.\n        // CAREFUL: Count starts from the current proved block height, so the minters and agents should\n        // make sure that current block height is fresh, otherwise they might not have enough time for payment.\n        // timelocked\n        uint64 underlyingBlocksForPayment;\n        // Minimum time to allow agent to pay for redemption or minter to pay for minting.\n        // This is useful for fast chains, when there can be more than one block per second.\n        // Redemption/minting payment failure can be called only after underlyingSecondsForPayment have elapsed\n        // on underlying chain.\n        // CAREFUL: Count starts from the current proved block timestamp, so the minters and agents should\n        // make sure that current block timestamp is fresh, otherwise they might not have enough time for payment.\n        // This is partially mitigated by adding local duration since the last block height update to\n        // the current underlying block timestamp.\n        // timelocked\n        uint64 underlyingSecondsForPayment;\n        // Redemption fee in underlying currency base amount (UBA).\n        // rate-limited\n        uint16 redemptionFeeBIPS;\n        // On redemption underlying payment failure, redeemer is compensated with\n        // redemption value recalculated in flare/sgb times redemption failure factor.\n        // Expressed in BIPS, e.g. 12000 for factor of 1.2.\n        // This is the part of factor paid from agent's vault collateral.\n        // rate-limited\n        uint32 redemptionDefaultFactorVaultCollateralBIPS;\n        // This is the part of redemption factor paid from agent's pool collateral.\n        // rate-limited\n        uint32 redemptionDefaultFactorPoolBIPS;\n        // If the agent or redeemer becomes unresponsive, we still need payment or non-payment confirmations\n        // to be presented eventually to properly track agent's underlying balance.\n        // Therefore we allow anybody to confirm payments/non-payments this many seconds after request was made.\n        // rate-limited\n        uint64 confirmationByOthersAfterSeconds;\n        // The user who makes abandoned redemption confirmations gets rewarded by the following amount.\n        // rate-limited\n        uint128 confirmationByOthersRewardUSD5;\n        // To prevent unbounded work, the number of tickets redeemed in a single request is limited.\n        // rate-limited\n        // >= 1\n        uint16 maxRedeemedTickets;\n        // Challenge reward can be composed of two part - fixed and proportional (any of them can be zero).\n        // This is the proportional part (in BIPS).\n        // rate-limited\n        uint16 paymentChallengeRewardBIPS;\n        // Challenge reward can be composed of two part - fixed and proportional (any of them can be zero).\n        // This is the fixed part (in vault collateral token wei).\n        // rate-limited\n        uint128 paymentChallengeRewardUSD5;\n        // Agent has to announce any collateral withdrawal ar vault destroy and then wait for at least\n        // withdrawalWaitMinSeconds. This prevents challenged agent to remove all collateral before\n        // challenge can be proved.\n        // rate-limited\n        uint64 withdrawalWaitMinSeconds;\n        // Maximum age that trusted price feed is valid.\n        // Otherwise (if there were no trusted votes for that long) just use generic ftso price feed.\n        // rate-limited\n        uint64 maxTrustedPriceAgeSeconds;\n        // Agent can remain in CCB for this much time, after that liquidation starts automatically.\n        // rate-limited\n        uint64 ccbTimeSeconds;\n        // Amount of seconds (typically 1 day) that the payment/non-payment proofs must be available.\n        // This setting is used in `unstickMinting` and `finishRedemptionWithoutPayment` to prove that the time when\n        // payment/non-payment could be proved has already passed.\n        // rate-limited\n        uint64 attestationWindowSeconds;\n        // Minimum time after an update of a setting before the same setting can be updated again.\n        // timelocked\n        uint64 minUpdateRepeatTimeSeconds;\n        // Ratio at which the agents can buy back their collateral when f-asset is terminated.\n        // Typically a bit more than 1 to incentivize agents to buy f-assets and self-close instead.\n        // immutable\n        uint64 buybackCollateralFactorBIPS;\n        // Minimum time that has to pass between underlying withdrawal announcement and the confirmation.\n        // Any value is ok, but higher values give more security against multiple announcement attack by a miner.\n        // Shouldn't be much bigger than Flare data connector response time, so that payments can be confirmed without\n        // extra wait. Should be smaller than confirmationByOthersAfterSeconds (e.g. less than 1 hour).\n        // rate-limited\n        uint64 announcedUnderlyingConfirmationMinSeconds;\n        // Minimum time from the moment token is deprecated to when it becomes invalid and agents still using\n        // it as vault collateral get liquidated.\n        // timelocked\n        uint64 tokenInvalidationTimeMinSeconds;\n        // On some rare occasions (stuck minting, locked fassets after termination), the agent has to unlock\n        // collateral. For this, part of collateral corresponding to FTSO asset value is burned and the rest\n        // is released.\n        // However, we cannot burn typical vault collateral (stablecoins), so the agent must buy them for NAT\n        // at FTSO price multiplied with this factor (should be a bit above 1) and then we burn the NATs.\n        // timelocked\n        uint32 vaultCollateralBuyForFlareFactorBIPS;\n        // Amount of seconds that have to pass between available list exit announcement and execution.\n        // rate-limited\n        uint64 agentExitAvailableTimelockSeconds;\n        // Amount of seconds that have to pass between agent fee and pool fee share change announcement and execution.\n        // rate-limited\n        uint64 agentFeeChangeTimelockSeconds;\n        // Amount of seconds that have to pass between agent-set minting collateral ratio (vault or pool)\n        // change announcement and execution.\n        // rate-limited\n        uint64 agentMintingCRChangeTimelockSeconds;\n        // Amount of seconds that have to pass between agent-set settings for pool exit and topup\n        // (exit CR, topup CR, topup bonus) change announcement and execution.\n        // rate-limited\n        uint64 poolExitAndTopupChangeTimelockSeconds;\n        // Amount of seconds that an agent is allowed to execute an update once it is allowed.\n        // rate-limited\n        uint64 agentTimelockedOperationWindowSeconds;\n        // duration of the timelock for collateral pool tokens after minting\n        uint32 collateralPoolTokenTimelockSeconds;\n        // If there was no liquidator for the current liquidation offer,\n        // go to the next step of liquidation after a certain period of time.\n        // rate-limited\n        uint64 liquidationStepSeconds;\n        // Factor with which to multiply the asset price in native currency to obtain the payment\n        // to the liquidator.\n        // Expressed in BIPS, e.g. [12000, 16000, 20000] means that the liquidator will be paid 1.2, 1.6 and 2.0\n        // times the market price of the liquidated assets after each `liquidationStepSeconds`.\n        // Values in the array must increase and be greater than 100%.\n        // rate-limited\n        uint256[] liquidationCollateralFactorBIPS;\n        // How much of the liquidation is paid in vault collateral.\n        // The remainder will be paid in pool NAT collateral.\n        uint256[] liquidationFactorVaultCollateralBIPS;\n        // Minimum time that the system must wait before performing diamond cut.\n        // The actual timelock is the maximum of this setting and GovernanceSettings.timelock.\n        uint64 diamondCutMinTimelockSeconds;\n        // The maximum total pause that can be triggered by non-governance (but governance allowed) caller.\n        // The duration count can be reset by the governance.\n        uint64 maxEmergencyPauseDurationSeconds;\n        // The amount of time since last emergency pause after which the total pause duration counter\n        // will reset automatically.\n        uint64 emergencyPauseDurationResetAfterSeconds;\n        // The amount of time after which the collateral reservation can be cancelled if the\n        // handshake is not completed.\n        // rate-limited\n        uint64 cancelCollateralReservationAfterSeconds;\n        // The amount of collateral reservation fee returned to the minter in case of rejection or cancellation.\n        // Expressed in BIPS, e.g. 9500 for factor of 0.95, max 10000 for factor of 1.0.\n        // rate-limited\n        uint16 rejectOrCancelCollateralReservationReturnFactorBIPS;\n        // Time window inside which the agent can reject the redemption request.\n        // rate-limited\n        uint64 rejectRedemptionRequestWindowSeconds;\n        // Time window inside which the agent can take over the redemption request from another agent\n        // that has rejected it.\n        // rate-limited\n        uint64 takeOverRedemptionRequestWindowSeconds;\n        // On redemption rejection, without take over, redeemer is compensated with\n        // redemption value recalculated in flare/sgb times redemption failure factor.\n        // Expressed in BIPS, e.g. 12000 for factor of 1.2.\n        // This is the part of factor paid from agent's vault collateral.\n        // rate-limited\n        uint32 rejectedRedemptionDefaultFactorVaultCollateralBIPS;\n        // This is the part of rejected redemption factor paid from agent's pool collateral.\n        // rate-limited\n        uint32 rejectedRedemptionDefaultFactorPoolBIPS;\n    }\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/data/AvailableAgentInfo.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"./AgentInfo.sol\";\n\nlibrary AvailableAgentInfo {\n    struct Data {\n        // Agent vault address.\n        address agentVault;\n        // The management address of the agent vault's owner.\n        address ownerManagementAddress;\n        // Agent's minting fee in BIPS.\n        uint256 feeBIPS;\n        // Minimum agent vault collateral ratio needed for minting.\n        uint256 mintingVaultCollateralRatioBIPS;\n        // Minimum pool collateral ratio needed for minting.\n        uint256 mintingPoolCollateralRatioBIPS;\n        // The number of lots that can be minted by this agent.\n        // Note: the value is only informative since it can can change at any time\n        // due to price changes, reservation, minting, redemption, or even lot size change.\n        uint256 freeCollateralLots;\n        // The agent status, as for getAgentInfo().\n        AgentInfo.Status status;\n    }\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/data/CollateralReservationInfo.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nlibrary CollateralReservationInfo {\n    struct Data {\n        // The id used for executing or defaulting the minting.\n        uint64 collateralReservationId;\n        // The agent vault whose collateral is reserved.\n        address agentVault;\n        // The minter address - the address that will receive the minted FAssets.\n        address minter;\n        // The agent's underlying address to which the underlying assets should be paid by the minter.\n        string paymentAddress;\n        // Payment reference that must be part of the agent's redemption payment.\n        bytes32 paymentReference;\n        // The amount of FAssets that the minter will receive. Always a whole number of lots.\n        uint256 valueUBA;\n        // The underlying fee. The total amount the minter has to deposit is `valueUBA + mintingFeeUBA`.\n        // Part of the fee is minted as pool fee share and the rest becomes agent's free underlying.\n        uint128 mintingFeeUBA;\n        // The fee that was paid at the collateral reservation time.\n        // Part of the fee is goes to the pool and the rest to the agent vault as WNAT.\n        uint128 reservationFeeNatWei;\n        // Proportion of the mintingFeeUBA and reservationFeeNatWei that belogs to the collateral pool.\n        uint16 poolFeeShareBIPS;\n        // The underlying block (approximate - as known by the asset manager) when the reservation occured.\n        uint64 firstUnderlyingBlock;\n        // The last underlying block and timestamp for redemption payment. Redemption is defaulted if\n        // there is no payment by the time BOTH lastUnderlyingBlock and lastUnderlyingTimestamp have passed.\n        uint64 lastUnderlyingBlock;\n        uint64 lastUnderlyingTimestamp;\n        // The executor, optionally assigned by the minter to execute the minting.\n        // (Only minter, agent or executor may execute the minting.)\n        address executor;\n        // The fee in NAT that the executor receives if they successfuly execute the minting.\n        uint256 executorFeeNatWei;\n        // If non-zero, the agent has started the handshake process.\n        uint64 handshakeStartTimestamp;\n        // Merkle root of the list of addresses from which the minter is going to deposit the underlying assets\n        // (only needed when handshake is enabled for the agent).\n        bytes32 sourceAddressesRoot;\n    }\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/data/CollateralType.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nlibrary CollateralType {\n    enum Class {\n        NONE, // unused\n        POOL, // pool collateral type\n        VAULT // usable as vault collateral\n    }\n\n    // Collateral token is uniquely identified by the pair (collateralClass, token).\n    struct Data {\n        // The kind of collateral for this token.\n        CollateralType.Class collateralClass;\n        // The ERC20 token contract for this collateral type.\n        IERC20 token;\n        // Same as token.decimals(), when that exists.\n        uint256 decimals;\n        // Token invalidation time. Must be 0 on creation.\n        uint256 validUntil;\n        // When `true`, the FTSO with symbol `assetFtsoSymbol` returns asset price relative to this token\n        // (such FTSO's will probably exist for major stablecoins).\n        // When `false`, the FTSOs with symbols `assetFtsoSymbol` and `tokenFtsoSymbol` give asset and token\n        // price relative to the same reference currency and the asset/token price is calculated as their ratio.\n        bool directPricePair;\n        // FTSO symbol for the asset, relative to this token or a reference currency\n        // (it depends on the value of `directPricePair`).\n        string assetFtsoSymbol;\n        // FTSO symbol for this token in reference currency.\n        // Used for asset/token price calculation when `directPricePair` is `false`.\n        // Otherwise it is irrelevant to asset/token price calculation, but if it is nonempty,\n        // it is still used in calculation of challenger and confirmation rewards\n        // (otherwise we assume it approximates the value of USD and pay directly the USD amount in vault collateral).\n        string tokenFtsoSymbol;\n        // Minimum collateral ratio for healthy agents.\n        uint256 minCollateralRatioBIPS;\n        // Minimum collateral ratio for agent in CCB (Collateral call band).\n        // If the agent's collateral ratio is less than this, skip the CCB and go straight to liquidation.\n        // A bit smaller than minCollateralRatioBIPS.\n        uint256 ccbMinCollateralRatioBIPS;\n        // Minimum collateral ratio required to get agent out of liquidation.\n        // Will always be greater than minCollateralRatioBIPS.\n        uint256 safetyMinCollateralRatioBIPS;\n    }\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/data/RedemptionRequestInfo.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nlibrary RedemptionRequestInfo {\n    enum Status {\n        ACTIVE,\n        DEFAULTED\n    }\n\n    struct Data {\n        // The id used for confirming or defaulting the request.\n        uint64 redemptionRequestId;\n        // Redemption status. Note that on payment confirmation the request is deleted, so there is no success status.\n        RedemptionRequestInfo.Status status;\n        // The redeemed agent vault.\n        address agentVault;\n        // Native redeemer address - the address that receives collateral in case of default.\n        address redeemer;\n        // The underlying address to which the redeemed assets should be paid by the agent.\n        string paymentAddress;\n        // Payment reference that must be part of the agent's redemption payment.\n        bytes32 paymentReference;\n        // The amount of the FAsset the redeemer has burned. Note that this is not the amount of underlying\n        // the redeemer will receive - the redemption payment amount is this minus the underlyingFeeUBA.\n        uint128 valueUBA;\n        // The redemption fee that remain on agent's underlying address.\n        // Part of it will be reminted as pool fee share and the rest becomes the agent's free underlying.\n        uint128 feeUBA;\n        // Proportional part of the underlyingFeeUBA that is re-minted on successful redemption\n        // and goes to the collateral pool.\n        uint16 poolFeeShareBIPS;\n        // The underlying block (approximate - as known by the asset manager) when the request occured.\n        uint64 firstUnderlyingBlock;\n        // The last underlying block and timestamp for redemption payment. Redemption is defaulted if\n        // there is no payment by the time BOTH lastUnderlyingBlock and lastUnderlyingTimestamp have passed.\n        uint64 lastUnderlyingBlock;\n        uint64 lastUnderlyingTimestamp;\n        // The native (Flare/Songbird) chain timstamp when the request occured.\n        uint64 timestamp;\n        // True if redemption was created by a selfCloseExit on the collateral pool.\n        bool poolSelfClose;\n        // True if redemption was initiated by an agent for transfer to core vault.\n        bool transferToCoreVault;\n        // The executor, optionally assigned by the redeemer to execute the default if needed.\n        // (Only redeemer, agent or executor may execute the default.)\n        address executor;\n        // The fee in NAT that the executor receives if they successfuly call default.\n        uint256 executorFeeNatWei;\n        // If non-zero, request was rejected in handshake process.\n        uint64 rejectionTimestamp;\n        // If non-zero, handshake-rejected request was taken over by another agent.\n        uint64 takeOverTimestamp;\n    }\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/data/RedemptionTicketInfo.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nlibrary RedemptionTicketInfo {\n    struct Data {\n        // The id of the ticket, same as returned in RedemptionTicketCreated/Updated/Deleted events.\n        uint256 redemptionTicketId;\n        // Backing agent vault address.\n        address agentVault;\n        // The amount of FAsset on the ticket.\n        uint256 ticketValueUBA;\n    }\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/diamond/interfaces/IDiamondLoupe.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\n// A loupe is a small magnifying glass used to look at diamonds.\n// These functions look at diamonds\ninterface IDiamondLoupe {\n    /// These functions are expected to be called frequently\n    /// by tools.\n\n    struct Facet {\n        address facetAddress;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Gets all facet addresses and their four byte function selectors.\n    /// @return facets_ Facet\n    function facets() external view returns (Facet[] memory facets_);\n\n    /// @notice Gets all the function selectors supported by a specific facet.\n    /// @param _facet The facet address.\n    /// @return facetFunctionSelectors_\n    function facetFunctionSelectors(\n        address _facet\n    ) external view returns (bytes4[] memory facetFunctionSelectors_);\n\n    /// @notice Get all the facet addresses used by a diamond.\n    /// @return facetAddresses_\n    function facetAddresses()\n        external\n        view\n        returns (address[] memory facetAddresses_);\n\n    /// @notice Gets the facet that supports the given selector.\n    /// @dev If facet is not found return address(0).\n    /// @param _functionSelector The function selector.\n    /// @return facetAddress_ The facet address.\n    function facetAddress(\n        bytes4 _functionSelector\n    ) external view returns (address facetAddress_);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/ftso/interfaces/IIFtso.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"../../genesis/interfaces/IFtsoGenesis.sol\";\nimport \"../../IFtso.sol\";\nimport \"../../token/interfaces/IIVPToken.sol\";\n\ninterface IIFtso is IFtso, IFtsoGenesis {\n    /// function finalizePriceReveal\n    /// called by reward manager only on correct timing.\n    /// if price reveal period for epoch x ended. finalize.\n    /// iterate list of price submissions\n    /// find weighted median\n    /// find adjucant 50% of price submissions.\n    /// Allocate reward for any price submission which is same as a \"winning\" submission\n    function finalizePriceEpoch(\n        uint256 _epochId,\n        bool _returnRewardData\n    )\n        external\n        returns (\n            address[] memory _eligibleAddresses,\n            uint256[] memory _natWeights,\n            uint256 _totalNatWeight\n        );\n\n    function fallbackFinalizePriceEpoch(uint256 _epochId) external;\n\n    function forceFinalizePriceEpoch(uint256 _epochId) external;\n\n    // activateFtso will be called by ftso manager once ftso is added\n    // before this is done, FTSO can't run\n    function activateFtso(\n        uint256 _firstEpochStartTs,\n        uint256 _submitPeriodSeconds,\n        uint256 _revealPeriodSeconds\n    ) external;\n\n    function deactivateFtso() external;\n\n    // update initial price and timestamp - only if not active\n    function updateInitialPrice(\n        uint256 _initialPriceUSD,\n        uint256 _initialPriceTimestamp\n    ) external;\n\n    function configureEpochs(\n        uint256 _maxVotePowerNatThresholdFraction,\n        uint256 _maxVotePowerAssetThresholdFraction,\n        uint256 _lowAssetUSDThreshold,\n        uint256 _highAssetUSDThreshold,\n        uint256 _highAssetTurnoutThresholdBIPS,\n        uint256 _lowNatTurnoutThresholdBIPS,\n        uint256 _elasticBandRewardBIPS,\n        uint256 _elasticBandWidthPPM,\n        address[] memory _trustedAddresses\n    ) external;\n\n    function setAsset(IIVPToken _asset) external;\n\n    function setAssetFtsos(IIFtso[] memory _assetFtsos) external;\n\n    // current vote power block will update per reward epoch.\n    // the FTSO doesn't have notion of reward epochs.\n    // reward manager only can set this data.\n    function setVotePowerBlock(uint256 _blockNumber) external;\n\n    function initializeCurrentEpochStateForReveal(\n        uint256 _circulatingSupplyNat,\n        bool _fallbackMode\n    ) external;\n\n    /**\n     * @notice Returns ftso manager address\n     */\n    function ftsoManager() external view returns (address);\n\n    /**\n     * @notice Returns the FTSO asset\n     * @dev Asset is null in case of multi-asset FTSO\n     */\n    function getAsset() external view returns (IIVPToken);\n\n    /**\n     * @notice Returns the Asset FTSOs\n     * @dev AssetFtsos is not null only in case of multi-asset FTSO\n     */\n    function getAssetFtsos() external view returns (IIFtso[] memory);\n\n    /**\n     * @notice Returns current configuration of epoch state\n     * @return _maxVotePowerNatThresholdFraction        High threshold for native token vote power per voter\n     * @return _maxVotePowerAssetThresholdFraction      High threshold for asset vote power per voter\n     * @return _lowAssetUSDThreshold            Threshold for low asset vote power\n     * @return _highAssetUSDThreshold           Threshold for high asset vote power\n     * @return _highAssetTurnoutThresholdBIPS   Threshold for high asset turnout\n     * @return _lowNatTurnoutThresholdBIPS      Threshold for low nat turnout\n     * @return _elasticBandRewardBIPS           Hybrid reward band, where _elasticBandRewardBIPS goes to the \n        elastic band (prices within _elasticBandWidthPPM of the median) \n        and 10000 - elasticBandRewardBIPS to the IQR \n     * @return _elasticBandWidthPPM             Prices within _elasticBandWidthPPM of median are rewarded\n     * @return _trustedAddresses                Trusted addresses - use their prices if low nat turnout is not achieved\n     */\n    function epochsConfiguration()\n        external\n        view\n        returns (\n            uint256 _maxVotePowerNatThresholdFraction,\n            uint256 _maxVotePowerAssetThresholdFraction,\n            uint256 _lowAssetUSDThreshold,\n            uint256 _highAssetUSDThreshold,\n            uint256 _highAssetTurnoutThresholdBIPS,\n            uint256 _lowNatTurnoutThresholdBIPS,\n            uint256 _elasticBandRewardBIPS,\n            uint256 _elasticBandWidthPPM,\n            address[] memory _trustedAddresses\n        );\n\n    /**\n     * @notice Returns parameters necessary for approximately replicating vote weighting.\n     * @return _assets                  the list of Assets that are accounted in vote\n     * @return _assetMultipliers        weight of each asset in (multiasset) ftso, mutiplied by TERA\n     * @return _totalVotePowerNat       total native token vote power at block\n     * @return _totalVotePowerAsset     total combined asset vote power at block\n     * @return _assetWeightRatio        ratio of combined asset vp vs. native token vp (in BIPS)\n     * @return _votePowerBlock          vote powewr block for given epoch\n     */\n    function getVoteWeightingParameters()\n        external\n        view\n        returns (\n            IIVPToken[] memory _assets,\n            uint256[] memory _assetMultipliers,\n            uint256 _totalVotePowerNat,\n            uint256 _totalVotePowerAsset,\n            uint256 _assetWeightRatio,\n            uint256 _votePowerBlock\n        );\n\n    function wNat() external view returns (IIVPToken);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/FtsoV2Interface.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * FtsoV2 long term support interface.\n */\ninterface FtsoV2Interface {\n    /// Feed data structure\n    struct FeedData {\n        uint32 votingRoundId;\n        bytes21 id;\n        int32 value;\n        uint16 turnoutBIPS;\n        int8 decimals;\n    }\n\n    /// Feed data with proof structure\n    struct FeedDataWithProof {\n        bytes32[] proof;\n        FeedData body;\n    }\n\n    /// Feed id change structure\n    struct FeedIdChange {\n        bytes21 oldFeedId;\n        bytes21 newFeedId;\n    }\n\n    /// Event emitted when a feed id is changed (e.g. feed renamed).\n    event FeedIdChanged(bytes21 indexed oldFeedId, bytes21 indexed newFeedId);\n\n    /**\n     * Returns the FTSO protocol id.\n     */\n    function getFtsoProtocolId() external view returns (uint256);\n\n    /**\n     * Returns the list of supported feed ids (currently active feed ids).\n     * To get the list of all available feed ids, combine with `getFeedIdChanges()`.\n     * @return _feedIds The list of supported feed ids.\n     */\n    function getSupportedFeedIds()\n        external\n        view\n        returns (bytes21[] memory _feedIds);\n\n    /**\n     * Returns the list of feed id changes.\n     * @return _feedIdChanges The list of changed feed id pairs (old and new feed id).\n     */\n    function getFeedIdChanges()\n        external\n        view\n        returns (FeedIdChange[] memory _feedIdChanges);\n\n    /**\n     * Calculates the fee for fetching a feed.\n     * @param _feedId The id of the feed.\n     * @return _fee The fee for fetching the feed.\n     */\n    function calculateFeeById(\n        bytes21 _feedId\n    ) external view returns (uint256 _fee);\n\n    /**\n     * Calculates the fee for fetching feeds.\n     * @param _feedIds The list of feed ids.\n     * @return _fee The fee for fetching the feeds.\n     */\n    function calculateFeeByIds(\n        bytes21[] memory _feedIds\n    ) external view returns (uint256 _fee);\n\n    /**\n     * Returns stored data of a feed.\n     * A fee (calculated by the FeeCalculator contract) may need to be paid.\n     * @param _feedId The id of the feed.\n     * @return _value The value for the requested feed.\n     * @return _decimals The decimal places for the requested feed.\n     * @return _timestamp The timestamp of the last update.\n     */\n    function getFeedById(\n        bytes21 _feedId\n    )\n        external\n        payable\n        returns (uint256 _value, int8 _decimals, uint64 _timestamp);\n\n    /**\n     * Returns stored data of each feed.\n     * A fee (calculated by the FeeCalculator contract) may need to be paid.\n     * @param _feedIds The list of feed ids.\n     * @return _values The list of values for the requested feeds.\n     * @return _decimals The list of decimal places for the requested feeds.\n     * @return _timestamp The timestamp of the last update.\n     */\n    function getFeedsById(\n        bytes21[] memory _feedIds\n    )\n        external\n        payable\n        returns (\n            uint256[] memory _values,\n            int8[] memory _decimals,\n            uint64 _timestamp\n        );\n\n    /**\n     * Returns value in wei and timestamp of a feed.\n     * A fee (calculated by the FeeCalculator contract) may need to be paid.\n     * @param _feedId The id of the feed.\n     * @return _value The value for the requested feed in wei (i.e. with 18 decimal places).\n     * @return _timestamp The timestamp of the last update.\n     */\n    function getFeedByIdInWei(\n        bytes21 _feedId\n    ) external payable returns (uint256 _value, uint64 _timestamp);\n\n    /** Returns value of each feed and a timestamp.\n     * For some feeds, a fee (calculated by the FeeCalculator contract) may need to be paid.\n     * @param _feedIds Ids of the feeds.\n     * @return _values The list of values for the requested feeds in wei (i.e. with 18 decimal places).\n     * @return _timestamp The timestamp of the last update.\n     */\n    function getFeedsByIdInWei(\n        bytes21[] memory _feedIds\n    ) external payable returns (uint256[] memory _values, uint64 _timestamp);\n\n    /**\n     * Checks if the feed data is valid (i.e. is part of the confirmed Merkle tree).\n     * @param _feedData Structure containing data about the feed (FeedData structure) and Merkle proof.\n     * @return true if the feed data is valid.\n     */\n    function verifyFeedData(\n        FeedDataWithProof calldata _feedData\n    ) external view returns (bool);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/genesis/interfaces/IFtsoGenesis.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\ninterface IFtsoGenesis {\n    /**\n     * @notice Reveals submitted price during epoch reveal period - only price submitter\n     * @param _voter                Voter address\n     * @param _epochId              Id of the epoch in which the price hash was submitted\n     * @param _price                Submitted price in USD\n     * @notice The hash of _price and _random must be equal to the submitted hash\n     * @notice Emits PriceRevealed event\n     */\n    function revealPriceSubmitter(\n        address _voter,\n        uint256 _epochId,\n        uint256 _price,\n        uint256 _wNatVP\n    ) external;\n\n    /**\n     * @notice Get (and cache) wNat vote power for specified voter and given epoch id\n     * @param _voter                Voter address\n     * @param _epochId              Id of the epoch in which the price hash was submitted\n     * @return wNat vote power\n     */\n    function wNatVotePowerCached(\n        address _voter,\n        uint256 _epochId\n    ) external returns (uint256);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/genesis/interfaces/IFtsoManagerGenesis.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\ninterface IFtsoManagerGenesis {\n    function getCurrentPriceEpochId()\n        external\n        view\n        returns (uint256 _priceEpochId);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/genesis/interfaces/IFtsoRegistryGenesis.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"./IFtsoGenesis.sol\";\n\ninterface IFtsoRegistryGenesis {\n    function getFtsos(\n        uint256[] memory _indices\n    ) external view returns (IFtsoGenesis[] memory _ftsos);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IAddressValidity.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * @custom:name IAddressValidity\n * @custom:id 0x05\n * @custom:supported BTC, DOGE, XRP\n * @author Flare\n * @notice An assertion whether a string represents a valid address on an external chain.\n * @custom:verification The address is checked against all validity criteria of the chain with `sourceId`.\n * Indicator of validity is provided.\n * If the address is valid, its standard form and standard hash are computed.\n * Validity criteria for each supported chain:\n * - [BTC](/specs/attestations/external-chains/address-validity/BTC.md)\n * - [DOGE](/specs/attestations/external-chains/address-validity/DOGE.md)\n * - [XRPL](/specs/attestations/external-chains/address-validity/XRPL.md)\n * @custom:lut `0xffffffffffffffff` ($2^{64}-1$ in hex)\n * @custom:lutlimit `0xffffffffffffffff`, `0xffffffffffffffff`, `0xffffffffffffffff`\n */\ninterface IAddressValidity {\n    /**\n     * @notice Toplevel request\n     * @param attestationType ID of the attestation type.\n     * @param sourceId Id of the data source.\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\n     * @param requestBody Data defining the request. Type and interpretation is determined by the `attestationType`.\n     */\n    struct Request {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        bytes32 messageIntegrityCode;\n        RequestBody requestBody;\n    }\n\n    /**\n     * @notice Toplevel response\n     * @param attestationType Extracted from the request.\n     * @param sourceId Extracted from the request.\n     * @param votingRound The ID of the State Connector round in which the request was considered.\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n     * @param requestBody Extracted from the request.\n     * @param responseBody Data defining the response. The verification rules for the construction of the\n     * response body and the type are defined per specific `attestationType`.\n     */\n    struct Response {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        uint64 votingRound;\n        uint64 lowestUsedTimestamp;\n        RequestBody requestBody;\n        ResponseBody responseBody;\n    }\n\n    /**\n     * @notice Toplevel proof\n     * @param merkleProof Merkle proof corresponding to the attestation response.\n     * @param data Attestation response.\n     */\n    struct Proof {\n        bytes32[] merkleProof;\n        Response data;\n    }\n\n    /**\n     * @notice Request body for IAddressValidity attestation type\n     * @param addressStr Address to be verified.\n     */\n    struct RequestBody {\n        string addressStr;\n    }\n\n    /**\n     * @notice Response body for IAddressValidity attestation type\n     * @param isValid Boolean indicator of the address validity.\n     * @param standardAddress If `isValid`, standard form of the validated address. Otherwise an empty string.\n     * @param standardAddressHash If `isValid`, standard address hash of the validated address.\n     * Otherwise a zero bytes32 string.\n     */\n    struct ResponseBody {\n        bool isValid;\n        string standardAddress;\n        bytes32 standardAddressHash;\n    }\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IAddressValidityVerification.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"./IAddressValidity.sol\";\n\ninterface IAddressValidityVerification {\n    function verifyAddressValidity(\n        IAddressValidity.Proof calldata _proof\n    ) external view returns (bool _proved);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IAgentAlwaysAllowedMinters.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\ninterface IAgentAlwaysAllowedMinters {\n    function addAlwaysAllowedMinterForAgent(\n        address _agentVault,\n        address _minter\n    ) external;\n\n    function removeAlwaysAllowedMinterForAgent(\n        address _agentVault,\n        address _minter\n    ) external;\n\n    function alwaysAllowedMintersForAgent(\n        address _agentVault\n    ) external view returns (address[] memory);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IAgentPing.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\ninterface IAgentPing {\n    /**\n     * Agent bot liveness check.\n     * @param agentVault the agent vault whose owner bot to ping\n     * @param sender the account that triggered ping; helps bot decide whether it is important to answer\n     * @param query off-chain defined id of the query\n     */\n    event AgentPing(\n        address indexed agentVault,\n        address indexed sender,\n        uint256 query\n    );\n\n    /**\n     * Response to agent bot liveness check.\n     * @param agentVault the pinged agent vault\n     * @param owner owner of the agent vault (management address)\n     * @param query repeated `query` from the AgentPing event\n     * @param response response data to the query\n     */\n    event AgentPingResponse(\n        address indexed agentVault,\n        address indexed owner,\n        uint256 query,\n        string response\n    );\n\n    /**\n     * Used for liveness checks, simply emits AgentPing event.\n     * @param _agentVault the agent vault whose owner bot to ping\n     * @param _query off-chain defined id of the query\n     */\n    function agentPing(address _agentVault, uint256 _query) external;\n\n    /**\n     * Used for liveness checks, the bot's response to AgentPing event.\n     * Simply emits AgentPingResponse event identifying the owner.\n     * NOTE: may only be called by the agent vault owner\n     * @param _agentVault the pinged agent vault\n     * @param _query repeated `_query` from the agentPing\n     * @param _response response data to the query\n     */\n    function agentPingResponse(\n        address _agentVault,\n        uint256 _query,\n        string memory _response\n    ) external;\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IAssetManager.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \".//IFdcVerification.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport \"./diamond/interfaces/IDiamondLoupe.sol\";\nimport \"./data/AssetManagerSettings.sol\";\nimport \"./data/CollateralType.sol\";\nimport \"./data/AgentInfo.sol\";\nimport \"./data/AgentSettings.sol\";\nimport \"./data/AvailableAgentInfo.sol\";\nimport \"./data/RedemptionTicketInfo.sol\";\nimport \"./data/RedemptionRequestInfo.sol\";\nimport \"./data/CollateralReservationInfo.sol\";\nimport \"./IAssetManagerEvents.sol\";\nimport \"./IAgentPing.sol\";\nimport \"./IRedemptionTimeExtension.sol\";\nimport \"./ITransferFees.sol\";\nimport \"./ICoreVault.sol\";\nimport \"./ICoreVaultSettings.sol\";\nimport \"./IAgentAlwaysAllowedMinters.sol\";\n\n/**\n * Asset manager publicly callable methods.\n */\ninterface IAssetManager is\n    IERC165,\n    IDiamondLoupe,\n    IAssetManagerEvents,\n    IAgentPing,\n    IRedemptionTimeExtension,\n    ITransferFees,\n    ICoreVault,\n    ICoreVaultSettings,\n    IAgentAlwaysAllowedMinters\n{\n    ////////////////////////////////////////////////////////////////////////////////////\n    // Basic system information\n\n    /**\n     * Get the asset manager controller, the only address that can change settings.\n     * Asset manager must be attached to the asset manager controller in the system contract registry.\n     */\n    function assetManagerController() external view returns (address);\n\n    /**\n     * Get the f-asset contract managed by this asset manager instance.\n     */\n    function fAsset() external view returns (IERC20);\n\n    /**\n     * Get the price reader contract used by this asset manager instance.\n     */\n    function priceReader() external view returns (address);\n\n    /**\n     * Return lot size in UBA (underlying base amount - smallest amount on underlying chain, e.g. satoshi).\n     */\n    function lotSize() external view returns (uint256 _lotSizeUBA);\n\n    /**\n     * Return asset minting granularity - smallest unit of f-asset stored internally\n     * within this asset manager instance.\n     */\n    function assetMintingGranularityUBA() external view returns (uint256);\n\n    /**\n     * Return asset minting decimals - the number of decimals of precision for minting.\n\n     */\n    function assetMintingDecimals() external view returns (uint256);\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // System settings\n\n    /**\n     * Get complete current settings.\n     * @return the current settings\n     */\n    function getSettings()\n        external\n        view\n        returns (AssetManagerSettings.Data memory);\n\n    /**\n     * When `controllerAttached` is true, asset manager has been added to the asset manager controller.\n     * This is required for the asset manager to be operational (create agent and minting don't work otherwise).\n     */\n    function controllerAttached() external view returns (bool);\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // Emergency pause\n\n    /**\n     * If true, the system is in emergency pause mode and most operations (mint, redeem, liquidate) are disabled.\n     */\n    function emergencyPaused() external view returns (bool);\n\n    /**\n     * The time when emergency pause mode will end automatically.\n     */\n    function emergencyPausedUntil() external view returns (uint256);\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // Emergency pause transfers\n\n    /**\n     * If true, the system is in emergency pause mode and most operations (mint, redeem, liquidate) are disabled.\n     */\n    function transfersEmergencyPaused() external view returns (bool);\n\n    /**\n     * The time when emergency pause mode will end automatically.\n     */\n    function transfersEmergencyPausedUntil() external view returns (uint256);\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // Asset manager upgrading state\n\n    /**\n     * True if the asset manager is paused.\n     * In the paused state, minting is disabled, but all other operations (e.g. redemptions, liquidation) still work.\n     * Paused asset manager can be later unpaused.\n     */\n    function mintingPaused() external view returns (bool);\n\n    /**\n     * True if the asset manager is terminated.\n     * In terminated state almost all operations (minting, redeeming, liquidation) are disabled and f-assets are\n     * not transferable any more. The only operation still permitted is for agents to release the locked collateral\n     * by calling `buybackAgentCollateral`.\n     * An asset manager can be terminated after being paused for at least a month\n     * (to redeem as many f-assets as possible).\n     * The terminated asset manager can not be revived anymore.\n     */\n    function terminated() external view returns (bool);\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // Timekeeping for underlying chain\n\n    /**\n     * Prove that a block with given number and timestamp exists and\n     * update the current underlying block info if the provided data is higher.\n     * This method should be called by minters before minting and by agent's regularly\n     * to prevent current block being too outdated, which gives too short time for\n     * minting or redemption payment.\n     * NOTE: anybody can call.\n     * @param _proof proof that a block with given number and timestamp exists\n     */\n    function updateCurrentBlock(\n        IConfirmedBlockHeightExists.Proof calldata _proof\n    ) external;\n\n    /**\n     * Get block number and timestamp of the current underlying block known to the f-asset system.\n     * @return _blockNumber current underlying block number tracked by asset manager\n     * @return _blockTimestamp current underlying block timestamp tracked by asset manager\n     * @return _lastUpdateTs the timestamp on this chain when the current underlying block was last updated\n     */\n    function currentUnderlyingBlock()\n        external\n        view\n        returns (\n            uint256 _blockNumber,\n            uint256 _blockTimestamp,\n            uint256 _lastUpdateTs\n        );\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // Available collateral types\n\n    /**\n     * Get collateral  information about a token.\n     */\n    function getCollateralType(\n        CollateralType.Class _collateralClass,\n        IERC20 _token\n    ) external view returns (CollateralType.Data memory);\n\n    /**\n     * Get the list of all available and deprecated tokens used for collateral.\n     */\n    function getCollateralTypes()\n        external\n        view\n        returns (CollateralType.Data[] memory);\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // Agent create / destroy\n\n    /**\n     * This method fixes the underlying address to be used by given agent owner.\n     * A proof of payment (can be minimal or to itself) from this address must be provided,\n     * with payment reference being equal to this method caller's address.\n     * NOTE: calling this method before `createAgentVault()` is optional on most chains,\n     * but is required on smart contract chains to make sure the agent is using EOA address\n     * (depends on setting `requireEOAAddressProof`).\n     * NOTE: may only be called by a whitelisted agent (management or work owner address).\n     * @param _payment proof of payment on the underlying chain\n     */\n    function proveUnderlyingAddressEOA(\n        IPayment.Proof calldata _payment\n    ) external;\n\n    /**\n     * Create an agent vault.\n     * The agent will always be identified by `_agentVault` address.\n     * (Externally, one account may own several agent vaults,\n     *  but in fasset system, each agent vault acts as an independent agent.)\n     * NOTE: may only be called by an agent on the allowed agent list.\n     * Can be called from the management or the work agent owner address.\n     * @return _agentVault new agent vault address\n     */\n    function createAgentVault(\n        IAddressValidity.Proof calldata _addressProof,\n        AgentSettings.Data calldata _settings\n    ) external returns (address _agentVault);\n\n    /**\n     * Announce that the agent is going to be destroyed. At this time, the agent must not have any mintings\n     * or collateral reservations and must not be on the available agents list.\n     * NOTE: may only be called by the agent vault owner.\n     * @return _destroyAllowedAt the timestamp at which the destroy can be executed\n     */\n    function announceDestroyAgent(\n        address _agentVault\n    ) external returns (uint256 _destroyAllowedAt);\n\n    /**\n     * Delete all agent data, self destruct agent vault and send remaining collateral to the `_recipient`.\n     * Procedure for destroying agent:\n     * - exit available agents list\n     * - wait until all assets are redeemed or perform self-close\n     * - announce destroy (and wait the required time)\n     * - call destroyAgent()\n     * NOTE: may only be called by the agent vault owner.\n     * NOTE: the remaining funds from the vault will be transferred to the provided recipient.\n     * @param _agentVault address of the agent's vault to destroy\n     * @param _recipient address that receives the remaining funds and possible vault balance\n     */\n    function destroyAgent(\n        address _agentVault,\n        address payable _recipient\n    ) external;\n\n    /**\n     * When agent vault, collateral pool or collateral pool token factory is upgraded, new agent vaults\n     * automatically get the new implementation from the factory. But the existing agent vaults must\n     * be upgraded by their owners using this method.\n     * NOTE: may only be called by the agent vault owner.\n     * @param _agentVault address of the agent's vault; both vault, its corresponding pool, and\n     *  its pool token will be upgraded to the newest implementations\n     */\n    function upgradeAgentVaultAndPool(address _agentVault) external;\n\n    /**\n     * Check if the collateral pool token has been used already by some vault.\n     * @param _suffix the suffix to check\n     */\n    function isPoolTokenSuffixReserved(\n        string memory _suffix\n    ) external view returns (bool);\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // Agent settings update\n\n    /**\n     * Due to the effect on the pool, all agent settings are timelocked.\n     * This method announces a setting change. The change can be executed after the timelock expires.\n     * NOTE: may only be called by the agent vault owner.\n     * @param _agentVault agent vault address\n     * @param _name setting name, same as for `getAgentSetting`\n     * @return _updateAllowedAt the timestamp at which the update can be executed\n     */\n    function announceAgentSettingUpdate(\n        address _agentVault,\n        string memory _name,\n        uint256 _value\n    ) external returns (uint256 _updateAllowedAt);\n\n    /**\n     * Due to the effect on the pool, all agent settings are timelocked.\n     * This method executes a setting change after the timelock expires.\n     * NOTE: may only be called by the agent vault owner.\n     * @param _agentVault agent vault address\n     * @param _name setting name, same as for `getAgentSetting`\n     */\n    function executeAgentSettingUpdate(\n        address _agentVault,\n        string memory _name\n    ) external;\n\n    /**\n     * If the current agent's vault collateral token gets deprecated, the agent must switch with this method.\n     * NOTE: may only be called by the agent vault owner.\n     * NOTE: at the time of switch, the agent must have enough of both collaterals in the vault.\n     */\n    function switchVaultCollateral(address _agentVault, IERC20 _token) external;\n\n    /**\n     * When current pool collateral token contract (WNat) is replaced by the method setPoolCollateralType,\n     * pools don't switch automatically. Instead, the agent must call this method that swaps old WNat tokens for\n     * new ones and sets it for use by the pool.\n     * NOTE: may only be called by the agent vault owner.\n     */\n    function upgradeWNatContract(address _agentVault) external;\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // Collateral withdrawal announcement\n\n    /**\n     * The agent is going to withdraw `_valueNATWei` amount of collateral from the agent vault.\n     * This has to be announced and the agent must then wait `withdrawalWaitMinSeconds` time.\n     * After that time, the agent can call `withdrawCollateral(_vaultCollateralToken, _valueNATWei)`\n     * on the agent vault.\n     * NOTE: may only be called by the agent vault owner.\n     * @param _agentVault agent vault address\n     * @param _valueNATWei the amount to be withdrawn\n     * @return _withdrawalAllowedAt the timestamp when the withdrawal can be made\n     */\n    function announceVaultCollateralWithdrawal(\n        address _agentVault,\n        uint256 _valueNATWei\n    ) external returns (uint256 _withdrawalAllowedAt);\n\n    /**\n     * The agent is going to redeem `_valueWei` collateral pool tokens in the agent vault.\n     * This has to be announced and the agent must then wait `withdrawalWaitMinSeconds` time.\n     * After that time, the agent can call `redeemCollateralPoolTokens(_valueNATWei)` on the agent vault.\n     * NOTE: may only be called by the agent vault owner.\n     * @param _agentVault agent vault address\n     * @param _valueNATWei the amount to be withdrawn\n     * @return _redemptionAllowedAt the timestamp when the redemption can be made\n     */\n    function announceAgentPoolTokenRedemption(\n        address _agentVault,\n        uint256 _valueNATWei\n    ) external returns (uint256 _redemptionAllowedAt);\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // Underlying balance topup\n\n    /**\n     * When the agent tops up his underlying address, it has to be confirmed by calling this method,\n     * which updates the underlying free balance value.\n     * NOTE: may only be called by the agent vault owner.\n     * @param _payment proof of the underlying payment; must include payment\n     *      reference of the form `0x4642505266410011000...0<agents_vault_address>`\n     * @param _agentVault agent vault address\n     */\n    function confirmTopupPayment(\n        IPayment.Proof calldata _payment,\n        address _agentVault\n    ) external;\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // Underlying withdrawal announcements\n\n    /**\n     * Announce withdrawal of underlying currency.\n     * In the event UnderlyingWithdrawalAnnounced the agent receives payment reference, which must be\n     * added to the payment, otherwise it can be challenged as illegal.\n     * Until the announced withdrawal is performed and confirmed or canceled, no other withdrawal can be announced.\n     * NOTE: may only be called by the agent vault owner.\n     * @param _agentVault agent vault address\n     */\n    function announceUnderlyingWithdrawal(address _agentVault) external;\n\n    /**\n     * Agent must provide confirmation of performed underlying withdrawal, which updates free balance with used gas\n     * and releases announcement so that a new one can be made.\n     * If the agent doesn't call this method, anyone can call it after a time (`confirmationByOthersAfterSeconds`).\n     * NOTE: may only be called by the owner of the agent vault\n     *   except if enough time has passed without confirmation - then it can be called by anybody.\n     * @param _payment proof of the underlying payment\n     * @param _agentVault agent vault address\n     */\n    function confirmUnderlyingWithdrawal(\n        IPayment.Proof calldata _payment,\n        address _agentVault\n    ) external;\n\n    /**\n     * Cancel ongoing withdrawal of underlying currency.\n     * Needed in order to reset announcement timestamp, so that others cannot front-run the agent at\n     * `confirmUnderlyingWithdrawal` call. This could happen if withdrawal would be performed more\n     * than `confirmationByOthersAfterSeconds` seconds after announcement.\n     * NOTE: may only be called by the agent vault owner.\n     * @param _agentVault agent vault address\n     */\n    function cancelUnderlyingWithdrawal(address _agentVault) external;\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // Terminated asset manager support\n\n    /**\n     * When f-asset is terminated, an agent can burn the market price of backed f-assets with his collateral,\n     * to release the remaining collateral (and, formally, underlying assets).\n     * This method ONLY works when f-asset is terminated, which will only be done when the asset manager\n     * is already paused at least for a month and most f-assets are already burned and the only ones\n     * remaining are unrecoverable.\n     * NOTE: may only be called by the agent vault owner.\n     * NOTE: the agent (management address) receives the vault collateral and NAT is burned instead. Therefore\n     *      this method is `payable` and the caller must provide enough NAT to cover the received vault collateral\n     *      amount multiplied by `vaultCollateralBuyForFlareFactorBIPS`.\n     */\n    function buybackAgentCollateral(address _agentVault) external payable;\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // Agent information\n\n    /**\n     * Get (a part of) the list of all agents.\n     * The list must be retrieved in parts since retrieving the whole list can consume too much gas for one block.\n     * @param _start first index to return from the available agent's list\n     * @param _end end index (one above last) to return from the available agent's list\n     */\n    function getAllAgents(\n        uint256 _start,\n        uint256 _end\n    )\n        external\n        view\n        returns (address[] memory _agentVaults, uint256 _totalLength);\n\n    /**\n     * Return detailed info about an agent, typically needed by a minter.\n     * @param _agentVault agent vault address\n     * @return structure containing agent's minting fee (BIPS), min collateral ratio (BIPS),\n     *      and current free collateral (lots)\n     */\n    function getAgentInfo(\n        address _agentVault\n    ) external view returns (AgentInfo.Info memory);\n\n    /**\n     * Get agent's setting by name.\n     * This allows reading individual settings.\n     * @param _agentVault agent vault address\n     * @param _name setting name, one of: `feeBIPS`, `poolFeeShareBIPS`, `redemptionPoolFeeShareBIPS`,\n     *  `mintingVaultCollateralRatioBIPS`, `mintingPoolCollateralRatioBIPS`,`buyFAssetByAgentFactorBIPS`,\n     *  `poolExitCollateralRatioBIPS`, `poolTopupCollateralRatioBIPS`, `poolTopupTokenPriceFactorBIPS`,\n     *  `handshakeType`\n     */\n    function getAgentSetting(\n        address _agentVault,\n        string memory _name\n    ) external view returns (uint256);\n\n    /**\n     * Returns the collateral pool address of the agent identified by `_agentVault`.\n     */\n    function getCollateralPool(\n        address _agentVault\n    ) external view returns (address);\n\n    /**\n     * Return the management address of the owner of the agent identified by `_agentVault`.\n     */\n    function getAgentVaultOwner(\n        address _agentVault\n    ) external view returns (address _ownerManagementAddress);\n\n    /**\n     * Return vault collateral ERC20 token chosen by the agent identified by `_agentVault`.\n     */\n    function getAgentVaultCollateralToken(\n        address _agentVault\n    ) external view returns (IERC20);\n\n    /**\n     * Return full vault collateral (free + locked) deposited in the vault `_agentVault`.\n     */\n    function getAgentFullVaultCollateral(\n        address _agentVault\n    ) external view returns (uint256);\n\n    /**\n     * Return full pool NAT collateral (free + locked) deposited in the vault `_agentVault`.\n     */\n    function getAgentFullPoolCollateral(\n        address _agentVault\n    ) external view returns (uint256);\n\n    /**\n     * Return the current liquidation factors and max liquidation amount of the agent\n     * identified by `_agentVault`.\n     */\n    function getAgentLiquidationFactorsAndMaxAmount(\n        address _agentVault\n    )\n        external\n        view\n        returns (\n            uint256 liquidationPaymentFactorVaultBIPS,\n            uint256 liquidationPaymentFactorPoolBIPS,\n            uint256 maxLiquidationAmountUBA\n        );\n\n    /**\n     * Return the minimum collateral ratio of the pool collateral owned by vault `_agentVault`.\n     */\n    function getAgentMinPoolCollateralRatioBIPS(\n        address _agentVault\n    ) external view returns (uint256);\n\n    /**\n     * Return the minimum collateral ratio of the vault collateral owned by vault `_agentVault`.\n     */\n    function getAgentMinVaultCollateralRatioBIPS(\n        address _agentVault\n    ) external view returns (uint256);\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // List of available agents (i.e. publicly available for minting).\n\n    /**\n     * Add the agent to the list of publicly available agents.\n     * Other agents can only self-mint.\n     * NOTE: may only be called by the agent vault owner.\n     * @param _agentVault agent vault address\n     */\n    function makeAgentAvailable(address _agentVault) external;\n\n    /**\n     * Announce exit from the publicly available agents list.\n     * NOTE: may only be called by the agent vault owner.\n     * @param _agentVault agent vault address\n     * @return _exitAllowedAt the timestamp when the agent can exit\n     */\n    function announceExitAvailableAgentList(\n        address _agentVault\n    ) external returns (uint256 _exitAllowedAt);\n\n    /**\n     * Exit the publicly available agents list.\n     * NOTE: may only be called by the agent vault owner and after announcement.\n     * @param _agentVault agent vault address\n     */\n    function exitAvailableAgentList(address _agentVault) external;\n\n    /**\n     * Get (a part of) the list of available agents.\n     * The list must be retrieved in parts since retrieving the whole list can consume too much gas for one block.\n     * @param _start first index to return from the available agent's list\n     * @param _end end index (one above last) to return from the available agent's list\n     */\n    function getAvailableAgentsList(\n        uint256 _start,\n        uint256 _end\n    )\n        external\n        view\n        returns (address[] memory _agentVaults, uint256 _totalLength);\n\n    /**\n     * Get (a part of) the list of available agents with extra information about agents' fee, min collateral ratio\n     * and available collateral (in lots).\n     * The list must be retrieved in parts since retrieving the whole list can consume too much gas for one block.\n     * NOTE: agent's available collateral can change anytime due to price changes, minting, or changes\n     * in agent's min collateral ratio, so it is only to be used as an estimate.\n     * @param _start first index to return from the available agent's list\n     * @param _end end index (one above last) to return from the available agent's list\n     */\n    function getAvailableAgentsDetailedList(\n        uint256 _start,\n        uint256 _end\n    )\n        external\n        view\n        returns (\n            AvailableAgentInfo.Data[] memory _agents,\n            uint256 _totalLength\n        );\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // Minting\n\n    /**\n     * Before paying underlying assets for minting, minter has to reserve collateral and\n     * pay collateral reservation fee. Collateral is reserved at ratio of agent's agentMinCollateralRatio\n     * to requested lots NAT market price.\n     * If the agent requires handshake, then HandshakeRequired event is emitted and\n     * the minter has to wait for the agent to approve or reject the reservation. If there is no response within\n     * the `cancelCollateralReservationAfterSeconds`, the minter can cancel the reservation and get the fee back.\n     * If handshake is not required, the minter receives instructions for underlying payment\n     * (value, fee and payment reference) in event CollateralReserved.\n     * Then the minter has to pay `value + fee` on the underlying chain.\n     * If the minter pays the underlying amount, the collateral reservation fee is burned and minter obtains\n     * f-assets. Otherwise the agent collects the collateral reservation fee.\n     * NOTE: may only be called by a whitelisted caller when whitelisting is enabled.\n     * NOTE: the owner of the agent vault must be in the AgentOwnerRegistry.\n     * @param _agentVault agent vault address\n     * @param _lots the number of lots for which to reserve collateral\n     * @param _maxMintingFeeBIPS maximum minting fee (BIPS) that can be charged by the agent - best is just to\n     *      copy current agent's published fee; used to prevent agent from front-running reservation request\n     *      and increasing fee (that would mean that the minter would have to pay raised fee or forfeit\n     *      collateral reservation fee)\n     * @param _executor the account that is allowed to execute minting (besides minter and agent)\n     * @param _minterUnderlyingAddresses array of minter's underlying addresses - needed only if handshake is required\n     */\n    function reserveCollateral(\n        address _agentVault,\n        uint256 _lots,\n        uint256 _maxMintingFeeBIPS,\n        address payable _executor,\n        string[] calldata _minterUnderlyingAddresses\n    ) external payable returns (uint256 _collateralReservationId);\n\n    /**\n     * Agent approves the collateral reservation request after checking the minter's identity.\n     * NOTE: may only be called by the agent vault owner.\n     * @param _collateralReservationId collateral reservation id\n     */\n    function approveCollateralReservation(\n        uint256 _collateralReservationId\n    ) external;\n\n    /**\n     * Agent rejects the collateral reservation request after checking the minter's identity.\n     * The collateral reservation fee is returned to the minter.\n     * NOTE: may only be called by the agent vault owner.\n     * @param _collateralReservationId collateral reservation id\n     */\n    function rejectCollateralReservation(\n        uint256 _collateralReservationId\n    ) external;\n\n    /**\n     * Minter cancels the collateral reservation request if the agent didn't respond in time.\n     * The collateral reservation fee is returned to the minter.\n     * It can only be called after `cancelCollateralReservationAfterSeconds` from the collateral reservation request.\n     * NOTE: may only be called by the minter.\n     * @param _collateralReservationId collateral reservation id\n     */\n    function cancelCollateralReservation(\n        uint256 _collateralReservationId\n    ) external;\n\n    /**\n     * Return the collateral reservation fee amount that has to be passed to the `reserveCollateral` method.\n     * NOTE: the amount paid may be larger than the required amount, but the difference is not returned.\n     * It is advised that the minter pays the exact amount, but when the amount is so small that the revert\n     * would cost more than the lost difference, the minter may want to send a slightly larger amount to compensate\n     * for the possibility of a FTSO price change between obtaining this value and calling `reserveCollateral`.\n     * @param _lots the number of lots for which to reserve collateral\n     * @return _reservationFeeNATWei the amount of reservation fee in NAT wei\n     */\n    function collateralReservationFee(\n        uint256 _lots\n    ) external view returns (uint256 _reservationFeeNATWei);\n\n    /**\n     * Returns the data about the collateral reservation for an ongoing minting.\n     * Note: once the minting is executed or defaulted, the collateral reservation is deleted and this method fails.\n     * @param _collateralReservationId the collateral reservation id, as used for executing or defaulting the minting\n     */\n    function collateralReservationInfo(\n        uint256 _collateralReservationId\n    ) external view returns (CollateralReservationInfo.Data memory);\n\n    /**\n     * After obtaining proof of underlying payment, the minter calls this method to finish the minting\n     * and collect the minted f-assets.\n     * NOTE: In case handshake was required, the payment must be done using only all provided addresses,\n     * so `sourceAddressesRoot` matches the calculated Merkle root, otherwise the proof will be rejected.\n     * NOTE: may only be called by the minter (= creator of CR, the collateral reservation request),\n     *   the executor appointed by the minter, or the agent owner (= owner of the agent vault in CR).\n     * @param _payment proof of the underlying payment (must contain exact `value + fee` amount and correct\n     *      payment reference)\n     * @param _collateralReservationId collateral reservation id\n     */\n    function executeMinting(\n        IPayment.Proof calldata _payment,\n        uint256 _collateralReservationId\n    ) external;\n\n    /**\n     * When the time for the minter to pay the underlying amount is over (i.e. the last underlying block has passed),\n     * the agent can declare payment default. Then the agent collects the collateral reservation fee\n     * (it goes directly to the vault), and the reserved collateral is unlocked.\n     * NOTE: In case handshake was required, the attestation request must be done using `checkSourceAddresses=true`\n     * and correct `sourceAddressesRoot`, otherwise the proof will be rejected. If there was no handshake required,\n     * the attestation request must be done with `checkSourceAddresses=false`.\n     * NOTE: may only be called by the owner of the agent vault in the collateral reservation request.\n     * @param _proof proof that the minter didn't pay with correct payment reference on the underlying chain\n     * @param _collateralReservationId id of a collateral reservation created by the minter\n     */\n    function mintingPaymentDefault(\n        IReferencedPaymentNonexistence.Proof calldata _proof,\n        uint256 _collateralReservationId\n    ) external;\n\n    /**\n     * If a collateral reservation request exists for more than 24 hours, payment or non-payment proof are no longer\n     * available. In this case the agent can call this method, which burns reserved collateral at market price\n     * and releases the remaining collateral (CRF is also burned).\n     * NOTE: may only be called by the owner of the agent vault in the collateral reservation request.\n     * NOTE: the agent (management address) receives the vault collateral and NAT is burned instead. Therefore\n     *      this method is `payable` and the caller must provide enough NAT to cover the received vault collateral\n     *      amount multiplied by `vaultCollateralBuyForFlareFactorBIPS`.\n     * @param _proof proof that the attestation query window can not not contain\n     *      the payment/non-payment proof anymore\n     * @param _collateralReservationId collateral reservation id\n     */\n    function unstickMinting(\n        IConfirmedBlockHeightExists.Proof calldata _proof,\n        uint256 _collateralReservationId\n    ) external payable;\n\n    /**\n     * Agent can mint against himself.\n     * This is a one-step process, skipping collateral reservation and collateral reservation fee payment.\n     * Moreover, the agent doesn't have to be on the publicly available agents list to self-mint.\n     * NOTE: may only be called by the agent vault owner.\n     * NOTE: the caller must be a whitelisted agent.\n     * @param _payment proof of the underlying payment; must contain payment reference of the form\n     *      `0x4642505266410012000...0<agent_vault_address>`\n     * @param _agentVault agent vault address\n     * @param _lots number of lots to mint\n     */\n    function selfMint(\n        IPayment.Proof calldata _payment,\n        address _agentVault,\n        uint256 _lots\n    ) external;\n\n    /**\n     * If an agent has enough free underlying, they can mint immediatelly without any underlying payment.\n     * This is a one-step process, skipping collateral reservation and collateral reservation fee payment.\n     * Moreover, the agent doesn't have to be on the publicly available agents list to self-mint.\n     * NOTE: may only be called by the agent vault owner.\n     * NOTE: the caller must be a whitelisted agent.\n     * @param _agentVault agent vault address\n     * @param _lots number of lots to mint\n     */\n    function mintFromFreeUnderlying(address _agentVault, uint64 _lots) external;\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // Redemption\n\n    /**\n     * Redeem (up to) `_lots` lots of f-assets. The corresponding amount of the f-assets belonging\n     * to the redeemer will be burned and the redeemer will get paid by the agent in underlying currency\n     * (or, in case of agent's payment default, by agent's collateral with a premium).\n     * NOTE: in some cases not all sent f-assets can be redeemed (either there are not enough tickets or\n     * more than a fixed limit of tickets should be redeemed). In this case only part of the approved assets\n     * are burned and redeemed and the redeemer can execute this method again for the remaining lots.\n     * In such a case the `RedemptionRequestIncomplete` event will be emitted, indicating the number\n     * of remaining lots.\n     * Agent receives redemption request id and instructions for underlying payment in\n     * RedemptionRequested event and has to pay `value - fee` and use the provided payment reference.\n     * NOTE: may only be called by a whitelisted caller when whitelisting is enabled.\n     * @param _lots number of lots to redeem\n     * @param _redeemerUnderlyingAddressString the address to which the agent must transfer underlying amount\n     * @param _executor the account that is allowed to execute redemption default (besides redeemer and agent)\n     * @return _redeemedAmountUBA the actual redeemed amount; may be less than requested if there are not enough\n     *      redemption tickets available or the maximum redemption ticket limit is reached\n     */\n    function redeem(\n        uint256 _lots,\n        string memory _redeemerUnderlyingAddressString,\n        address payable _executor\n    ) external payable returns (uint256 _redeemedAmountUBA);\n\n    /**\n     * In case agent requires handshake the redemption request can be rejected by the agent.\n     * Any other agent can take over the redemption request.\n     * If no agent takes over the redemption, the redeemer can request the default payment.\n     * NOTE: may only be called by the owner of the agent vault in the redemption request\n     * @param _redemptionRequestId id of an existing redemption request\n     */\n    function rejectRedemptionRequest(uint256 _redemptionRequestId) external;\n\n    /**\n     * The agent can take over the rejected redemption request - it cannot be rejected again.\n     * NOTE: may only be called by the owner of the agent vault\n     * @param _agentVault agent vault address\n     * @param _redemptionRequestId id of an existing redemption request\n     */\n    function takeOverRedemptionRequest(\n        address _agentVault,\n        uint256 _redemptionRequestId\n    ) external;\n\n    /**\n     * If the redeemer provides invalid address, the agent should provide the proof of address invalidity from the\n     * Flare data connector. With this, the agent's obligations are fulfilled and they can keep the underlying.\n     * NOTE: may only be called by the owner of the agent vault in the redemption request\n     * NOTE: also checks that redeemer's address is normalized, so the redeemer must normalize their address,\n     *   otherwise it will be rejected!\n     * @param _proof proof that the address is invalid\n     * @param _redemptionRequestId id of an existing redemption request\n     */\n    function rejectInvalidRedemption(\n        IAddressValidity.Proof calldata _proof,\n        uint256 _redemptionRequestId\n    ) external;\n\n    /**\n     * After paying to the redeemer, the agent must call this method to unlock the collateral\n     * and to make sure that the redeemer cannot demand payment in collateral on timeout.\n     * The same method must be called for any payment status (SUCCESS, FAILED, BLOCKED).\n     * In case of FAILED, it just releases the agent's underlying funds and the redeemer gets paid in collateral\n     * after calling redemptionPaymentDefault.\n     * In case of SUCCESS or BLOCKED, remaining underlying funds and collateral are released to the agent.\n     * If the agent doesn't confirm payment in enough time (several hours, setting\n     * `confirmationByOthersAfterSeconds`), anybody can do it and get rewarded from the agent's vault.\n     * NOTE: may only be called by the owner of the agent vault in the redemption request\n     *   except if enough time has passed without confirmation - then it can be called by anybody\n     * @param _payment proof of the underlying payment (must contain exact `value - fee` amount and correct\n     *      payment reference)\n     * @param _redemptionRequestId id of an existing redemption request\n     */\n    function confirmRedemptionPayment(\n        IPayment.Proof calldata _payment,\n        uint256 _redemptionRequestId\n    ) external;\n\n    /**\n     * If the agent doesn't transfer the redeemed underlying assets in time (until the last allowed block on\n     * the underlying chain), the redeemer calls this method and receives payment in collateral (with some extra).\n     * The agent can also call default if the redeemer is unresponsive, to payout the redeemer and free the\n     * remaining collateral.\n     * NOTE: The attestation request must be done with `checkSourceAddresses=false`.\n     * NOTE: may only be called by the redeemer (= creator of the redemption request),\n     *   the executor appointed by the redeemer,\n     *   or the agent owner (= owner of the agent vault in the redemption request)\n     * @param _proof proof that the agent didn't pay with correct payment reference on the underlying chain\n     * @param _redemptionRequestId id of an existing redemption request\n     */\n    function redemptionPaymentDefault(\n        IReferencedPaymentNonexistence.Proof calldata _proof,\n        uint256 _redemptionRequestId\n    ) external;\n\n    /**\n     * If the agent rejected the redemption request and no other agent took over the redemption,\n     * the redeemer calls this method and receives payment in collateral (with some extra).\n     * The agent can also call default if the redeemer is unresponsive, to payout the redeemer and free the\n     * remaining collateral.\n     * NOTE: may only be called by the redeemer (= creator of the redemption request),\n     *   the executor appointed by the redeemer,\n     *   or the agent owner (= owner of the agent vault in the redemption request)\n     * @param _redemptionRequestId id of an existing redemption request\n     */\n    function rejectedRedemptionPaymentDefault(\n        uint256 _redemptionRequestId\n    ) external;\n\n    /**\n     * If the agent hasn't performed the payment, the agent can close the redemption request to free underlying funds.\n     * It can be done immediately after the redeemer or agent calls `redemptionPaymentDefault`,\n     * or this method can trigger the default payment without proof, but only after enough time has passed so that\n     * attestation proof of non-payment is not available any more.\n     * NOTE: may only be called by the owner of the agent vault in the redemption request.\n     * @param _proof proof that the attestation query window can not not contain\n     *      the payment/non-payment proof anymore\n     * @param _redemptionRequestId id of an existing, but already defaulted, redemption request\n     */\n    function finishRedemptionWithoutPayment(\n        IConfirmedBlockHeightExists.Proof calldata _proof,\n        uint256 _redemptionRequestId\n    ) external;\n\n    /**\n     * Returns the data about an ongoing redemption request.\n     * Note: once the redemptions is confirmed, the request is deleted and this method fails.\n     * However, if there is no payment and the redemption defaults, the method works and returns status DEFAULTED.\n     * @param _redemptionRequestId the redemption request id, as used for confirming or defaulting the redemption\n     */\n    function redemptionRequestInfo(\n        uint256 _redemptionRequestId\n    ) external view returns (RedemptionRequestInfo.Data memory);\n\n    /**\n     * Agent can \"redeem against himself\" by calling `selfClose`, which burns agent's own f-assets\n     * and unlocks agent's collateral. The underlying funds backing the f-assets are released\n     * as agent's free underlying funds and can be later withdrawn after announcement.\n     * NOTE: may only be called by the agent vault owner.\n     * @param _agentVault agent vault address\n     * @param _amountUBA amount of f-assets to self-close\n     * @return _closedAmountUBA the actual self-closed amount, may be less than requested if there are not enough\n     *      redemption tickets available or the maximum redemption ticket limit is reached\n     */\n    function selfClose(\n        address _agentVault,\n        uint256 _amountUBA\n    ) external returns (uint256 _closedAmountUBA);\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // Redemption queue info\n\n    /**\n     * Return (part of) the redemption queue.\n     * @param _firstRedemptionTicketId the ticket id to start listing from; if 0, starts from the beginning\n     * @param _pageSize the maximum number of redemption tickets to return\n     * @return _queue the (part of) the redemption queue; maximum length is _pageSize\n     * @return _nextRedemptionTicketId works as a cursor - if the _pageSize is reached and there are more tickets,\n     *  it is the first ticket id not returned; if the end is reached, it is 0\n     */\n    function redemptionQueue(\n        uint256 _firstRedemptionTicketId,\n        uint256 _pageSize\n    )\n        external\n        view\n        returns (\n            RedemptionTicketInfo.Data[] memory _queue,\n            uint256 _nextRedemptionTicketId\n        );\n\n    /**\n     * Return (part of) the redemption queue for a specific agent.\n     * @param _agentVault the agent vault address of the queried agent\n     * @param _firstRedemptionTicketId the ticket id to start listing from; if 0, starts from the beginning\n     * @param _pageSize the maximum number of redemption tickets to return\n     * @return _queue the (part of) the redemption queue; maximum length is _pageSize\n     * @return _nextRedemptionTicketId works as a cursor - if the _pageSize is reached and there are more tickets,\n     *  it is the first ticket id not returned; if the end is reached, it is 0\n     */\n    function agentRedemptionQueue(\n        address _agentVault,\n        uint256 _firstRedemptionTicketId,\n        uint256 _pageSize\n    )\n        external\n        view\n        returns (\n            RedemptionTicketInfo.Data[] memory _queue,\n            uint256 _nextRedemptionTicketId\n        );\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // Dust\n\n    /**\n     * Due to the minting pool fees or after a lot size change by the governance,\n     * it may happen that less than one lot remains on a redemption ticket. This is named \"dust\" and\n     * can be self closed or liquidated, but not redeemed. However, after several additions,\n     * the total dust can amount to more than one lot. Using this method, the amount, rounded down\n     * to a whole number of lots, can be converted to a new redemption ticket.\n     * NOTE: we do NOT check that the caller is the agent vault owner, since we want to\n     * allow anyone to convert dust to tickets to increase asset fungibility.\n     * NOTE: dust above 1 lot is actually added to ticket at every minting, so this function need\n     * only be called when the agent doesn't have any minting.\n     * @param _agentVault agent vault address\n     */\n    function convertDustToTicket(address _agentVault) external;\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // Liquidation\n\n    /**\n     * Checks that the agent's collateral is too low and if true, starts the agent's liquidation.\n     * NOTE: may only be called by a whitelisted caller when whitelisting is enabled.\n     * NOTE: always succeeds and returns the new liquidation status.\n     * @param _agentVault agent vault address\n     * @return _liquidationStatus 0=no liquidation, 1=CCB, 2=liquidation\n     * @return _liquidationStartTs if the status is LIQUIDATION, the timestamp when liquidation started;\n     *  if the status is CCB, the timestamp when liquidation will start; otherwise 0\n     */\n    function startLiquidation(\n        address _agentVault\n    ) external returns (uint8 _liquidationStatus, uint256 _liquidationStartTs);\n\n    /**\n     * Burns up to `_amountUBA` f-assets owned by the caller and pays\n     * the caller the corresponding amount of native currency with premium\n     * (premium depends on the liquidation state).\n     * If the agent isn't in liquidation yet, but satisfies conditions,\n     * automatically puts the agent in liquidation status.\n     * NOTE: may only be called by a whitelisted caller when whitelisting is enabled.\n     * @param _agentVault agent vault address\n     * @param _amountUBA the amount of f-assets to liquidate\n     * @return _liquidatedAmountUBA liquidated amount of f-asset\n     * @return _amountPaidVault amount paid to liquidator (in agent's vault collateral)\n     * @return _amountPaidPool amount paid to liquidator (in NAT from pool)\n     */\n    function liquidate(\n        address _agentVault,\n        uint256 _amountUBA\n    )\n        external\n        returns (\n            uint256 _liquidatedAmountUBA,\n            uint256 _amountPaidVault,\n            uint256 _amountPaidPool\n        );\n\n    /**\n     * When the agent's collateral reaches the safe level during liquidation, the liquidation\n     * process can be stopped by calling this method.\n     * Full liquidation (i.e. the liquidation triggered by illegal underlying payment)\n     * cannot be stopped.\n     * NOTE: anybody can call.\n     * NOTE: if the method succeeds, the agent's liquidation has ended.\n     * @param _agentVault agent vault address\n     */\n    function endLiquidation(address _agentVault) external;\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // Challenges\n\n    /**\n     * Called with a proof of payment made from the agent's underlying address, for which\n     * no valid payment reference exists (valid payment references are from redemption and\n     * underlying withdrawal announcement calls).\n     * On success, immediately triggers full agent liquidation and rewards the caller.\n     * NOTE: may only be called by a whitelisted caller when whitelisting is enabled.\n     * @param _transaction proof of a transaction from the agent's underlying address\n     * @param _agentVault agent vault address\n     */\n    function illegalPaymentChallenge(\n        IBalanceDecreasingTransaction.Proof calldata _transaction,\n        address _agentVault\n    ) external;\n\n    /**\n     * Called with proofs of two payments made from the agent's underlying address\n     * with the same payment reference (each payment reference is valid for only one payment).\n     * On success, immediately triggers full agent liquidation and rewards the caller.\n     * NOTE: may only be called by a whitelisted caller when whitelisting is enabled.\n     * @param _payment1 proof of first payment from the agent's underlying address\n     * @param _payment2 proof of second payment from the agent's underlying address\n     * @param _agentVault agent vault address\n     */\n    function doublePaymentChallenge(\n        IBalanceDecreasingTransaction.Proof calldata _payment1,\n        IBalanceDecreasingTransaction.Proof calldata _payment2,\n        address _agentVault\n    ) external;\n\n    /**\n     * Called with proofs of several (otherwise legal) payments, which together make the agent's\n     * underlying free balance negative (i.e. the underlying address balance is less than\n     * the total amount of backed f-assets).\n     * On success, immediately triggers full agent liquidation and rewards the caller.\n     * NOTE: may only be called by a whitelisted caller when whitelisting is enabled.\n     * @param _payments proofs of several distinct payments from the agent's underlying address\n     * @param _agentVault agent vault address\n     */\n    function freeBalanceNegativeChallenge(\n        IBalanceDecreasingTransaction.Proof[] calldata _payments,\n        address _agentVault\n    ) external;\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IAssetManagerController.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"./IAssetManager.sol\";\n\ninterface IAssetManagerController {\n    /**\n     * Return the list of all asset managers managed by this controller.\n     */\n    function getAssetManagers() external view returns (IAssetManager[] memory);\n\n    /**\n     * Check whether the asset manager is managed by this controller.\n     * @param _assetManager an asset manager address\n     */\n    function assetManagerExists(\n        address _assetManager\n    ) external view returns (bool);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IAssetManagerEvents.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * All asset manager events.\n */\ninterface IAssetManagerEvents {\n    struct AgentVaultCreationData {\n        address collateralPool;\n        address collateralPoolToken;\n        string underlyingAddress;\n        address vaultCollateralToken;\n        address poolWNatToken;\n        uint256 feeBIPS;\n        uint256 poolFeeShareBIPS;\n        uint256 mintingVaultCollateralRatioBIPS;\n        uint256 mintingPoolCollateralRatioBIPS;\n        uint256 buyFAssetByAgentFactorBIPS;\n        uint256 poolExitCollateralRatioBIPS;\n        uint256 poolTopupCollateralRatioBIPS;\n        uint256 poolTopupTokenPriceFactorBIPS;\n        uint256 handshakeType;\n    }\n\n    /**\n     * A new agent vault was created.\n     */\n    event AgentVaultCreated(\n        address indexed owner,\n        address indexed agentVault,\n        AgentVaultCreationData creationData\n    );\n\n    /**\n     * Agent has announced destroy (close) of agent vault and will be able to\n     * perform destroy after the timestamp `destroyAllowedAt`.\n     */\n    event AgentDestroyAnnounced(\n        address indexed agentVault,\n        uint256 destroyAllowedAt\n    );\n\n    /**\n     * Agent has destroyed (closed) the agent vault.\n     */\n    event AgentDestroyed(address indexed agentVault);\n\n    /**\n     * Agent has announced a withdrawal of collateral and will be able to\n     * withdraw the announced amount after timestamp `withdrawalAllowedAt`.\n     * If withdrawal was canceled (announced with amount 0), amountWei and withdrawalAllowedAt are zero.\n     */\n    event VaultCollateralWithdrawalAnnounced(\n        address indexed agentVault,\n        uint256 amountWei,\n        uint256 withdrawalAllowedAt\n    );\n\n    /**\n     * Agent has announced a withdrawal of collateral and will be able to\n     * redeem the announced amount of pool tokens after the timestamp `withdrawalAllowedAt`.\n     * If withdrawal was canceled (announced with amount 0), amountWei and withdrawalAllowedAt are zero.\n     */\n    event PoolTokenRedemptionAnnounced(\n        address indexed agentVault,\n        uint256 amountWei,\n        uint256 withdrawalAllowedAt\n    );\n\n    /**\n     * Agent was added to the list of available agents and can accept collateral reservation requests.\n     */\n    event AgentAvailable(\n        address indexed agentVault,\n        uint256 feeBIPS,\n        uint256 mintingVaultCollateralRatioBIPS,\n        uint256 mintingPoolCollateralRatioBIPS,\n        uint256 freeCollateralLots\n    );\n\n    /**\n     * Agent exited from available agents list.\n     * The agent can exit the available list after the timestamp `exitAllowedAt`.\n     */\n    event AvailableAgentExitAnnounced(\n        address indexed agentVault,\n        uint256 exitAllowedAt\n    );\n\n    /**\n     * Agent exited from available agents list.\n     */\n    event AvailableAgentExited(address indexed agentVault);\n\n    /**\n     * Agent has initiated setting change (fee or some agent collateral ratio change).\n     * The setting change can be executed after the timestamp `validAt`.\n     */\n    event AgentSettingChangeAnnounced(\n        address indexed agentVault,\n        string name,\n        uint256 value,\n        uint256 validAt\n    );\n\n    /**\n     * Agent has executed setting change (fee or some agent collateral ratio change).\n     */\n    event AgentSettingChanged(\n        address indexed agentVault,\n        string name,\n        uint256 value\n    );\n\n    /**\n     * Agent or agent's collateral pool has changed token contract.\n     */\n    event AgentCollateralTypeChanged(\n        address indexed agentVault,\n        uint8 collateralClass,\n        address token\n    );\n\n    /**\n     * Minter reserved collateral, paid the reservation fee. Agent's collateral was reserved.\n     * Agent needs to approve or reject the reservation according to the minter's identity.\n     */\n    event HandshakeRequired(\n        address indexed agentVault,\n        address indexed minter,\n        uint256 indexed collateralReservationId,\n        string[] minterUnderlyingAddresses,\n        uint256 valueUBA,\n        uint256 feeUBA\n    );\n\n    /**\n     * Minter reserved collateral, paid the reservation fee, and is expected to pay the underlying funds.\n     * Agent's collateral was reserved.\n     */\n    event CollateralReserved(\n        address indexed agentVault,\n        address indexed minter,\n        uint256 indexed collateralReservationId,\n        uint256 valueUBA,\n        uint256 feeUBA,\n        uint256 firstUnderlyingBlock,\n        uint256 lastUnderlyingBlock,\n        uint256 lastUnderlyingTimestamp,\n        string paymentAddress,\n        bytes32 paymentReference,\n        address executor,\n        uint256 executorFeeNatWei\n    );\n\n    /**\n     * Agent rejected the collateral reservation request because of the minter's identity.\n     * Reserved collateral was released.\n     */\n    event CollateralReservationRejected(\n        address indexed agentVault,\n        address indexed minter,\n        uint256 indexed collateralReservationId\n    );\n\n    /**\n     * Minter cancelled the collateral reservation request because of the agent's inactivity.\n     * Reserved collateral was released.\n     */\n    event CollateralReservationCancelled(\n        address indexed agentVault,\n        address indexed minter,\n        uint256 indexed collateralReservationId\n    );\n\n    /**\n     * Minter paid underlying funds in time and received the fassets.\n     * The agent's collateral is locked.\n     */\n    event MintingExecuted(\n        address indexed agentVault,\n        uint256 indexed collateralReservationId,\n        uint256 mintedAmountUBA,\n        uint256 agentFeeUBA,\n        uint256 poolFeeUBA\n    );\n\n    /**\n     * Minter failed to pay underlying funds in time. Collateral reservation fee was paid to the agent.\n     * Reserved collateral was released.\n     */\n    event MintingPaymentDefault(\n        address indexed agentVault,\n        address indexed minter,\n        uint256 indexed collateralReservationId,\n        uint256 reservedAmountUBA\n    );\n\n    /**\n     * Both minter and agent failed to present any proof within attestation time window, so\n     * the agent called `unstickMinting` to release reserved collateral.\n     */\n    event CollateralReservationDeleted(\n        address indexed agentVault,\n        address indexed minter,\n        uint256 indexed collateralReservationId,\n        uint256 reservedAmountUBA\n    );\n\n    /**\n     * Agent performed self minting, either by executing selfMint with underlying deposit or\n     * by executing mintFromFreeUnderlying (in this case, `mintFromFreeUnderlying` is true and\n     * `depositedAmountUBA` is zero).\n     */\n    event SelfMint(\n        address indexed agentVault,\n        bool mintFromFreeUnderlying,\n        uint256 mintedAmountUBA,\n        uint256 depositedAmountUBA,\n        uint256 poolFeeUBA\n    );\n\n    /**\n     * Redeemer started the redemption process and provided fassets.\n     * The amount of fassets corresponding to valueUBA was burned.\n     * Several RedemptionRequested events are emitted, one for every agent redeemed against\n     * (but multiple tickets for the same agent are combined).\n     * The agent's collateral is still locked.\n     */\n    event RedemptionRequested(\n        address indexed agentVault,\n        address indexed redeemer,\n        uint256 indexed requestId,\n        string paymentAddress,\n        uint256 valueUBA,\n        uint256 feeUBA,\n        uint256 firstUnderlyingBlock,\n        uint256 lastUnderlyingBlock,\n        uint256 lastUnderlyingTimestamp,\n        bytes32 paymentReference,\n        address executor,\n        uint256 executorFeeNatWei\n    );\n\n    /**\n     * Agent rejected the redemption request because of the redeemer's identity.\n     */\n    event RedemptionRequestRejected(\n        address indexed agentVault,\n        address indexed redeemer,\n        uint64 indexed requestId,\n        string paymentAddress,\n        uint256 valueUBA\n    );\n\n    /**\n     * Agent's rejected redemption request was taken over by another agent.\n     */\n    event RedemptionRequestTakenOver(\n        address indexed agentVault,\n        address indexed redeemer,\n        uint64 indexed requestId,\n        uint256 valueTakenOverUBA,\n        address newAgentVault,\n        uint64 newRequestId\n    );\n\n    /**\n     * Agent rejected the redemption payment because the redeemer's address is invalid.\n     */\n    event RedemptionRejected(\n        address indexed agentVault,\n        address indexed redeemer,\n        uint64 indexed requestId,\n        uint256 redemptionAmountUBA\n    );\n\n    /**\n     * In case there were not enough tickets or more than allowed number would have to be redeemed,\n     * only partial redemption is done and the `remainingLots` lots of the fassets are returned to\n     * the redeemer.\n     */\n    event RedemptionRequestIncomplete(\n        address indexed redeemer,\n        uint256 remainingLots\n    );\n\n    /**\n     * Agent provided proof of redemption payment.\n     * Agent's collateral is released.\n     */\n    event RedemptionPerformed(\n        address indexed agentVault,\n        address indexed redeemer,\n        uint64 indexed requestId,\n        bytes32 transactionHash,\n        uint256 redemptionAmountUBA,\n        int256 spentUnderlyingUBA\n    );\n\n    /**\n     * The time for redemption payment is over and payment proof was not provided.\n     * Redeemer was paid in the collateral (with extra).\n     * The rest of the agent's collateral is released.\n     * The corresponding amount of underlying currency, held by the agent, is released\n     * and the agent can withdraw it (after underlying withdrawal announcement).\n     */\n    event RedemptionDefault(\n        address indexed agentVault,\n        address indexed redeemer,\n        uint64 indexed requestId,\n        uint256 redemptionAmountUBA,\n        uint256 redeemedVaultCollateralWei,\n        uint256 redeemedPoolCollateralWei\n    );\n\n    /**\n     * Agent provided the proof that redemption payment was attempted, but failed due to\n     * the redeemer's address being blocked (or burning more than allowed amount of gas).\n     * Redeemer is not paid and all of the agent's collateral is released.\n     * The underlying currency is also released to the agent.\n     */\n    event RedemptionPaymentBlocked(\n        address indexed agentVault,\n        address indexed redeemer,\n        uint64 indexed requestId,\n        bytes32 transactionHash,\n        uint256 redemptionAmountUBA,\n        int256 spentUnderlyingUBA\n    );\n\n    /**\n     * Agent provided the proof that redemption payment was attempted, but failed due to\n     * his own error. Also triggers payment default, unless the redeemer has done it already.\n     */\n    event RedemptionPaymentFailed(\n        address indexed agentVault,\n        address indexed redeemer,\n        uint64 indexed requestId,\n        bytes32 transactionHash,\n        int256 spentUnderlyingUBA,\n        string failureReason\n    );\n\n    /**\n     * At the end of a successful redemption, part of the redemption fee is re-minted as FAssets\n     * and paid to the agent's collateral pool as fee.\n     */\n    event RedemptionPoolFeeMinted(\n        address indexed agentVault,\n        uint64 indexed requestId,\n        uint256 poolFeeUBA\n    );\n\n    /**\n     * Due to self-close exit, some of the agent's backed fAssets were redeemed,\n     * but the redemption was immediately paid in collateral so no redemption process is started.\n     */\n    event RedeemedInCollateral(\n        address indexed agentVault,\n        address indexed redeemer,\n        uint256 redemptionAmountUBA,\n        uint256 paidVaultCollateralWei\n    );\n\n    /**\n     * Agent self-closed valueUBA of backing fassets.\n     */\n    event SelfClose(address indexed agentVault, uint256 valueUBA);\n\n    /**\n     * Redemption ticket with given value was created (when minting was executed).\n     */\n    event RedemptionTicketCreated(\n        address indexed agentVault,\n        uint256 indexed redemptionTicketId,\n        uint256 ticketValueUBA\n    );\n\n    /**\n     * Redemption ticket value was changed (partially redeemed).\n     * @param ticketValueUBA the ticket value after update\n     */\n    event RedemptionTicketUpdated(\n        address indexed agentVault,\n        uint256 indexed redemptionTicketId,\n        uint256 ticketValueUBA\n    );\n\n    /**\n     * Redemption ticket was deleted.\n     */\n    event RedemptionTicketDeleted(\n        address indexed agentVault,\n        uint256 indexed redemptionTicketId\n    );\n\n    /**\n     * Due to lot size change, some dust was created for this agent during\n     * redemption. Value `dustUBA` is the new amount of dust. Dust cannot be directly redeemed,\n     * but it can be self-closed or liquidated and if it accumulates to more than 1 lot,\n     * it can be converted to a new redemption ticket.\n     */\n    event DustChanged(address indexed agentVault, uint256 dustUBA);\n\n    /**\n     * Agent entered CCB (collateral call band) due to being on the border of unhealthy.\n     * Agent has limited time to topup the collateral, otherwise liquidation starts.\n     */\n    event AgentInCCB(address indexed agentVault, uint256 timestamp);\n\n    /**\n     * Agent entered liquidation state due to unhealthy position.\n     * The liquidation ends when the agent is again healthy or the agent's position is fully liquidated.\n     */\n    event LiquidationStarted(address indexed agentVault, uint256 timestamp);\n\n    /**\n     * Agent entered liquidation state due to illegal payment.\n     * Full liquidation will always liquidate the whole agent's position and\n     * the agent can never use the same vault and underlying address for minting again.\n     */\n    event FullLiquidationStarted(address indexed agentVault, uint256 timestamp);\n\n    /**\n     * Some of the agent's position was liquidated, by burning liquidator's fassets.\n     * Liquidator was paid in collateral with extra.\n     * The corresponding amount of underlying currency, held by the agent, is released\n     * and the agent can withdraw it (after underlying withdrawal announcement).\n     */\n    event LiquidationPerformed(\n        address indexed agentVault,\n        address indexed liquidator,\n        uint256 valueUBA,\n        uint256 paidVaultCollateralWei,\n        uint256 paidPoolCollateralWei\n    );\n\n    /**\n     * Agent exited liquidation state as agent's position was healthy again and not in full liquidation.\n     */\n    event LiquidationEnded(address indexed agentVault);\n\n    /**\n     * Part of the balance in the agent's underlying address is \"free balance\" that the agent can withdraw.\n     * It is obtained from minting / redemption fees and self-closed fassets.\n     * Some of this amount should be left for paying redemption (and withdrawal) gas fees,\n     * and the rest can be withdrawn by the agent.\n     * However, withdrawal has to be announced, otherwise it can be challenged as illegal payment.\n     * Only one announcement can exist per agent - agent has to present payment proof for withdrawal\n     * before starting a new one.\n     */\n    event UnderlyingWithdrawalAnnounced(\n        address indexed agentVault,\n        uint64 indexed announcementId,\n        bytes32 paymentReference\n    );\n\n    /**\n     * After announcing legal underlying withdrawal and creating transaction,\n     * the agent must confirm the transaction. This frees the announcement so the agent can create another one.\n     * If the agent doesn't confirm in time, anybody can confirm the transaction after several hours.\n     * Failed payments must also be confirmed.\n     */\n    event UnderlyingWithdrawalConfirmed(\n        address indexed agentVault,\n        uint64 indexed announcementId,\n        int256 spentUBA,\n        bytes32 transactionHash\n    );\n\n    /**\n     * After announcing legal underlying withdrawal agent can cancel ongoing withdrawal.\n     * The reason for doing that would be in resetting announcement timestamp due to any problems with underlying\n     * withdrawal - in order to prevent others to confirm withdrawal before agent and get some of his collateral.\n     */\n    event UnderlyingWithdrawalCancelled(\n        address indexed agentVault,\n        uint64 indexed announcementId\n    );\n\n    /**\n     * Emitted when the agent tops up the underlying address balance.\n     */\n    event UnderlyingBalanceToppedUp(\n        address indexed agentVault,\n        bytes32 transactionHash,\n        uint256 depositedUBA\n    );\n\n    /**\n     * Emitted whenever the tracked underlying balance changes.\n     */\n    event UnderlyingBalanceChanged(\n        address indexed agentVault,\n        int256 underlyingBalanceUBA\n    );\n\n    /**\n     * An unexpected transaction from the agent's underlying address was proved.\n     * Whole agent's position goes into liquidation.\n     * The challenger is rewarded from the agent's collateral.\n     */\n    event IllegalPaymentConfirmed(\n        address indexed agentVault,\n        bytes32 transactionHash\n    );\n\n    /**\n     * Two transactions with the same payment reference, both from the agent's underlying address, were proved.\n     * Whole agent's position goes into liquidation.\n     * The challenger is rewarded from the agent's collateral.\n     */\n    event DuplicatePaymentConfirmed(\n        address indexed agentVault,\n        bytes32 transactionHash1,\n        bytes32 transactionHash2\n    );\n\n    /**\n     * Agent's underlying balance became lower than required for backing f-assets (either through payment or via\n     * a challenge. Agent goes to a full liquidation.\n     * The challenger is rewarded from the agent's collateral.\n     */\n    event UnderlyingBalanceTooLow(\n        address indexed agentVault,\n        int256 balance,\n        uint256 requiredBalance\n    );\n\n    /**\n     * A setting has changed.\n     */\n    event SettingChanged(string name, uint256 value);\n\n    /**\n     * A setting has changed.\n     */\n    event SettingArrayChanged(string name, uint256[] value);\n\n    /**\n     * A contract in the settings has changed.\n     */\n    event ContractChanged(string name, address value);\n\n    /**\n     * Current underlying block number or timestamp has been updated.\n     */\n    event CurrentUnderlyingBlockUpdated(\n        uint256 underlyingBlockNumber,\n        uint256 underlyingBlockTimestamp,\n        uint256 updatedAt\n    );\n\n    /**\n     * New collateral token has been added.\n     */\n    event CollateralTypeAdded(\n        uint8 collateralClass,\n        address token,\n        uint256 decimals,\n        bool directPricePair,\n        string assetFtsoSymbol,\n        string tokenFtsoSymbol,\n        uint256 minCollateralRatioBIPS,\n        uint256 ccbMinCollateralRatioBIPS,\n        uint256 safetyMinCollateralRatioBIPS\n    );\n\n    /**\n     * System defined collateral ratios for the token have changed (minimal, CCB and safety collateral ratio).\n     */\n    event CollateralRatiosChanged(\n        uint8 collateralClass,\n        address collateralToken,\n        uint256 minCollateralRatioBIPS,\n        uint256 ccbMinCollateralRatioBIPS,\n        uint256 safetyMinCollateralRatioBIPS\n    );\n\n    /**\n     * Collateral token has been marked as deprecated. After the timestamp `validUntil` passes, it will be\n     * considered invalid and the agents who haven't switched their collateral before will be liquidated.\n     */\n    event CollateralTypeDeprecated(\n        uint8 collateralClass,\n        address collateralToken,\n        uint256 validUntil\n    );\n\n    /**\n     * Emergency pause was triggered.\n     */\n    event EmergencyPauseTriggered(uint256 pausedUntil);\n\n    /**\n     * Emergency pause was canceled.\n     */\n    event EmergencyPauseCanceled();\n\n    /**\n     * Emergency pause transfers was triggered.\n     */\n    event EmergencyPauseTransfersTriggered(uint256 pausedUntil);\n\n    /**\n     * Emergency pause transfers was canceled.\n     */\n    event EmergencyPauseTransfersCanceled();\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IBalanceDecreasingTransaction.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * @custom:name IBalanceDecreasingTransaction\n * @custom:id 0x02\n * @custom:supported BTC, DOGE, XRP\n * @author Flare\n * @notice A detection of a transaction that either decreases the balance for some address or is\n * signed by the source address.\n * Such an attestation could prove a violation of an agreement and therefore provides grounds to liquidate\n * some funds locked by a smart contract on Flare.\n *\n * A transaction is considered “balance decreasing” for the address, if the balance after the\n * transaction is lower than before or the address is among the signers of the transaction\n * (even if its balance is greater than before the transaction).\n * @custom:verification The transaction with `transactionId` is fetched from the API of the\n * source blockchain node or relevant indexer.\n * If the transaction cannot be fetched or the transaction is in a block that does not have a\n * sufficient number of confirmations, the attestation request is rejected.\n *\n * Once the transaction is received, the response fields are extracted if the transaction is balance\n * decreasing for the indicated address.\n * Some of the request and response fields are chain specific as described below.\n * The fields can be computed with the help of a balance decreasing summary.\n *\n * ### UTXO (Bitcoin and Dogecoin)\n *\n * - `sourceAddressIndicator` is the the index of the transaction input in hex padded to a 0x prefixed 32-byte string.\n * If the indicated input does not exist or the indicated input does not have the address,\n * the attestation request is rejected.\n * The `sourceAddress` is the address of the indicated transaction input.\n * - `spentAmount` is the sum of values of all inputs with sourceAddress minus the sum of\n * all outputs with `sourceAddress`.\n * Can be negative.\n * - `blockTimestamp` is the mediantime of a block.\n *\n * ### XRPL\n *\n * - `sourceAddressIndicator` is the standard address hash of the address whose balance has been decreased.\n * If the address indicated by `sourceAddressIndicator` is not among the signers of the transaction and the balance\n * of the address was not lowered in the transaction, the attestation request is rejected.\n *\n * - `spentAmount` is the difference between the balance of the indicated address after and before the transaction.\n * Can be negative.\n * - `blockTimestamp` is the close_time of a ledger converted to unix time.\n *\n * @custom:lut `blockTimestamp`\n * @custom:lutlimit `0x127500`, `0x127500`, `0x127500`\n */\ninterface IBalanceDecreasingTransaction {\n    /**\n     * @notice Toplevel request\n     * @param attestationType ID of the attestation type.\n     * @param sourceId ID of the data source.\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\n     * @param requestBody Data defining the request. Type and interpretation is determined by the `attestationType`.\n     */\n    struct Request {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        bytes32 messageIntegrityCode;\n        RequestBody requestBody;\n    }\n\n    /**\n     * @notice Toplevel response\n     * @param attestationType Extracted from the request.\n     * @param sourceId Extracted from the request.\n     * @param votingRound The ID of the State Connector round in which the request was considered.\n     * This is a security measure to prevent a collision of attestation hashes.\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n     * @param requestBody Extracted from the request.\n     * @param responseBody Data defining the response. The verification rules for the construction of the\n     * response body and the type are defined per specific `attestationType`.\n     */\n    struct Response {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        uint64 votingRound;\n        uint64 lowestUsedTimestamp;\n        RequestBody requestBody;\n        ResponseBody responseBody;\n    }\n\n    /**\n     * @notice Toplevel proof\n     * @param merkleProof Merkle proof corresponding to the attestation response.\n     * @param data Attestation response.\n     */\n    struct Proof {\n        bytes32[] merkleProof;\n        Response data;\n    }\n\n    /**\n     * @notice Request body for IBalanceDecreasingTransaction attestation type\n     * @param transactionId ID of the payment transaction.\n     * @param sourceAddressIndicator The indicator of the address whose balance has been decreased.\n     */\n    struct RequestBody {\n        bytes32 transactionId;\n        bytes32 sourceAddressIndicator;\n    }\n\n    /**\n     * @notice Response body for IBalanceDecreasingTransaction attestation type.\n     * @param blockNumber The number of the block in which the transaction is included.\n     * @param blockTimestamp The timestamp of the block in which the transaction is included.\n     * @param sourceAddressHash Standard address hash of the address indicated by the `sourceAddressIndicator`.\n     * @param spentAmount Amount spent by the source address in minimal units.\n     * @param standardPaymentReference Standard payment reference of the transaction.\n     */\n    struct ResponseBody {\n        uint64 blockNumber;\n        uint64 blockTimestamp;\n        bytes32 sourceAddressHash;\n        int256 spentAmount;\n        bytes32 standardPaymentReference;\n    }\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IBalanceDecreasingTransactionVerification.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"./IBalanceDecreasingTransaction.sol\";\n\ninterface IBalanceDecreasingTransactionVerification {\n    function verifyBalanceDecreasingTransaction(\n        IBalanceDecreasingTransaction.Proof calldata _proof\n    ) external view returns (bool _proved);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IBn256.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n// G1Point implements a point in G1 group.\nstruct G1Point {\n    uint256 x;\n    uint256 y;\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IClaimSetupManager.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"./IDelegationAccount.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IClaimSetupManager {\n    event DelegationAccountCreated(\n        address owner,\n        IDelegationAccount delegationAccount\n    );\n    event DelegationAccountUpdated(\n        address owner,\n        IDelegationAccount delegationAccount,\n        bool enabled\n    );\n    event ClaimExecutorsChanged(address owner, address[] executors);\n    event AllowedClaimRecipientsChanged(address owner, address[] recipients);\n    event ClaimExecutorFeeValueChanged(\n        address executor,\n        uint256 validFromRewardEpoch,\n        uint256 feeValueWei\n    );\n    event ExecutorRegistered(address executor);\n    event ExecutorUnregistered(address executor, uint256 validFromRewardEpoch);\n    event MinFeeSet(uint256 minFeeValueWei);\n    event MaxFeeSet(uint256 maxFeeValueWei);\n    event RegisterExecutorFeeSet(uint256 registerExecutorFeeValueWei);\n    event SetExecutorsExcessAmountRefunded(address owner, uint256 excessAmount);\n\n    /**\n     * @notice Sets the addresses of executors and optionally enables (creates) delegation account.\n     * @notice If setting registered executors some fee must be paid to them.\n     * @param _executors        The new executors. All old executors will be deleted and replaced by these.\n     */\n    function setAutoClaiming(\n        address[] memory _executors,\n        bool _enableDelegationAccount\n    ) external payable;\n\n    /**\n     * @notice Sets the addresses of executors.\n     * @notice If setting registered executors some fee must be paid to them.\n     * @param _executors        The new executors. All old executors will be deleted and replaced by these.\n     */\n    function setClaimExecutors(address[] memory _executors) external payable;\n\n    /**\n     * Set the addresses of allowed recipients.\n     * Apart from these, the owner is always an allowed recipient.\n     * @param _recipients The new allowed recipients. All old recipients will be deleted and replaced by these.\n     */\n    function setAllowedClaimRecipients(address[] memory _recipients) external;\n\n    /**\n     * @notice Enables (creates) delegation account contract,\n     * i.e. all airdrop and ftso rewards will be send to delegation account when using automatic claiming.\n     * @return Address of delegation account contract.\n     */\n    function enableDelegationAccount() external returns (IDelegationAccount);\n\n    /**\n     * @notice Disables delegation account contract,\n     * i.e. all airdrop and ftso rewards will be send to owner's account when using automatic claiming.\n     * @notice Automatic claiming will not claim airdrop and ftso rewards for delegation account anymore.\n     * @dev Reverts if there is no delegation account\n     */\n    function disableDelegationAccount() external;\n\n    /**\n     * @notice Allows executor to register and set initial fee value.\n     * If executor was already registered before (has fee set), only update fee after `feeValueUpdateOffset`.\n     * @notice Executor must pay fee in order to register - `registerExecutorFeeValueWei`.\n     * @param _feeValue    number representing fee value\n     * @return Returns the reward epoch number when the setting becomes effective.\n     */\n    function registerExecutor(\n        uint256 _feeValue\n    ) external payable returns (uint256);\n\n    /**\n     * @notice Allows executor to unregister.\n     * @return Returns the reward epoch number when the setting becomes effective.\n     */\n    function unregisterExecutor() external returns (uint256);\n\n    /**\n     * @notice Allows registered executor to set (or update last scheduled) fee value.\n     * @param _feeValue    number representing fee value\n     * @return Returns the reward epoch number when the setting becomes effective.\n     */\n    function updateExecutorFeeValue(\n        uint256 _feeValue\n    ) external returns (uint256);\n\n    /**\n     * @notice Delegate `_bips` of voting power to `_to` from msg.sender's delegation account\n     * @param _to The address of the recipient\n     * @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\n     *   Not cumulative - every call resets the delegation value (and value of 0 revokes delegation).\n     */\n    function delegate(address _to, uint256 _bips) external;\n\n    /**\n     * @notice Undelegate all percentage delegations from the msg.sender's delegation account and then delegate\n     *   corresponding `_bips` percentage of voting power to each member of `_delegatees`.\n     * @param _delegatees The addresses of the new recipients.\n     * @param _bips The percentages of voting power to be delegated expressed in basis points (1/100 of one percent).\n     *   Total of all `_bips` values must be at most 10000.\n     */\n    function batchDelegate(\n        address[] memory _delegatees,\n        uint256[] memory _bips\n    ) external;\n\n    /**\n     * @notice Undelegate all voting power for delegates of msg.sender's delegation account\n     */\n    function undelegateAll() external;\n\n    /**\n     * @notice Revoke all delegation from msg.sender's delegation account to `_who` at given block.\n     *    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\n     *    Block `_blockNumber` must be in the past.\n     *    This method should be used only to prevent rogue delegate voting in the current voting block.\n     *    To stop delegating use delegate with value of 0 or undelegateAll.\n     */\n    function revokeDelegationAt(address _who, uint256 _blockNumber) external;\n\n    /**\n     * @notice Delegate all governance vote power of msg.sender's delegation account to `_to`.\n     * @param _to The address of the recipient\n     */\n    function delegateGovernance(address _to) external;\n\n    /**\n     * @notice Undelegate governance vote power for delegate of msg.sender's delegation account\n     */\n    function undelegateGovernance() external;\n\n    /**\n     * @notice Allows user to transfer WNat to owner's account.\n     * @param _amount           Amount of tokens to transfer\n     */\n    function withdraw(uint256 _amount) external;\n\n    /**\n     * @notice Allows user to transfer balance of ERC20 tokens owned by the personal delegation contract.\n     The main use case is to transfer tokens/NFTs that were received as part of an airdrop or register \n     as participant in such airdrop.\n     * @param _token            Target token contract address\n     * @param _amount           Amount of tokens to transfer\n     * @dev Reverts if target token is WNat contract - use method `withdraw` for that\n     */\n    function transferExternalToken(IERC20 _token, uint256 _amount) external;\n\n    /**\n     * @notice Gets the delegation account of the `_owner`. Returns address(0) if not created yet.\n     */\n    function accountToDelegationAccount(\n        address _owner\n    ) external view returns (address);\n\n    /**\n     * @notice Gets the delegation account data for the `_owner`. Returns address(0) if not created yet.\n     * @param _owner                        owner's address\n     * @return _delegationAccount           owner's delegation account address - could be address(0)\n     * @return _enabled                     indicates if delegation account is enabled\n     */\n    function getDelegationAccountData(\n        address _owner\n    )\n        external\n        view\n        returns (IDelegationAccount _delegationAccount, bool _enabled);\n\n    /**\n     * @notice Get the addresses of executors.\n     */\n    function claimExecutors(\n        address _owner\n    ) external view returns (address[] memory);\n\n    /**\n     * Get the addresses of allowed recipients.\n     * Apart from these, the owner is always an allowed recipient.\n     */\n    function allowedClaimRecipients(\n        address _rewardOwner\n    ) external view returns (address[] memory);\n\n    /**\n     * @notice Returns info if `_executor` is allowed to execute calls for `_owner`\n     */\n    function isClaimExecutor(\n        address _owner,\n        address _executor\n    ) external view returns (bool);\n\n    /**\n     * @notice Get registered executors\n     */\n    function getRegisteredExecutors(\n        uint256 _start,\n        uint256 _end\n    )\n        external\n        view\n        returns (address[] memory _registeredExecutors, uint256 _totalLength);\n\n    /**\n     * @notice Returns some info about the `_executor`\n     * @param _executor             address representing executor\n     * @return _registered          information if executor is registered\n     * @return _currentFeeValue     executor's current fee value\n     */\n    function getExecutorInfo(\n        address _executor\n    ) external view returns (bool _registered, uint256 _currentFeeValue);\n\n    /**\n     * @notice Returns the current fee value of `_executor`\n     * @param _executor             address representing executor\n     */\n    function getExecutorCurrentFeeValue(\n        address _executor\n    ) external view returns (uint256);\n\n    /**\n     * @notice Returns the fee value of `_executor` at `_rewardEpoch`\n     * @param _executor             address representing executor\n     * @param _rewardEpoch          reward epoch number\n     */\n    function getExecutorFeeValue(\n        address _executor,\n        uint256 _rewardEpoch\n    ) external view returns (uint256);\n\n    /**\n     * @notice Returns the scheduled fee value changes of `_executor`\n     * @param _executor             address representing executor\n     * @return _feeValue            positional array of fee values\n     * @return _validFromEpoch      positional array of reward epochs the fee settings are effective from\n     * @return _fixed               positional array of boolean values indicating if settings are subjected to change\n     */\n    function getExecutorScheduledFeeValueChanges(\n        address _executor\n    )\n        external\n        view\n        returns (\n            uint256[] memory _feeValue,\n            uint256[] memory _validFromEpoch,\n            bool[] memory _fixed\n        );\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IConfirmedBlockHeightExists.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * @custom:name IConfirmedBlockHeightExists\n * @custom:id 0x02\n * @custom:supported BTC, DOGE, XRP\n * @author Flare\n * @notice An assertion that a block with `blockNumber` is confirmed.\n * It also provides data to compute the block production rate in the given time range.\n * @custom:verification It is checked that the block with `blockNumber` is confirmed by at\n * least `numberOfConfirmations`.\n * If it is not, the request is rejected. We note a block on the tip of the chain is confirmed by 1 block.\n * Then `lowestQueryWindowBlock` is determined and its number and timestamp are extracted.\n *\n *\n * Current confirmation heights consensus:\n *\n *\n * | `Chain` | `chainId` | `numberOfConfirmations` | `timestamp ` |\n * | ------- | --------- | ----------------------- | ------------ |\n * | `BTC`   | 0         | 6                       | mediantime   |\n * | `DOGE`  | 2         | 60                      | mediantime   |\n * | `XRP`   | 3         | 3                       | close_time   |\n *\n *\n * @custom:lut `lowestQueryWindowBlockTimestamp`\n * @custom:lutlimit `0x127500`, `0x127500`, `0x127500`\n */\ninterface IConfirmedBlockHeightExists {\n    /**\n     * @notice Toplevel request\n     * @param attestationType ID of the attestation type.\n     * @param sourceId ID of the data source.\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response as defined.\n     * @param requestBody Data defining the request. Type and interpretation is determined by the `attestationType`.\n     */\n    struct Request {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        bytes32 messageIntegrityCode;\n        RequestBody requestBody;\n    }\n\n    /**\n     * @notice Toplevel response\n     * @param attestationType Extracted from the request.\n     * @param sourceId Extracted from the request.\n     * @param votingRound The ID of the State Connector round in which the request was considered.\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n     * @param requestBody Extracted from the request.\n     * @param responseBody Data defining the response. The verification rules for the construction of the\n     * response body and the type are defined per specific `attestationType`.\n     */\n    struct Response {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        uint64 votingRound;\n        uint64 lowestUsedTimestamp;\n        RequestBody requestBody;\n        ResponseBody responseBody;\n    }\n\n    /**\n     * @notice Toplevel proof\n     * @param merkleProof Merkle proof corresponding to the attestation response.\n     * @param data Attestation response.\n     */\n    struct Proof {\n        bytes32[] merkleProof;\n        Response data;\n    }\n\n    /**\n     * @notice Request body for ConfirmedBlockHeightExistsType attestation type\n     * @param blockNumber The number of the block the request wants a confirmation of.\n     * @param queryWindow The length of the period in which the block production rate is to be computed.\n     */\n    struct RequestBody {\n        uint64 blockNumber;\n        uint64 queryWindow;\n    }\n\n    /**\n     * @notice Response body for ConfirmedBlockHeightExistsType attestation type\n     * @custom:below `blockNumber`, `lowestQueryWindowBlockNumber`, `blockTimestamp`, `lowestQueryWindowBlockTimestamp`\n     * can be used to compute the average block production time in the specified block range.\n     * @param blockTimestamp The timestamp of the block with `blockNumber`.\n     * @param numberOfConfirmations The depth at which a block is considered confirmed depending on the chain.\n     * All attestation providers must agree on this number.\n     * @param lowestQueryWindowBlockNumber The block number of the latest block that has a timestamp strictly smaller\n     * than `blockTimestamp` - `queryWindow`.\n     * @param lowestQueryWindowBlockTimestamp The timestamp of the block at height `lowestQueryWindowBlockNumber`.\n     */\n    struct ResponseBody {\n        uint64 blockTimestamp;\n        uint64 numberOfConfirmations;\n        uint64 lowestQueryWindowBlockNumber;\n        uint64 lowestQueryWindowBlockTimestamp;\n    }\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IConfirmedBlockHeightExistsVerification.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"./IConfirmedBlockHeightExists.sol\";\n\ninterface IConfirmedBlockHeightExistsVerification {\n    function verifyConfirmedBlockHeightExists(\n        IConfirmedBlockHeightExists.Proof calldata _proof\n    ) external view returns (bool _proved);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/ICoreVault.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \".//IFdcVerification.sol\";\n\n/**\n * Core vault\n */\ninterface ICoreVault {\n    /**\n     * Agent has requested transfer of (some of) their backing to the core vault.\n     */\n    event TransferToCoreVaultStarted(\n        address indexed agentVault,\n        uint256 indexed transferRedemptionRequestId,\n        uint256 valueUBA\n    );\n\n    /**\n     * Agent has cancelled transfer to the core vault without paying.\n     * The amount of `valueUBA` has been re-minted./\n     */\n    event TransferToCoreVaultDefaulted(\n        address indexed agentVault,\n        uint256 indexed transferRedemptionRequestId,\n        uint256 remintedUBA\n    );\n\n    /**\n     * The transfer of underlying to the core vault was successfully completed.\n     */\n    event TransferToCoreVaultSuccessful(\n        address indexed agentVault,\n        uint256 indexed transferRedemptionRequestId,\n        uint256 valueUBA\n    );\n\n    /**\n     * The agent has requested return of some of the underlying from the core vault to the agent's underlying address.\n     */\n    event ReturnFromCoreVaultRequested(\n        address indexed agentVault,\n        uint256 indexed requestId,\n        bytes32 paymentReference,\n        uint256 valueUBA\n    );\n\n    /**\n     * The agent has cancelled the return request.\n     */\n    event ReturnFromCoreVaultCancelled(\n        address indexed agentVault,\n        uint256 indexed requestId\n    );\n\n    /**\n     * The payment from core vault to the agent's underlying address has been confirmed.\n     */\n    event ReturnFromCoreVaultConfirmed(\n        address indexed agentVault,\n        uint256 indexed requestId,\n        uint256 receivedUnderlyingUBA,\n        uint256 remintedUBA\n    );\n\n    /**\n     * Redemption was requested from a core vault.\n     * Can only be redeemed to a payment address from to the `allowedDestinations` list in the core vault manager.\n     */\n    event CoreVaultRedemptionRequested(\n        address indexed redeemer,\n        string paymentAddress,\n        bytes32 paymentReference,\n        uint256 valueUBA,\n        uint256 feeUBA\n    );\n\n    /**\n     * Agent can transfer their backing to core vault.\n     * They then get a redemption requests which the owner pays just like any other redemption request.\n     * After that, the agent's collateral is released.\n     * NOTE: only agent vault owner can call\n     * @param _agentVault the agent vault address\n     * @param _amountUBA the amount to transfer to the core vault\n     */\n    function transferToCoreVault(\n        address _agentVault,\n        uint256 _amountUBA\n    ) external payable;\n\n    /**\n     * Request that core vault transfers funds to the agent's underlying address,\n     * which makes them available for redemptions. This method reserves agent's collateral.\n     * This may be sent by an agent when redemptions dominate mintings, so that the agents\n     * are empty but want to earn from redemptions.\n     * NOTE: only agent vault owner can call\n     * NOTE: there can be only one active return request (until it is confirmed or cancelled).\n     * @param _agentVault the agent vault address\n     * @param _lots number of lots (same lots as for minting and redemptions)\n     */\n    function requestReturnFromCoreVault(\n        address _agentVault,\n        uint64 _lots\n    ) external;\n\n    /**\n     * Before the return request is processed, it can be cancelled, releasing the agent's reserved collateral.\n     * @param _agentVault the agent vault address\n     */\n    function cancelReturnFromCoreVault(address _agentVault) external;\n\n    /**\n     * Confirm the payment from core vault to the agent's underlying address.\n     * This adds the reserved funds to the agent's backing.\n     * @param _payment FDC payment proof\n     * @param _agentVault the agent vault address\n     */\n    function confirmReturnFromCoreVault(\n        IPayment.Proof calldata _payment,\n        address _agentVault\n    ) external;\n\n    /**\n     * Directly redeem from core vault by a user holding FAssets.\n     * This is like ordinary redemption, but the redemption time is much longer (a day or more)\n     * and there is no possibility of redemption default.\n     * @param _lots the number of lots, must be larger than `coreVaultMinimumRedeemLots` setting\n     * @param _redeemerUnderlyingAddress the underlying address to which the assets will be redeemed;\n     *      must have been added to the `allowedDestinations` list in the core vault manager by\n     *      the governance before the redemption request.\n     */\n    function redeemFromCoreVault(\n        uint64 _lots,\n        string memory _redeemerUnderlyingAddress\n    ) external;\n\n    /**\n     * Return the amount of NAT that has to be paid in `transferToCoreVault` call.\n     * @param _amountUBA the amount to transfer to the core vault\n     * @return _transferFeeNatWei the amount that has to be included as `msg.value` and is paid to the core vault\n     */\n    function transferToCoreVaultFee(\n        uint256 _amountUBA\n    ) external view returns (uint256 _transferFeeNatWei);\n\n    /**\n     * Return the maximum amount that can be transferred and the minimum amount that\n     * has to remain on the agent vault's underlying address.\n     * @param _agentVault the agent vault address\n     * @return _maximumTransferUBA maximum amount that can be transferred\n     * @return _minimumLeftAmountUBA the minimum amount that has to remain on the agent vault's underlying address\n     *  after the transfer\n     */\n    function maximumTransferToCoreVault(\n        address _agentVault\n    )\n        external\n        view\n        returns (uint256 _maximumTransferUBA, uint256 _minimumLeftAmountUBA);\n\n    /**\n     * Returns the amount available on the core vault - this is the maximum amount that can be returned to agent or\n     * redeemed directly from the core vault.\n     * @return _immediatelyAvailableUBA the amount on the core vault operating account - returns and redemptions\n     * within this amount will be paid out quickly\n     * @return _totalAvailableUBA the total amount on the core vault, including all escrows\n     */\n    function coreVaultAvailableAmount()\n        external\n        view\n        returns (uint256 _immediatelyAvailableUBA, uint256 _totalAvailableUBA);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/ICoreVaultSettings.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * Core vault settings\n */\ninterface ICoreVaultSettings {\n    function setCoreVaultManager(address _coreVaultManager) external;\n\n    function setCoreVaultNativeAddress(address payable _nativeAddress) external;\n\n    function setCoreVaultTransferFeeBIPS(uint256 _transferFeeBIPS) external;\n\n    function setCoreVaultTransferTimeExtensionSeconds(\n        uint256 _transferTimeExtensionSeconds\n    ) external;\n\n    function setCoreVaultRedemptionFeeBIPS(uint256 _redemptionFeeBIPS) external;\n\n    function setCoreVaultMinimumAmountLeftBIPS(\n        uint256 _minimumAmountLeftBIPS\n    ) external;\n\n    function setCoreVaultMinimumRedeemLots(uint256 _minimumRedeemLots) external;\n\n    function getCoreVaultManager() external view returns (address);\n\n    function getCoreVaultNativeAddress() external view returns (address);\n\n    function getCoreVaultTransferFeeBIPS() external view returns (uint256);\n\n    function getCoreVaultTransferTimeExtensionSeconds()\n        external\n        view\n        returns (uint256);\n\n    function getCoreVaultRedemptionFeeBIPS() external view returns (uint256);\n\n    function getCoreVaultMinimumAmountLeftBIPS()\n        external\n        view\n        returns (uint256);\n\n    function getCoreVaultMinimumRedeemLots() external view returns (uint256);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IDelegationAccount.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"./IClaimSetupManager.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IDelegationAccount {\n    event DelegateFtso(address to, uint256 bips);\n    event RevokeFtso(address to, uint256 blockNumber);\n    event UndelegateAllFtso();\n    event DelegateGovernance(address to);\n    event UndelegateGovernance();\n    event WithdrawToOwner(uint256 amount);\n    event ExternalTokenTransferred(IERC20 token, uint256 amount);\n    event ExecutorFeePaid(address executor, uint256 amount);\n    event Initialize(address owner, IClaimSetupManager manager);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IEntityManager.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * EntityManager interface.\n */\ninterface IEntityManager {\n    /// Voter addresses.\n    struct VoterAddresses {\n        address submitAddress;\n        address submitSignaturesAddress;\n        address signingPolicyAddress;\n    }\n\n    /// Event emitted when a node id is registered.\n    event NodeIdRegistered(address indexed voter, bytes20 indexed nodeId);\n    /// Event emitted when a node id is unregistered.\n    event NodeIdUnregistered(address indexed voter, bytes20 indexed nodeId);\n    /// Event emitted when a public key is registered.\n    event PublicKeyRegistered(\n        address indexed voter,\n        bytes32 indexed part1,\n        bytes32 indexed part2\n    );\n    /// Event emitted when a public key is unregistered.\n    event PublicKeyUnregistered(\n        address indexed voter,\n        bytes32 indexed part1,\n        bytes32 indexed part2\n    );\n    /// Event emitted when a delegation address is proposed.\n    event DelegationAddressProposed(\n        address indexed voter,\n        address indexed delegationAddress\n    );\n    /// Event emitted when a delegation address registration is confirmed.\n    event DelegationAddressRegistrationConfirmed(\n        address indexed voter,\n        address indexed delegationAddress\n    );\n    /// Event emitted when a submit address is proposed.\n    event SubmitAddressProposed(\n        address indexed voter,\n        address indexed submitAddress\n    );\n    /// Event emitted when a submit address registration is confirmed.\n    event SubmitAddressRegistrationConfirmed(\n        address indexed voter,\n        address indexed submitAddress\n    );\n    /// Event emitted when a submit signatures address is proposed.\n    event SubmitSignaturesAddressProposed(\n        address indexed voter,\n        address indexed submitSignaturesAddress\n    );\n    /// Event emitted when a submit signatures address registration is confirmed.\n    event SubmitSignaturesAddressRegistrationConfirmed(\n        address indexed voter,\n        address indexed submitSignaturesAddress\n    );\n    /// Event emitted when a signing policy address is proposed.\n    event SigningPolicyAddressProposed(\n        address indexed voter,\n        address indexed signingPolicyAddress\n    );\n    /// Event emitted when a signing policy address registration is confirmed.\n    event SigningPolicyAddressRegistrationConfirmed(\n        address indexed voter,\n        address indexed signingPolicyAddress\n    );\n    /// Event emitted when the maximum number of node ids per entity is set.\n    event MaxNodeIdsPerEntitySet(uint256 maxNodeIdsPerEntity);\n\n    /**\n     * Registers a node id.\n     * @param _nodeId Node id.\n     * @param _certificateRaw Certificate in raw format.\n     * @param _signature Signature.\n     */\n    function registerNodeId(\n        bytes20 _nodeId,\n        bytes calldata _certificateRaw,\n        bytes calldata _signature\n    ) external;\n\n    /**\n     * Unregisters a node id.\n     * @param _nodeId Node id.\n     */\n    function unregisterNodeId(bytes20 _nodeId) external;\n\n    /**\n     * Registers a public key.\n     * @param _part1 First part of the public key.\n     * @param _part2 Second part of the public key.\n     * @param _verificationData Additional data used to verify the public key.\n     */\n    function registerPublicKey(\n        bytes32 _part1,\n        bytes32 _part2,\n        bytes calldata _verificationData\n    ) external;\n\n    /**\n     * Unregisters a public key.\n     */\n    function unregisterPublicKey() external;\n\n    /**\n     * Proposes a delegation address (called by the voter).\n     * @param _delegationAddress Delegation address.\n     */\n    function proposeDelegationAddress(address _delegationAddress) external;\n\n    /**\n     * Confirms a delegation address registration (called by the delegation address).\n     * @param _voter Voter address.\n     */\n    function confirmDelegationAddressRegistration(address _voter) external;\n\n    /**\n     * Proposes a submit address (called by the voter).\n     * @param _submitAddress Submit address.\n     */\n    function proposeSubmitAddress(address _submitAddress) external;\n\n    /**\n     * Confirms a submit address registration (called by the submit address).\n     * @param _voter Voter address.\n     */\n    function confirmSubmitAddressRegistration(address _voter) external;\n\n    /**\n     * Proposes a submit signatures address (called by the voter).\n     * @param _submitSignaturesAddress Submit signatures address.\n     */\n    function proposeSubmitSignaturesAddress(\n        address _submitSignaturesAddress\n    ) external;\n\n    /**\n     * Confirms a submit signatures address registration (called by the submit signatures address).\n     * @param _voter Voter address.\n     */\n    function confirmSubmitSignaturesAddressRegistration(\n        address _voter\n    ) external;\n\n    /**\n     * Proposes a signing policy address (called by the voter).\n     * @param _signingPolicyAddress Signing policy address.\n     */\n    function proposeSigningPolicyAddress(\n        address _signingPolicyAddress\n    ) external;\n\n    /**\n     * Confirms a signing policy address registration (called by the signing policy address).\n     * @param _voter Voter address.\n     */\n    function confirmSigningPolicyAddressRegistration(address _voter) external;\n\n    /**\n     * Gets the delegation address of a voter at a specific block number.\n     * @param _voter Voter address.\n     * @param _blockNumber Block number.\n     * @return Public key.\n     */\n    function getDelegationAddressOfAt(\n        address _voter,\n        uint256 _blockNumber\n    ) external view returns (address);\n\n    /**\n     * Gets the delegation address of a voter at the current block number.\n     * @param _voter Voter address.\n     * @return Public key.\n     */\n    function getDelegationAddressOf(\n        address _voter\n    ) external view returns (address);\n\n    /**\n     * Gets the node ids of a voter at a specific block number.\n     * @param _voter Voter address.\n     * @param _blockNumber Block number.\n     * @return Node ids.\n     */\n    function getNodeIdsOfAt(\n        address _voter,\n        uint256 _blockNumber\n    ) external view returns (bytes20[] memory);\n\n    /**\n     * Gets the node ids of a voter at the current block number.\n     * @param _voter Voter address.\n     * @return Node ids.\n     */\n    function getNodeIdsOf(\n        address _voter\n    ) external view returns (bytes20[] memory);\n\n    /**\n     * Gets the public key of a voter at a specific block number.\n     * @param _voter Voter address.\n     * @param _blockNumber Block number.\n     * @return Public key.\n     */\n    function getPublicKeyOfAt(\n        address _voter,\n        uint256 _blockNumber\n    ) external view returns (bytes32, bytes32);\n\n    /**\n     * Gets the public key of a voter at the current block number.\n     * @param _voter Voter address.\n     * @return Public key.\n     */\n    function getPublicKeyOf(\n        address _voter\n    ) external view returns (bytes32, bytes32);\n\n    /**\n     * Gets voter's addresses at a specific block number.\n     * @param _voter Voter address.\n     * @param _blockNumber Block number.\n     * @return _addresses Voter addresses.\n     */\n    function getVoterAddressesAt(\n        address _voter,\n        uint256 _blockNumber\n    ) external view returns (VoterAddresses memory _addresses);\n\n    /**\n     * Gets voter's addresses at the current block number.\n     * @param _voter Voter address.\n     * @return _addresses Voter addresses.\n     */\n    function getVoterAddresses(\n        address _voter\n    ) external view returns (VoterAddresses memory _addresses);\n\n    /**\n     * Gets voter's address for a node id at a specific block number.\n     * @param _nodeId Node id.\n     * @param _blockNumber Block number.\n     * @return _voter Voter address.\n     */\n    function getVoterForNodeId(\n        bytes20 _nodeId,\n        uint256 _blockNumber\n    ) external view returns (address _voter);\n\n    /**\n     * Gets voter's address for a public key at a specific block number.\n     * @param _part1 First part of the public key.\n     * @param _part2 Second part of the public key.\n     * @param _blockNumber Block number.\n     * @return _voter Voter address.\n     */\n    function getVoterForPublicKey(\n        bytes32 _part1,\n        bytes32 _part2,\n        uint256 _blockNumber\n    ) external view returns (address _voter);\n\n    /**\n     * Gets voter's address for a delegation address at a specific block number.\n     * @param _delegationAddress Delegation address.\n     * @param _blockNumber Block number.\n     * @return _voter Voter address.\n     */\n    function getVoterForDelegationAddress(\n        address _delegationAddress,\n        uint256 _blockNumber\n    ) external view returns (address _voter);\n\n    /**\n     * Gets voter's address for a submit address at a specific block number.\n     * @param _submitAddress Submit address.\n     * @param _blockNumber Block number.\n     * @return _voter Voter address.\n     */\n    function getVoterForSubmitAddress(\n        address _submitAddress,\n        uint256 _blockNumber\n    ) external view returns (address _voter);\n\n    /**\n     * Gets voter's address for a submit signatures address at a specific block number.\n     * @param _submitSignaturesAddress Submit signatures address.\n     * @param _blockNumber Block number.\n     * @return _voter Voter address.\n     */\n    function getVoterForSubmitSignaturesAddress(\n        address _submitSignaturesAddress,\n        uint256 _blockNumber\n    ) external view returns (address _voter);\n\n    /**\n     * Gets voter's address for a signing policy address at a specific block number.\n     * @param _signingPolicyAddress Signing policy address.\n     * @param _blockNumber Block number.\n     * @return _voter Voter address.\n     */\n    function getVoterForSigningPolicyAddress(\n        address _signingPolicyAddress,\n        uint256 _blockNumber\n    ) external view returns (address _voter);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IEVMTransaction.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * @custom:name IEVMTransaction\n * @custom:id 0x06\n * @custom:supported ETH, FLR, SGB\n * @author Flare\n * @notice A relay of a transaction from an EVM chain.\n * This type is only relevant for EVM-compatible chains.\n * @custom:verification If a transaction with the `transactionId` is in a block on the main branch with\n * at least `requiredConfirmations`, the specified data is relayed.\n * If an indicated event does not exist, the request is rejected.\n * @custom:lut `timestamp`\n * @custom:lutlimit `0x41eb00`, `0x41eb00`, `0x41eb00`\n */\ninterface IEVMTransaction {\n    /**\n     * @notice Toplevel request\n     * @param attestationType ID of the attestation type.\n     * @param sourceId ID of the data source.\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\n     * @param requestBody Data defining the request. Type (struct) and interpretation is\n     * determined by the `attestationType`.\n     */\n    struct Request {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        bytes32 messageIntegrityCode;\n        RequestBody requestBody;\n    }\n\n    /**\n     * @notice Toplevel response\n     * @param attestationType Extracted from the request.\n     * @param sourceId Extracted from the request.\n     * @param votingRound The ID of the State Connector round in which the request was considered.\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n     * @param requestBody Extracted from the request.\n     * @param responseBody Data defining the response. The verification rules for the construction\n     * of the response body and the type are defined per specific `attestationType`.\n     */\n    struct Response {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        uint64 votingRound;\n        uint64 lowestUsedTimestamp;\n        RequestBody requestBody;\n        ResponseBody responseBody;\n    }\n\n    /**\n     * @notice Toplevel proof\n     * @param merkleProof Merkle proof corresponding to the attestation response.\n     * @param data Attestation response.\n     */\n    struct Proof {\n        bytes32[] merkleProof;\n        Response data;\n    }\n\n    /**\n     * @notice Request body for EVM transaction attestation type\n     * @custom:below Note that events (logs) are indexed in block not in each transaction.\n     * The contract that uses the attestation should specify the order of event logs as needed and the requestor should\n     * sort `logIndices` with respect to the set specifications.\n     * If possible, the contact should require one `logIndex`.\n     * @param transactionHash Hash of the transaction(transactionHash).\n     * @param requiredConfirmations The height at which a block is considered confirmed by the requestor.\n     * @param provideInput If true, \"input\" field is included in the response.\n     * @param listEvents If true, events indicated by `logIndices` are included in the response.\n     * Otherwise, no events are included in the response.\n     * @param logIndices If `listEvents` is `false`, this should be an empty list, otherwise,\n     * the request is rejected. If `listEvents` is `true`, this is the list of indices (logIndex)\n     * of the events to be relayed (sorted by the requestor). The array should contain at most 50 indices.\n     * If empty, it indicates all events in order capped by 50.\n     */\n    struct RequestBody {\n        bytes32 transactionHash;\n        uint16 requiredConfirmations;\n        bool provideInput;\n        bool listEvents;\n        uint32[] logIndices;\n    }\n\n    /**\n     * @notice Response body for EVM transaction attestation type\n     * @custom:below The fields are in line with transaction provided by EVM node.\n     * @param blockNumber Number of the block in which the transaction is included.\n     * @param timestamp Timestamp of the block in which the transaction is included.\n     * @param sourceAddress The address (from) that signed the transaction.\n     * @param isDeployment Indicate whether it is a contract creation transaction.\n     * @param receivingAddress The address (to) of the receiver of the initial transaction.\n     * Zero address if `isDeployment` is `true`.\n     * @param value The value transferred by the initial transaction in wei.\n     * @param input If `provideInput`, this is the data send along with the initial transaction.\n     * Otherwise it is the default value `0x00`.\n     * @param status Status of the transaction 1 - success, 0 - failure.\n     * @param events If `listEvents` is `true`, an array of the requested events.\n     * Sorted by the logIndex in the same order as `logIndices`. Otherwise, an empty array.\n     */\n    struct ResponseBody {\n        uint64 blockNumber;\n        uint64 timestamp;\n        address sourceAddress;\n        bool isDeployment;\n        address receivingAddress;\n        uint256 value;\n        bytes input;\n        uint8 status;\n        Event[] events;\n    }\n\n    /**\n     * @notice Event log record\n     * @custom:above An `Event` is a struct with the following fields:\n     * @custom:below The fields are in line with EVM event logs.\n     * @param logIndex The consecutive number of the event in block.\n     * @param emitterAddress The address of the contract that emitted the event.\n     * @param topics An array of up to four 32-byte strings of indexed log arguments.\n     * @param data Concatenated 32-byte strings of non-indexed log arguments. At least 32 bytes long.\n     * @param removed It is `true` if the log was removed due to a chain reorganization\n     * and `false` if it is a valid log.\n     */\n    struct Event {\n        uint32 logIndex;\n        address emitterAddress;\n        bytes32[] topics;\n        bytes data;\n        bool removed;\n    }\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IEVMTransactionVerification.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"./IEVMTransaction.sol\";\n\ninterface IEVMTransactionVerification {\n    function verifyEVMTransaction(\n        IEVMTransaction.Proof calldata _proof\n    ) external view returns (bool _proved);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IFastUpdateIncentiveManager.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"./IFixedPointArithmetic.sol\" as FPA;\nimport \"./IFastUpdatesConfiguration.sol\";\nimport \"./IIncreaseManager.sol\";\n\n/**\n * Fast update incentive manager interface.\n */\ninterface IFastUpdateIncentiveManager is IIncreaseManager {\n    /// Incentive offer structure.\n    struct IncentiveOffer {\n        FPA.Range rangeIncrease;\n        FPA.Range rangeLimit;\n    }\n\n    /// Event emitted when an incentive is offered.\n    event IncentiveOffered(\n        uint24 indexed rewardEpochId,\n        FPA.Range rangeIncrease,\n        FPA.SampleSize sampleSizeIncrease,\n        FPA.Fee offerAmount\n    );\n\n    /// Event emitted when inflation rewards are offered.\n    event InflationRewardsOffered(\n        // reward epoch id\n        uint24 indexed rewardEpochId,\n        // feed configurations\n        IFastUpdatesConfiguration.FeedConfiguration[] feedConfigurations,\n        // amount (in wei) of reward in native coin\n        uint256 amount\n    );\n\n    /**\n     * The entry point for third parties to make incentive offers. It accepts a payment and, using the contents of\n     * `_offer`, computes how much the expected sample size will be increased to apply the requested (but capped) range\n     * increase. If the ultimate value of the range exceeds the cap, funds are returned to the sender in proportion to\n     * the amount by which the increase is adjusted to reach the cap.\n     * @param _offer The requested amount of per-block variation range increase,\n     * along with a cap for the ultimate range.\n     */\n    function offerIncentive(IncentiveOffer calldata _offer) external payable;\n\n    /// Viewer for the current value of the expected sample size.\n    function getExpectedSampleSize() external view returns (FPA.SampleSize);\n\n    /// Viewer for the current value of the unit delta's precision (the fractional part of the scale).\n    function getPrecision() external view returns (FPA.Precision);\n\n    /// Viewer for the current value of the per-block variation range.\n    function getRange() external view returns (FPA.Range);\n\n    /// Viewer for the current value of sample size increase price.\n    function getCurrentSampleSizeIncreasePrice()\n        external\n        view\n        returns (FPA.Fee);\n\n    /// Viewer for the current value of the scale itself.\n    function getScale() external view returns (FPA.Scale);\n\n    /// Viewer for the base value of the scale itself.\n    function getBaseScale() external view returns (FPA.Scale);\n\n    /// The maximum amount by which the expected sample size can be increased by an incentive offer.\n    /// This is controlled by governance and forces a minimum cost to increasing the sample size greatly,\n    /// which would otherwise be an attack on the protocol.\n    function sampleIncreaseLimit() external view returns (FPA.SampleSize);\n\n    /// The maximum value that the range can be increased to by an incentive offer.\n    function rangeIncreaseLimit() external view returns (FPA.Range);\n\n    /// The price for increasing the per-block range of variation by 1, prorated for the actual amount of increase.\n    function rangeIncreasePrice() external view returns (FPA.Fee);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IFastUpdater.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport {SortitionCredential} from \"./ISortition.sol\";\n\n/**\n * Fast updater interface.\n */\ninterface IFastUpdater {\n    /// Signature structure\n    struct Signature {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    /// Fast update structure\n    struct FastUpdates {\n        uint256 sortitionBlock;\n        SortitionCredential sortitionCredential;\n        bytes deltas;\n        Signature signature;\n    }\n\n    /// Event emitted when a new set of updates is submitted.\n    event FastUpdateFeedsSubmitted(\n        uint32 indexed votingRoundId,\n        address indexed signingPolicyAddress\n    );\n\n    /// Event emitted when a feed is added or reset.\n    event FastUpdateFeedReset(\n        uint256 indexed votingRoundId,\n        uint256 indexed index,\n        bytes21 indexed id,\n        uint256 value,\n        int8 decimals\n    );\n\n    /// Event emitted when a feed is removed.\n    event FastUpdateFeedRemoved(uint256 indexed index);\n\n    /// Event emitted at the start of a new voting epoch - current feeds' values and decimals.\n    event FastUpdateFeeds(\n        uint256 indexed votingEpochId,\n        uint256[] feeds,\n        int8[] decimals\n    );\n\n    /**\n     * The entry point for providers to submit an update transaction.\n     * @param _updates Data of an update transaction, which in addition to the actual list of updates,\n     * includes the sortition credential proving the provider's eligibility to make updates in the also-included\n     * sortition round, as well as a signature allowing a single registered provider to submit from multiple\n     * EVM accounts.\n     */\n    function submitUpdates(FastUpdates calldata _updates) external;\n\n    /**\n     * Public access to the stored data of all feeds.\n     * A fee (calculated by the FeeCalculator contract) may need to be paid.\n     * **NOTE:** Overpayment is not refunded.\n     * @return _feedIds The list of feed ids.\n     * @return _feeds The list of feeds.\n     * @return _decimals The list of decimal places for feeds.\n     * @return _timestamp The timestamp of the last update.\n     */\n    function fetchAllCurrentFeeds()\n        external\n        payable\n        returns (\n            bytes21[] memory _feedIds,\n            uint256[] memory _feeds,\n            int8[] memory _decimals,\n            uint64 _timestamp\n        );\n\n    /**\n     * Public access to the stored data of each feed, allowing controlled batch access to the lengthy complete data.\n     * Feeds should be sorted for better performance.\n     * A fee (calculated by the FeeCalculator contract) may need to be paid.\n     * **NOTE:** Overpayment is not refunded.\n     * @param _indices Index numbers of the feeds for which data should be returned, corresponding to `feedIds` in\n     * the `FastUpdatesConfiguration` contract.\n     * @return _feeds The list of data for the requested feeds, in the same order as the feed indices were given\n     * (which may not be their sorted order).\n     * @return _decimals The list of decimal places for the requested feeds, in the same order as the feed indices were\n     * given (which may not be their sorted order).\n     * @return _timestamp The timestamp of the last update.\n     */\n    function fetchCurrentFeeds(\n        uint256[] calldata _indices\n    )\n        external\n        payable\n        returns (\n            uint256[] memory _feeds,\n            int8[] memory _decimals,\n            uint64 _timestamp\n        );\n\n    /**\n     * Informational getter concerning the eligibility criterion for being chosen by sortition.\n     * @return _cutoff The upper endpoint of the acceptable range of \"scores\" that providers generate for sortition.\n     * A score below the cutoff indicates eligibility to submit updates in the present sortition round.\n     */\n    function currentScoreCutoff() external view returns (uint256 _cutoff);\n\n    /**\n     * Informational getter concerning the eligibility criterion for being chosen by sortition in a given block.\n     * @param _blockNum The block for which the cutoff is requested.\n     * @return _cutoff The upper endpoint of the acceptable range of \"scores\" that providers generate for sortition.\n     * A score below the cutoff indicates eligibility to submit updates in the present sortition round.\n     */\n    function blockScoreCutoff(\n        uint256 _blockNum\n    ) external view returns (uint256 _cutoff);\n\n    /**\n     * Informational getter concerning a provider's likelihood of being chosen by sortition.\n     * @param _signingPolicyAddress The signing policy address of the specified provider. This is different from the\n     * sender of an update transaction, due to the signature included in the `FastUpdates` type.\n     * @return _weight The specified provider's weight for sortition purposes. This is derived from the provider's\n     * delegation weight for the FTSO, but rescaled against a fixed number of \"virtual providers\", indicating how many\n     * potential updates a single provider may make in a sortition round.\n     */\n    function currentSortitionWeight(\n        address _signingPolicyAddress\n    ) external view returns (uint256 _weight);\n\n    /**\n     * The submission window is a number of blocks forming a \"grace period\" after a round of sortition starts,\n     * during which providers may submit updates for that round. In other words, each block starts a new round of\n     * sortition and that round lasts `submissionWindow` blocks.\n     */\n    function submissionWindow() external view returns (uint8);\n\n    /**\n     * Id of the current reward epoch.\n     */\n    function currentRewardEpochId() external view returns (uint24);\n\n    /**\n     * The number of updates submitted in each block for the last `_historySize` blocks (up to `MAX_BLOCKS_HISTORY`).\n     * @param _historySize The number of blocks for which the number of updates should be returned.\n     * @return _noOfUpdates The number of updates submitted in each block for the last `_historySize` blocks.\n     * The array is ordered from the current block to the oldest block.\n     */\n    function numberOfUpdates(\n        uint256 _historySize\n    ) external view returns (uint256[] memory _noOfUpdates);\n\n    /**\n     * The number of updates submitted in a block - available only for the last `MAX_BLOCKS_HISTORY` blocks.\n     * @param _blockNumber The block number for which the number of updates should be returned.\n     * @return _noOfUpdates The number of updates submitted in the specified block.\n     */\n    function numberOfUpdatesInBlock(\n        uint256 _blockNumber\n    ) external view returns (uint256 _noOfUpdates);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IFastUpdatesConfiguration.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * FastUpdatesConfiguration interface.\n */\ninterface IFastUpdatesConfiguration {\n    /**\n     * The feed configuration struct.\n     */\n    struct FeedConfiguration {\n        // feed id\n        bytes21 feedId;\n        // reward band value (interpreted off-chain) in relation to the median\n        uint32 rewardBandValue;\n        // inflation share\n        uint24 inflationShare;\n    }\n\n    /// Event emitted when a feed is added.\n    event FeedAdded(\n        bytes21 indexed feedId,\n        uint32 rewardBandValue,\n        uint24 inflationShare,\n        uint256 index\n    );\n    /// Event emitted when a feed is updated.\n    event FeedUpdated(\n        bytes21 indexed feedId,\n        uint32 rewardBandValue,\n        uint24 inflationShare,\n        uint256 index\n    );\n    /// Event emitted when a feed is removed.\n    event FeedRemoved(bytes21 indexed feedId, uint256 index);\n\n    /**\n     * Returns the index of a feed.\n     * @param _feedId The feed id.\n     * @return _index The index of the feed.\n     */\n    function getFeedIndex(\n        bytes21 _feedId\n    ) external view returns (uint256 _index);\n\n    /**\n     * Returns the feed id at a given index. Removed (unused) feed index will return bytes21(0).\n     * @param _index The index.\n     * @return _feedId The feed id.\n     */\n    function getFeedId(uint256 _index) external view returns (bytes21 _feedId);\n\n    /**\n     * Returns all feed ids. For removed (unused) feed indices, the feed id will be bytes21(0).\n     */\n    function getFeedIds() external view returns (bytes21[] memory);\n\n    /**\n     * Returns the number of feeds, including removed ones.\n     */\n    function getNumberOfFeeds() external view returns (uint256);\n\n    /**\n     * Returns the feed configurations, including removed ones.\n     */\n    function getFeedConfigurations()\n        external\n        view\n        returns (FeedConfiguration[] memory);\n\n    /**\n     * Returns the unused indices - indices of removed feeds.\n     */\n    function getUnusedIndices() external view returns (uint256[] memory);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IFdcHub.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"./IFdcInflationConfigurations.sol\";\nimport \"./IFdcRequestFeeConfigurations.sol\";\n\n/**\n * FdcHub interface.\n */\ninterface IFdcHub {\n    // Event emitted when an attestation request is made.\n    event AttestationRequest(bytes data, uint256 fee);\n\n    // Event emitted when a requests offset is set.\n    event RequestsOffsetSet(uint8 requestsOffsetSeconds);\n\n    /// Event emitted when inflation rewards are offered.\n    event InflationRewardsOffered(\n        // reward epoch id\n        uint24 indexed rewardEpochId,\n        // fdc configurations\n        IFdcInflationConfigurations.FdcConfiguration[] fdcConfigurations,\n        // amount (in wei) of reward in native coin\n        uint256 amount\n    );\n\n    /**\n     * Method to request an attestation.\n     * @param _data ABI encoded attestation request\n     */\n    function requestAttestation(bytes calldata _data) external payable;\n\n    /**\n     * The offset (in seconds) for the requests to be processed during the current voting round.\n     */\n    function requestsOffsetSeconds() external view returns (uint8);\n\n    /**\n     * The FDC inflation configurations contract.\n     */\n    function fdcInflationConfigurations()\n        external\n        view\n        returns (IFdcInflationConfigurations);\n\n    /**\n     * The FDC request fee configurations contract.\n     */\n    function fdcRequestFeeConfigurations()\n        external\n        view\n        returns (IFdcRequestFeeConfigurations);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IFdcInflationConfigurations.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * FdcInflationConfigurations interface.\n */\ninterface IFdcInflationConfigurations {\n    /// The FDC configuration struct.\n\n    struct FdcConfiguration {\n        // attestation type\n        bytes32 attestationType;\n        // source\n        bytes32 source;\n        // inflation share for this configuration\n        uint24 inflationShare;\n        // minimal reward eligibility threshold in number of request\n        uint8 minRequestsThreshold;\n        // mode (additional settings interpreted on the client side off-chain)\n        uint224 mode;\n    }\n\n    /**\n     * Returns the FDC configuration at `_index`.\n     * @param _index The index of the FDC configuration.\n     */\n    function getFdcConfiguration(\n        uint256 _index\n    ) external view returns (FdcConfiguration memory);\n\n    /**\n     * Returns the FDC configurations.\n     */\n    function getFdcConfigurations()\n        external\n        view\n        returns (FdcConfiguration[] memory);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IFdcRequestFeeConfigurations.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * FdcRequestFeeConfigurations interface.\n */\ninterface IFdcRequestFeeConfigurations {\n    // Event emitted when a type and source price is set.\n    event TypeAndSourceFeeSet(\n        bytes32 indexed attestationType,\n        bytes32 indexed source,\n        uint256 fee\n    );\n\n    // Event emitted when a type and source price is removed.\n    event TypeAndSourceFeeRemoved(\n        bytes32 indexed attestationType,\n        bytes32 indexed source\n    );\n\n    /**\n     * Method to get the base fee for an attestation request. It reverts if the request is not supported.\n     * @param _data ABI encoded attestation request\n     */\n    function getRequestFee(\n        bytes calldata _data\n    ) external view returns (uint256);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IFdcVerification.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"./IRelay.sol\";\nimport \"./IAddressValidityVerification.sol\";\nimport \"./IBalanceDecreasingTransactionVerification.sol\";\nimport \"./IConfirmedBlockHeightExistsVerification.sol\";\nimport \"./IEVMTransactionVerification.sol\";\nimport \"./IPaymentVerification.sol\";\nimport \"./IReferencedPaymentNonexistenceVerification.sol\";\nimport \"./IWeb2JsonVerification.sol\";\n\n/**\n * FdcVerification interface.\n */\ninterface IFdcVerification is\n    IAddressValidityVerification,\n    IBalanceDecreasingTransactionVerification,\n    IConfirmedBlockHeightExistsVerification,\n    IEVMTransactionVerification,\n    IPaymentVerification,\n    IReferencedPaymentNonexistenceVerification,\n    IWeb2JsonVerification\n{\n    /**\n     * The FDC protocol id.\n     */\n    function fdcProtocolId() external view returns (uint8 _fdcProtocolId);\n\n    /**\n     * Relay contract address.\n     */\n    function relay() external view returns (IRelay);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IFeeCalculator.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * FeeCalculator interface.\n */\ninterface IFeeCalculator {\n    /**\n     * Calculates a fee that needs to be paid to fetch feeds' data.\n     * @param _feedIds List of feed ids.\n     */\n    function calculateFeeByIds(\n        bytes21[] memory _feedIds\n    ) external view returns (uint256 _fee);\n\n    /**\n     * Calculates a fee that needs to be paid to fetch feeds' data.\n     * @param _indices Indices of the feeds, corresponding to feed ids in\n     * the FastUpdatesConfiguration contract.\n     */\n    function calculateFeeByIndices(\n        uint256[] memory _indices\n    ) external view returns (uint256 _fee);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IFixedPointArithmetic.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/*\n * Opaque type synonyms to enforce arithemtic correctness.\n * All of these are internally uint256 to avert solc's restricted-bit-size internal handling.\n * Since the space is available, the fractional parts of all (except Price,\n * which is not controlled by us) are very wide.\n */\n\ntype Scale is uint256; // 1x127\ntype Precision is uint256; // 0x127; the fractional part of Scale, top bit always 0\ntype SampleSize is uint256; // 8x120; current gas usage and block gas limit force <32 update transactions per block\ntype Range is uint256; // 8x120, with some space for >100% fluctuations\n// (measured volatility per block is ~1e-3 at most)\ntype Fractional is uint256; // 0x128\n\ntype Fee is uint256; // 128x0; same scale as currency units,restricted to bottom 128 bits\n// (1e18 integer and fractional parts) to accommodate arithmetic\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IFlareAssetRegistry.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\npragma abicoder v2;\n\ninterface IFlareAssetRegistry {\n    /**\n     * @notice Returns if the token is a Flare Asset\n     * @dev All other methods that accept token address will fail if this method returns false\n     * @param token The token to be checked\n     */\n    function isFlareAsset(address token) external view returns (bool);\n\n    /**\n     * Return the asset type of the token. Asset type is a hash uniquely identifying the asset type.\n     * For example, for wrapped native token, the type is `keccak256(\"wrapped native\")`,\n     * and for all f-assets the type will be `keccak256(\"f-asset\")`.\n     */\n    function assetType(address _token) external view returns (bytes32);\n\n    /**\n     * @notice Returns the address of the Flare Asset with the selected symbol\n     * @param symbol The token's symbol\n     */\n    function assetBySymbol(\n        string calldata symbol\n    ) external view returns (address);\n\n    /**\n     * @notice Returns if the Flare Asset supports delegation via IVPToken interface\n     * @param token The token to be checked\n     */\n    function supportsFtsoDelegation(address token) external view returns (bool);\n\n    /**\n     * @notice Returns the maximum allowed number of delegates by percent for the selected token\n     * @param token The token to be checked\n     */\n    function maxDelegatesByPercent(\n        address token\n    ) external view returns (uint256);\n\n    /**\n     * @notice Returns the incentive pool address for the selected token\n     * @param token The token to be checked\n     */\n    function incentivePoolFor(address token) external view returns (address);\n\n    /**\n     * @notice Returns the addresses of all Flare Assets\n     */\n    function allAssets() external view returns (address[] memory);\n\n    /**\n     * @notice Returns the addresses and associated symbols of all Flare Assets\n     */\n    function allAssetsWithSymbols()\n        external\n        view\n        returns (address[] memory, string[] memory);\n\n    /**\n     * @notice Returns all asset types.\n     */\n    function allAssetTypes() external view returns (bytes32[] memory);\n\n    /**\n     * @notice Returns the addresses of all Flare Assets of given type.\n     * @param _assetType a type hash, all returned assets will have this assetType\n     */\n    function allAssetsOfType(\n        bytes32 _assetType\n    ) external view returns (address[] memory);\n\n    /**\n     * @notice Returns the addresses and associated symbols of all Flare Assets of given type.\n     * @param _assetType a type hash, all returned assets will have this assetType\n     */\n    function allAssetsOfTypeWithSymbols(\n        bytes32 _assetType\n    ) external view returns (address[] memory, string[] memory);\n\n    /**\n     * @notice Returns a generic asset attribute value.\n     * @param token The token's address\n     * @param nameHash attributes name's hash\n     * @return defined true if the attribute is defined for this token\n     * @return value attribute value, may have to be cast into some other type\n     */\n    function getAttribute(\n        address token,\n        bytes32 nameHash\n    ) external view returns (bool defined, bytes32 value);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IFlareContractRegistry.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\npragma abicoder v2;\n\ninterface IFlareContractRegistry {\n    /**\n     * @notice Returns contract address for the given name - might be address(0)\n     * @param _name             name of the contract\n     */\n    function getContractAddressByName(\n        string calldata _name\n    ) external view returns (address);\n\n    /**\n     * @notice Returns contract address for the given name hash - might be address(0)\n     * @param _nameHash         hash of the contract name (keccak256(abi.encode(name))\n     */\n    function getContractAddressByHash(\n        bytes32 _nameHash\n    ) external view returns (address);\n\n    /**\n     * @notice Returns contract addresses for the given names - might be address(0)\n     * @param _names            names of the contracts\n     */\n    function getContractAddressesByName(\n        string[] calldata _names\n    ) external view returns (address[] memory);\n\n    /**\n     * @notice Returns contract addresses for the given name hashes - might be address(0)\n     * @param _nameHashes       hashes of the contract names (keccak256(abi.encode(name))\n     */\n    function getContractAddressesByHash(\n        bytes32[] calldata _nameHashes\n    ) external view returns (address[] memory);\n\n    /**\n     * @notice Returns all contract names and corresponding addresses\n     */\n    function getAllContracts()\n        external\n        view\n        returns (string[] memory _names, address[] memory _addresses);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IFlareSystemsCalculator.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * FlareSystemsCalculator interface.\n */\ninterface IFlareSystemsCalculator {\n    /// Event emitted when the registration weight of a voter is calculated.\n    event VoterRegistrationInfo(\n        address indexed voter,\n        uint24 indexed rewardEpochId,\n        address delegationAddress,\n        uint16 delegationFeeBIPS,\n        uint256 wNatWeight,\n        uint256 wNatCappedWeight,\n        bytes20[] nodeIds,\n        uint256[] nodeWeights\n    );\n\n    /// WNat cap used in signing policy weight.\n    function wNatCapPPM() external view returns (uint24);\n    /// Non-punishable time to sign new signing policy.\n    function signingPolicySignNonPunishableDurationSeconds()\n        external\n        view\n        returns (uint64);\n    /// Number of non-punishable blocks to sign new signing policy.\n    function signingPolicySignNonPunishableDurationBlocks()\n        external\n        view\n        returns (uint64);\n    /// Number of blocks (in addition to non-punishable blocks) after which all rewards are burned.\n    function signingPolicySignNoRewardsDurationBlocks()\n        external\n        view\n        returns (uint64);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IFlareSystemsManager.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"./ProtocolsV2Interface.sol\";\n\n/**\n * FlareSystemsManager interface.\n */\ninterface IFlareSystemsManager is ProtocolsV2Interface {\n    /// Signature structure\n    struct Signature {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    /// Number of weight based claims structure\n    struct NumberOfWeightBasedClaims {\n        uint256 rewardManagerId;\n        uint256 noOfWeightBasedClaims;\n    }\n\n    /// Event emitted when random acquisition phase starts.\n    event RandomAcquisitionStarted(\n        uint24 indexed rewardEpochId, // Reward epoch id\n        uint64 timestamp // Timestamp when this happened\n    );\n\n    /// Event emitted when vote power block is selected.\n    event VotePowerBlockSelected(\n        uint24 indexed rewardEpochId, // Reward epoch id\n        uint64 votePowerBlock, // Vote power block for given reward epoch\n        uint64 timestamp // Timestamp when this happened\n    );\n\n    /// Event emitted when signing policy is signed.\n    event SigningPolicySigned(\n        uint24 indexed rewardEpochId, // Reward epoch id\n        address indexed signingPolicyAddress, // Address which signed this\n        address indexed voter, // Voter (entity)\n        uint64 timestamp, // Timestamp when this happened\n        bool thresholdReached // Indicates if signing threshold was reached\n    );\n\n    /// Event emitted when reward epoch starts.\n    event RewardEpochStarted(\n        uint24 indexed rewardEpochId, // Reward epoch id\n        uint32 startVotingRoundId, // First voting round id of validity\n        uint64 timestamp // Timestamp when this happened\n    );\n\n    /// Event emitted when it is time to sign uptime vote.\n    event SignUptimeVoteEnabled(\n        uint24 indexed rewardEpochId, // Reward epoch id\n        uint64 timestamp // Timestamp when this happened\n    );\n\n    /// Event emitted when uptime vote is submitted.\n    event UptimeVoteSubmitted(\n        uint24 indexed rewardEpochId, // Reward epoch id\n        address indexed signingPolicyAddress, // Address which signed this\n        address indexed voter, // Voter (entity)\n        bytes20[] nodeIds, // Node ids with high enough uptime\n        uint64 timestamp // Timestamp when this happened\n    );\n\n    /// Event emitted when uptime vote is signed.\n    event UptimeVoteSigned(\n        uint24 indexed rewardEpochId, // Reward epoch id\n        address indexed signingPolicyAddress, // Address which signed this\n        address indexed voter, // Voter (entity)\n        bytes32 uptimeVoteHash, // Uptime vote hash\n        uint64 timestamp, // Timestamp when this happened\n        bool thresholdReached // Indicates if signing threshold was reached\n    );\n\n    /// Event emitted when rewards are signed.\n    event RewardsSigned(\n        uint24 indexed rewardEpochId, // Reward epoch id\n        address indexed signingPolicyAddress, // Address which signed this\n        address indexed voter, // Voter (entity)\n        bytes32 rewardsHash, // Rewards hash\n        NumberOfWeightBasedClaims[] noOfWeightBasedClaims, // Number of weight based claims list\n        uint64 timestamp, // Timestamp when this happened\n        bool thresholdReached // Indicates if signing threshold was reached\n    );\n\n    /**\n     * Method for collecting signatures for the new signing policy.\n     * @param _rewardEpochId Reward epoch id of the new signing policy.\n     * @param _newSigningPolicyHash New signing policy hash.\n     * @param _signature Signature.\n     */\n    function signNewSigningPolicy(\n        uint24 _rewardEpochId,\n        bytes32 _newSigningPolicyHash,\n        Signature calldata _signature\n    ) external;\n\n    /**\n     * Method for submitting node ids with high enough uptime.\n     * @param _rewardEpochId Reward epoch id of the uptime vote.\n     * @param _nodeIds Node ids with high enough uptime.\n     * @param _signature Signature.\n     */\n    function submitUptimeVote(\n        uint24 _rewardEpochId,\n        bytes20[] calldata _nodeIds,\n        Signature calldata _signature\n    ) external;\n\n    /**\n     * Method for collecting signatures for the uptime vote.\n     * @param _rewardEpochId Reward epoch id of the uptime vote.\n     * @param _uptimeVoteHash Uptime vote hash.\n     * @param _signature Signature.\n     */\n    function signUptimeVote(\n        uint24 _rewardEpochId,\n        bytes32 _uptimeVoteHash,\n        Signature calldata _signature\n    ) external;\n\n    /**\n     * Method for collecting signatures for the rewards.\n     * @param _rewardEpochId Reward epoch id of the rewards.\n     * @param _noOfWeightBasedClaims Number of weight based claims list.\n     * @param _rewardsHash Rewards hash.\n     * @param _signature Signature.\n     */\n    function signRewards(\n        uint24 _rewardEpochId,\n        NumberOfWeightBasedClaims[] calldata _noOfWeightBasedClaims,\n        bytes32 _rewardsHash,\n        Signature calldata _signature\n    ) external;\n\n    /**\n     * Returns the seed for given reward epoch id.\n     */\n    function getSeed(uint256 _rewardEpochId) external view returns (uint256);\n\n    /**\n     * Returns the threshold for given reward epoch id.\n     */\n    function getThreshold(\n        uint256 _rewardEpochId\n    ) external view returns (uint16);\n\n    /**\n     * Returns voter rgistration data for given reward epoch id.\n     * @param _rewardEpochId Reward epoch id.\n     * @return _votePowerBlock Vote power block.\n     * @return _enabled Indicates if voter registration is enabled.\n     */\n    function getVoterRegistrationData(\n        uint256 _rewardEpochId\n    ) external view returns (uint256 _votePowerBlock, bool _enabled);\n\n    /**\n     * Indicates if voter registration is currently enabled.\n     */\n    function isVoterRegistrationEnabled() external view returns (bool);\n\n    /**\n     * Returns the current reward epoch id (backwards compatibility).\n     */\n    function getCurrentRewardEpoch() external view returns (uint256);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IFtso.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\ninterface IFtso {\n    enum PriceFinalizationType {\n        // initial state\n        NOT_FINALIZED,\n        // median calculation used to find price\n        WEIGHTED_MEDIAN,\n        // low turnout - price calculated from median of trusted addresses\n        TRUSTED_ADDRESSES,\n        // low turnout + no votes from trusted addresses - price copied from previous epoch\n        PREVIOUS_PRICE_COPIED,\n        // price calculated from median of trusted addresses - triggered due to an exception\n        TRUSTED_ADDRESSES_EXCEPTION,\n        // previous price copied - triggered due to an exception\n        PREVIOUS_PRICE_COPIED_EXCEPTION\n    }\n\n    event PriceRevealed(\n        address indexed voter,\n        uint256 indexed epochId,\n        uint256 price,\n        uint256 timestamp,\n        uint256 votePowerNat,\n        uint256 votePowerAsset\n    );\n\n    event PriceFinalized(\n        uint256 indexed epochId,\n        uint256 price,\n        bool rewardedFtso,\n        uint256 lowIQRRewardPrice,\n        uint256 highIQRRewardPrice,\n        uint256 lowElasticBandRewardPrice,\n        uint256 highElasticBandRewardPrice,\n        PriceFinalizationType finalizationType,\n        uint256 timestamp\n    );\n\n    event PriceEpochInitializedOnFtso(\n        uint256 indexed epochId,\n        uint256 endTime,\n        uint256 timestamp\n    );\n\n    event LowTurnout(\n        uint256 indexed epochId,\n        uint256 natTurnout,\n        uint256 lowNatTurnoutThresholdBIPS,\n        uint256 timestamp\n    );\n\n    /**\n     * @notice Returns if FTSO is active\n     */\n    function active() external view returns (bool);\n\n    /**\n     * @notice Returns the FTSO symbol\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @notice Returns current epoch id\n     */\n    function getCurrentEpochId() external view returns (uint256);\n\n    /**\n     * @notice Returns id of the epoch which was opened for price submission at the specified timestamp\n     * @param _timestamp            Timestamp as seconds from unix epoch\n     */\n    function getEpochId(uint256 _timestamp) external view returns (uint256);\n\n    /**\n     * @notice Returns random number of the specified epoch\n     * @param _epochId              Id of the epoch\n     */\n    function getRandom(uint256 _epochId) external view returns (uint256);\n\n    /**\n     * @notice Returns asset price consented in specific epoch\n     * @param _epochId              Id of the epoch\n     * @return Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\n     */\n    function getEpochPrice(uint256 _epochId) external view returns (uint256);\n\n    /**\n     * @notice Returns current epoch data\n     * @return _epochId                 Current epoch id\n     * @return _epochSubmitEndTime      End time of the current epoch price submission as seconds from unix epoch\n     * @return _epochRevealEndTime      End time of the current epoch price reveal as seconds from unix epoch\n     * @return _votePowerBlock          Vote power block for the current epoch\n     * @return _fallbackMode            Current epoch in fallback mode - only votes from trusted addresses will be used\n     * @dev half-closed intervals - end time not included\n     */\n    function getPriceEpochData()\n        external\n        view\n        returns (\n            uint256 _epochId,\n            uint256 _epochSubmitEndTime,\n            uint256 _epochRevealEndTime,\n            uint256 _votePowerBlock,\n            bool _fallbackMode\n        );\n\n    /**\n     * @notice Returns current epoch data\n     * @return _firstEpochStartTs           First epoch start timestamp\n     * @return _submitPeriodSeconds         Submit period in seconds\n     * @return _revealPeriodSeconds         Reveal period in seconds\n     */\n    function getPriceEpochConfiguration()\n        external\n        view\n        returns (\n            uint256 _firstEpochStartTs,\n            uint256 _submitPeriodSeconds,\n            uint256 _revealPeriodSeconds\n        );\n\n    /**\n     * @notice Returns asset price submitted by voter in specific epoch\n     * @param _epochId              Id of the epoch\n     * @param _voter                Address of the voter\n     * @return Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\n     */\n    function getEpochPriceForVoter(\n        uint256 _epochId,\n        address _voter\n    ) external view returns (uint256);\n\n    /**\n     * @notice Returns current asset price\n     * @return _price               Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\n     * @return _timestamp           Time when price was updated for the last time\n     */\n    function getCurrentPrice()\n        external\n        view\n        returns (uint256 _price, uint256 _timestamp);\n\n    /**\n     * @notice Returns current asset price and number of decimals\n     * @return _price                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\n     * @return _timestamp               Time when price was updated for the last time\n     * @return _assetPriceUsdDecimals   Number of decimals used for USD price\n     */\n    function getCurrentPriceWithDecimals()\n        external\n        view\n        returns (\n            uint256 _price,\n            uint256 _timestamp,\n            uint256 _assetPriceUsdDecimals\n        );\n\n    /**\n     * @notice Returns current asset price calculated from trusted providers\n     * @return _price               Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\n     * @return _timestamp           Time when price was updated for the last time\n     */\n    function getCurrentPriceFromTrustedProviders()\n        external\n        view\n        returns (uint256 _price, uint256 _timestamp);\n\n    /**\n     * @notice Returns current asset price calculated from trusted providers and number of decimals\n     * @return _price                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\n     * @return _timestamp               Time when price was updated for the last time\n     * @return _assetPriceUsdDecimals   Number of decimals used for USD price\n     */\n    function getCurrentPriceWithDecimalsFromTrustedProviders()\n        external\n        view\n        returns (\n            uint256 _price,\n            uint256 _timestamp,\n            uint256 _assetPriceUsdDecimals\n        );\n\n    /**\n     * @notice Returns current asset price details\n     * @return _price                                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\n     * @return _priceTimestamp                          Time when price was updated for the last time\n     * @return _priceFinalizationType                   Finalization type when price was updated for the last time\n     * @return _lastPriceEpochFinalizationTimestamp     Time when last price epoch was finalized\n     * @return _lastPriceEpochFinalizationType          Finalization type of last finalized price epoch\n     */\n    function getCurrentPriceDetails()\n        external\n        view\n        returns (\n            uint256 _price,\n            uint256 _priceTimestamp,\n            PriceFinalizationType _priceFinalizationType,\n            uint256 _lastPriceEpochFinalizationTimestamp,\n            PriceFinalizationType _lastPriceEpochFinalizationType\n        );\n\n    /**\n     * @notice Returns current random number\n     */\n    function getCurrentRandom() external view returns (uint256);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IFtsoFeedDecimals.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * FtsoFeedDecimals interface.\n */\ninterface IFtsoFeedDecimals {\n    /// Event emitted when a feed decimals value is changed.\n    event DecimalsChanged(\n        bytes21 indexed feedId,\n        int8 decimals,\n        uint24 rewardEpochId\n    );\n\n    /// The offset in reward epochs for the decimals value to become effective.\n    function decimalsUpdateOffset() external view returns (uint24);\n\n    /// The default decimals value.\n    function defaultDecimals() external view returns (int8);\n\n    /**\n     * Returns current decimals set for `_feedId`.\n     * @param _feedId Feed id.\n     */\n    function getCurrentDecimals(bytes21 _feedId) external view returns (int8);\n\n    /**\n     * Returns the decimals of `_feedId` for given reward epoch id.\n     * @param _feedId Feed id.\n     * @param _rewardEpochId Reward epoch id.\n     * **NOTE:** decimals might still change for the `current + decimalsUpdateOffset` reward epoch id.\n     */\n    function getDecimals(\n        bytes21 _feedId,\n        uint256 _rewardEpochId\n    ) external view returns (int8);\n\n    /**\n     * Returns the scheduled decimals changes of `_feedId`.\n     * @param _feedId Feed id.\n     * @return _decimals Positional array of decimals.\n     * @return _validFromEpochId Positional array of reward epoch ids the decimals settings are effective from.\n     * @return _fixed Positional array of boolean values indicating if settings are subjected to change.\n     */\n    function getScheduledDecimalsChanges(\n        bytes21 _feedId\n    )\n        external\n        view\n        returns (\n            int8[] memory _decimals,\n            uint256[] memory _validFromEpochId,\n            bool[] memory _fixed\n        );\n\n    /**\n     * Returns current decimals setting for `_feedIds`.\n     * @param _feedIds Concatenated feed ids (each feedId bytes21).\n     * @return _decimals Concatenated corresponding decimals (each as bytes1(uint8(int8))).\n     */\n    function getCurrentDecimalsBulk(\n        bytes memory _feedIds\n    ) external view returns (bytes memory _decimals);\n\n    /**\n     * Returns decimals setting for `_feedIds` at `_rewardEpochId`.\n     * @param _feedIds Concatenated feed ids (each feedId bytes21).\n     * @param _rewardEpochId Reward epoch id.\n     * @return _decimals Concatenated corresponding decimals (each as bytes1(uint8(int8))).\n     * **NOTE:** decimals might still change for the `current + decimalsUpdateOffset` reward epoch id.\n     */\n    function getDecimalsBulk(\n        bytes memory _feedIds,\n        uint256 _rewardEpochId\n    ) external view returns (bytes memory _decimals);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IFtsoFeedIdConverter.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * IFtsoFeedIdConverter interface.\n */\ninterface IFtsoFeedIdConverter {\n    /**\n     * Returns the feed id for given category and name.\n     * @param _category Feed category.\n     * @param _name Feed name.\n     * @return Feed id.\n     */\n    function getFeedId(\n        uint8 _category,\n        string memory _name\n    ) external view returns (bytes21);\n\n    /**\n     * Returns the feed category and name for given feed id.\n     * @param _feedId Feed id.\n     * @return _category Feed category.\n     * @return _name Feed name.\n     */\n    function getFeedCategoryAndName(\n        bytes21 _feedId\n    ) external pure returns (uint8 _category, string memory _name);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IFtsoFeedPublisher.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * FtsoFeedPublisher interface.\n */\ninterface IFtsoFeedPublisher {\n    /// The FTSO feed struct.\n    struct Feed {\n        uint32 votingRoundId;\n        bytes21 id;\n        int32 value;\n        uint16 turnoutBIPS;\n        int8 decimals;\n    }\n\n    /// The FTSO random struct.\n    struct Random {\n        uint32 votingRoundId;\n        uint256 value;\n        bool isSecure;\n    }\n\n    /// The FTSO feed with proof struct.\n    struct FeedWithProof {\n        bytes32[] merkleProof;\n        Feed body;\n    }\n\n    /// Event emitted when a new feed is published.\n    event FtsoFeedPublished(\n        uint32 indexed votingRoundId,\n        bytes21 indexed id,\n        int32 value,\n        uint16 turnoutBIPS,\n        int8 decimals\n    );\n\n    /**\n     * Publishes feeds.\n     * @param _proofs The FTSO feeds with proofs to publish.\n     */\n    function publish(FeedWithProof[] calldata _proofs) external;\n\n    /**\n     *The FTSO protocol id.\n     */\n    function ftsoProtocolId() external view returns (uint8);\n\n    /**\n     * The size of the feeds history.\n     */\n    function feedsHistorySize() external view returns (uint256);\n\n    /**\n     * Returns the current feed.\n     * @param _feedId Feed id.\n     */\n    function getCurrentFeed(\n        bytes21 _feedId\n    ) external view returns (Feed memory);\n\n    /**\n     * Returns the feed for given voting round id.\n     * @param _feedId Feed id.\n     * @param _votingRoundId Voting round id.\n     */\n    function getFeed(\n        bytes21 _feedId,\n        uint256 _votingRoundId\n    ) external view returns (Feed memory);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IFtsoInflationConfigurations.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * FtsoInflationConfigurations interface.\n */\ninterface IFtsoInflationConfigurations {\n    /// The FTSO configuration struct.\n    struct FtsoConfiguration {\n        // concatenated feed ids - i.e. category + base/quote symbol - multiple of 21 (one feedId is bytes21)\n        bytes feedIds;\n        // inflation share for this configuration group\n        uint24 inflationShare;\n        // minimal reward eligibility turnout threshold in BIPS (basis points)\n        uint16 minRewardedTurnoutBIPS;\n        // primary band reward share in PPM (parts per million)\n        uint24 primaryBandRewardSharePPM;\n        // secondary band width in PPM (parts per million) in relation to the median - multiple of 3 (uint24)\n        bytes secondaryBandWidthPPMs;\n        // rewards split mode (0 means equally, 1 means random,...)\n        uint16 mode;\n    }\n\n    /**\n     * Returns the FTSO configuration at `_index`.\n     * @param _index The index of the FTSO configuration.\n     */\n    function getFtsoConfiguration(\n        uint256 _index\n    ) external view returns (FtsoConfiguration memory);\n\n    /**\n     * Returns the FTSO configurations.\n     */\n    function getFtsoConfigurations()\n        external\n        view\n        returns (FtsoConfiguration[] memory);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IFtsoManager.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"./ftso/interfaces/IIFtso.sol\";\nimport \"./genesis/interfaces/IFtsoManagerGenesis.sol\";\n\ninterface IFtsoManager is IFtsoManagerGenesis {\n    event FtsoAdded(IIFtso ftso, bool add);\n    event FallbackMode(bool fallbackMode);\n    event FtsoFallbackMode(IIFtso ftso, bool fallbackMode);\n    event RewardEpochFinalized(uint256 votepowerBlock, uint256 startBlock);\n    event PriceEpochFinalized(address chosenFtso, uint256 rewardEpochId);\n    event InitializingCurrentEpochStateForRevealFailed(\n        IIFtso ftso,\n        uint256 epochId\n    );\n    event FinalizingPriceEpochFailed(\n        IIFtso ftso,\n        uint256 epochId,\n        IFtso.PriceFinalizationType failingType\n    );\n    event DistributingRewardsFailed(address ftso, uint256 epochId);\n    event AccruingUnearnedRewardsFailed(uint256 epochId);\n    event UseGoodRandomSet(\n        bool useGoodRandom,\n        uint256 maxWaitForGoodRandomSeconds\n    );\n\n    function active() external view returns (bool);\n\n    function getCurrentRewardEpoch() external view returns (uint256);\n\n    function getRewardEpochVotePowerBlock(\n        uint256 _rewardEpoch\n    ) external view returns (uint256);\n\n    function getRewardEpochToExpireNext() external view returns (uint256);\n\n    function getCurrentPriceEpochData()\n        external\n        view\n        returns (\n            uint256 _priceEpochId,\n            uint256 _priceEpochStartTimestamp,\n            uint256 _priceEpochEndTimestamp,\n            uint256 _priceEpochRevealEndTimestamp,\n            uint256 _currentTimestamp\n        );\n\n    function getFtsos() external view returns (IIFtso[] memory _ftsos);\n\n    function getPriceEpochConfiguration()\n        external\n        view\n        returns (\n            uint256 _firstPriceEpochStartTs,\n            uint256 _priceEpochDurationSeconds,\n            uint256 _revealEpochDurationSeconds\n        );\n\n    function getRewardEpochConfiguration()\n        external\n        view\n        returns (\n            uint256 _firstRewardEpochStartTs,\n            uint256 _rewardEpochDurationSeconds\n        );\n\n    function getFallbackMode()\n        external\n        view\n        returns (\n            bool _fallbackMode,\n            IIFtso[] memory _ftsos,\n            bool[] memory _ftsoInFallbackMode\n        );\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IFtsoRegistry.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\npragma abicoder v2;\n\nimport \"./ftso/interfaces/IIFtso.sol\";\nimport \"./genesis/interfaces/IFtsoRegistryGenesis.sol\";\n\ninterface IFtsoRegistry is IFtsoRegistryGenesis {\n    struct PriceInfo {\n        uint256 ftsoIndex;\n        uint256 price;\n        uint256 decimals;\n        uint256 timestamp;\n    }\n\n    function getFtso(\n        uint256 _ftsoIndex\n    ) external view returns (IIFtso _activeFtsoAddress);\n    function getFtsoBySymbol(\n        string memory _symbol\n    ) external view returns (IIFtso _activeFtsoAddress);\n    function getSupportedIndices()\n        external\n        view\n        returns (uint256[] memory _supportedIndices);\n    function getSupportedSymbols()\n        external\n        view\n        returns (string[] memory _supportedSymbols);\n    function getSupportedFtsos() external view returns (IIFtso[] memory _ftsos);\n    function getFtsoIndex(\n        string memory _symbol\n    ) external view returns (uint256 _assetIndex);\n    function getFtsoSymbol(\n        uint256 _ftsoIndex\n    ) external view returns (string memory _symbol);\n    function getCurrentPrice(\n        uint256 _ftsoIndex\n    ) external view returns (uint256 _price, uint256 _timestamp);\n    function getCurrentPrice(\n        string memory _symbol\n    ) external view returns (uint256 _price, uint256 _timestamp);\n    function getCurrentPriceWithDecimals(\n        uint256 _assetIndex\n    )\n        external\n        view\n        returns (\n            uint256 _price,\n            uint256 _timestamp,\n            uint256 _assetPriceUsdDecimals\n        );\n    function getCurrentPriceWithDecimals(\n        string memory _symbol\n    )\n        external\n        view\n        returns (\n            uint256 _price,\n            uint256 _timestamp,\n            uint256 _assetPriceUsdDecimals\n        );\n\n    function getAllCurrentPrices() external view returns (PriceInfo[] memory);\n    function getCurrentPricesByIndices(\n        uint256[] memory _indices\n    ) external view returns (PriceInfo[] memory);\n    function getCurrentPricesBySymbols(\n        string[] memory _symbols\n    ) external view returns (PriceInfo[] memory);\n\n    function getSupportedIndicesAndFtsos()\n        external\n        view\n        returns (uint256[] memory _supportedIndices, IIFtso[] memory _ftsos);\n\n    function getSupportedSymbolsAndFtsos()\n        external\n        view\n        returns (string[] memory _supportedSymbols, IIFtso[] memory _ftsos);\n\n    function getSupportedIndicesAndSymbols()\n        external\n        view\n        returns (\n            uint256[] memory _supportedIndices,\n            string[] memory _supportedSymbols\n        );\n\n    function getSupportedIndicesSymbolsAndFtsos()\n        external\n        view\n        returns (\n            uint256[] memory _supportedIndices,\n            string[] memory _supportedSymbols,\n            IIFtso[] memory _ftsos\n        );\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IFtsoRewardManager.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\ninterface IFtsoRewardManager {\n    event RewardClaimed(\n        address indexed dataProvider,\n        address indexed whoClaimed,\n        address indexed sentTo,\n        uint256 rewardEpoch,\n        uint256 amount\n    );\n\n    event UnearnedRewardsAccrued(uint256 epochId, uint256 reward);\n\n    event RewardsDistributed(\n        address indexed ftso,\n        uint256 epochId,\n        address[] addresses,\n        uint256[] rewards\n    );\n\n    event RewardClaimsEnabled(uint256 rewardEpochId);\n\n    event FeePercentageChanged(\n        address indexed dataProvider,\n        uint256 value,\n        uint256 validFromEpoch\n    );\n\n    event RewardClaimsExpired(uint256 rewardEpochId);\n\n    event FtsoRewardManagerActivated(address ftsoRewardManager);\n    event FtsoRewardManagerDeactivated(address ftsoRewardManager);\n\n    /**\n     * @notice Allows a percentage delegator to claim rewards.\n     * @notice This function is intended to be used to claim rewards in case of delegation by percentage.\n     * @param _recipient            address to transfer funds to\n     * @param _rewardEpochs         array of reward epoch numbers to claim for\n     * @return _rewardAmount        amount of total claimed rewards\n     * @dev Reverts if `msg.sender` is delegating by amount\n     * @dev Claims for all unclaimed reward epochs to the 'max(_rewardEpochs)'.\n     * @dev Retained for backward compatibility.\n     * @dev This function is deprecated - use `claim` instead.\n     */\n    function claimReward(\n        address payable _recipient,\n        uint256[] calldata _rewardEpochs\n    ) external returns (uint256 _rewardAmount);\n\n    /**\n     * @notice Allows the sender to claim or wrap rewards for reward owner.\n     * @notice This function is intended to be used to claim rewards in case of delegation by percentage.\n     * @notice The caller does not have to be the owner, but must be approved by the owner to claim on his behalf,\n     *   this approval is done by calling `setClaimExecutors`.\n     * @notice It is actually safe for this to be called by anybody (nothing can be stolen), but by limiting who can\n     *   call, we allow the owner to control the timing of the calls.\n     * @notice Reward owner can claim to any `_recipient`, while the executor can only claim to the reward owner,\n     *   reward owners's personal delegation account or one of the addresses set by `setAllowedClaimRecipients`.\n     * @param _rewardOwner          address of the reward owner\n     * @param _recipient            address to transfer funds to\n     * @param _rewardEpoch          last reward epoch to claim for\n     * @param _wrap                 should reward be wrapped immediately\n     * @return _rewardAmount        amount of total claimed rewards\n     * @dev Reverts if `msg.sender` is delegating by amount\n     */\n    function claim(\n        address _rewardOwner,\n        address payable _recipient,\n        uint256 _rewardEpoch,\n        bool _wrap\n    ) external returns (uint256 _rewardAmount);\n\n    /**\n     * @notice Allows the sender to claim rewards from specified data providers.\n     * @notice This function is intended to be used to claim rewards in case of delegation by amount.\n     * @param _recipient            address to transfer funds to\n     * @param _rewardEpochs         array of reward epoch numbers to claim for\n     * @param _dataProviders        array of addresses representing data providers to claim the reward from\n     * @return _rewardAmount        amount of total claimed rewards\n     * @dev Function can only be used for explicit delegations.\n     * @dev This function is deprecated - use `claimFromDataProviders` instead.\n     */\n    function claimRewardFromDataProviders(\n        address payable _recipient,\n        uint256[] calldata _rewardEpochs,\n        address[] calldata _dataProviders\n    ) external returns (uint256 _rewardAmount);\n\n    /**\n     * @notice Allows the sender to claim or wrap rewards for reward owner from specified data providers.\n     * @notice This function is intended to be used to claim rewards in case of delegation by amount.\n     * @notice The caller does not have to be the owner, but must be approved by the owner to claim on his behalf,\n     *   this approval is done by calling `setClaimExecutors`.\n     * @notice It is actually safe for this to be called by anybody (nothing can be stolen), but by limiting who can\n     *   call, we allow the owner to control the timing of the calls.\n     * @notice Reward owner can claim to any `_recipient`, while the executor can only claim to the reward owner,\n     *   reward owners's personal delegation account or one of the addresses set by `setAllowedClaimRecipients`.\n     * @param _rewardOwner          address of the reward owner\n     * @param _recipient            address to transfer funds to\n     * @param _rewardEpochs         array of reward epoch numbers to claim for\n     * @param _dataProviders        array of addresses representing data providers to claim the reward from\n     * @param _wrap                 should reward be wrapped immediately\n     * @return _rewardAmount        amount of total claimed rewards\n     * @dev Function can only be used for explicit delegations.\n     */\n    function claimFromDataProviders(\n        address _rewardOwner,\n        address payable _recipient,\n        uint256[] calldata _rewardEpochs,\n        address[] calldata _dataProviders,\n        bool _wrap\n    ) external returns (uint256 _rewardAmount);\n\n    /**\n     * @notice Allows batch claiming for the list of '_rewardOwners' and for all unclaimed epochs <= '_rewardEpoch'.\n     * @notice If reward owner has enabled delegation account, rewards are also claimed for that delegation account and\n     *   total claimed amount is sent to that delegation account, otherwise claimed amount is sent to owner's account.\n     * @notice Claimed amount is automatically wrapped.\n     * @notice Method can be used by reward owner or executor. If executor is registered with fee > 0,\n     *   then fee is paid to executor for each claimed address from the list.\n     * @param _rewardOwners         list of reward owners to claim for\n     * @param _rewardEpoch          last reward epoch to claim for\n     */\n    function autoClaim(\n        address[] calldata _rewardOwners,\n        uint256 _rewardEpoch\n    ) external;\n\n    /**\n     * @notice Allows data provider to set (or update last) fee percentage.\n     * @param _feePercentageBIPS    number representing fee percentage in BIPS\n     * @return _validFromEpoch      reward epoch number when the setting becomes effective.\n     */\n    function setDataProviderFeePercentage(\n        uint256 _feePercentageBIPS\n    ) external returns (uint256 _validFromEpoch);\n\n    /**\n     * @notice Allows reward claiming\n     */\n    function active() external view returns (bool);\n\n    /**\n     * @notice Returns the current fee percentage of `_dataProvider`\n     * @param _dataProvider         address representing data provider\n     */\n    function getDataProviderCurrentFeePercentage(\n        address _dataProvider\n    ) external view returns (uint256 _feePercentageBIPS);\n\n    /**\n     * @notice Returns the fee percentage of `_dataProvider` at `_rewardEpoch`\n     * @param _dataProvider         address representing data provider\n     * @param _rewardEpoch          reward epoch number\n     */\n    function getDataProviderFeePercentage(\n        address _dataProvider,\n        uint256 _rewardEpoch\n    ) external view returns (uint256 _feePercentageBIPS);\n\n    /**\n     * @notice Returns the scheduled fee percentage changes of `_dataProvider`\n     * @param _dataProvider         address representing data provider\n     * @return _feePercentageBIPS   positional array of fee percentages in BIPS\n     * @return _validFromEpoch      positional array of block numbers the fee settings are effective from\n     * @return _fixed               positional array of boolean values indicating if settings are subjected to change\n     */\n    function getDataProviderScheduledFeePercentageChanges(\n        address _dataProvider\n    )\n        external\n        view\n        returns (\n            uint256[] memory _feePercentageBIPS,\n            uint256[] memory _validFromEpoch,\n            bool[] memory _fixed\n        );\n\n    /**\n     * @notice Returns information on epoch reward\n     * @param _rewardEpoch          reward epoch number\n     * @return _totalReward         number representing the total epoch reward\n     * @return _claimedReward       number representing the amount of total epoch reward that has been claimed\n     */\n    function getEpochReward(\n        uint256 _rewardEpoch\n    ) external view returns (uint256 _totalReward, uint256 _claimedReward);\n\n    /**\n     * @notice Returns the state of rewards for `_beneficiary` at `_rewardEpoch`\n     * @param _beneficiary          address of reward beneficiary\n     * @param _rewardEpoch          reward epoch number\n     * @return _dataProviders       positional array of addresses representing data providers\n     * @return _rewardAmounts       positional array of reward amounts\n     * @return _claimed             positional array of boolean values indicating if reward is claimed\n     * @return _claimable           boolean value indicating if rewards are claimable\n     * @dev Reverts when queried with `_beneficiary` delegating by amount\n     */\n    function getStateOfRewards(\n        address _beneficiary,\n        uint256 _rewardEpoch\n    )\n        external\n        view\n        returns (\n            address[] memory _dataProviders,\n            uint256[] memory _rewardAmounts,\n            bool[] memory _claimed,\n            bool _claimable\n        );\n\n    /**\n     * @notice Returns the state of rewards for `_beneficiary` at `_rewardEpoch` from `_dataProviders`\n     * @param _beneficiary          address of reward beneficiary\n     * @param _rewardEpoch          reward epoch number\n     * @param _dataProviders        positional array of addresses representing data providers\n     * @return _rewardAmounts       positional array of reward amounts\n     * @return _claimed             positional array of boolean values indicating if reward is claimed\n     * @return _claimable           boolean value indicating if rewards are claimable\n     */\n    function getStateOfRewardsFromDataProviders(\n        address _beneficiary,\n        uint256 _rewardEpoch,\n        address[] calldata _dataProviders\n    )\n        external\n        view\n        returns (\n            uint256[] memory _rewardAmounts,\n            bool[] memory _claimed,\n            bool _claimable\n        );\n\n    /**\n     * @notice Returns the start and the end of the reward epoch range for which the reward is claimable\n     * @param _startEpochId         the oldest epoch id that allows reward claiming\n     * @param _endEpochId           the newest epoch id that allows reward claiming\n     */\n    function getEpochsWithClaimableRewards()\n        external\n        view\n        returns (uint256 _startEpochId, uint256 _endEpochId);\n\n    /**\n     * @notice Returns the next claimable reward epoch for '_rewardOwner'.\n     * @param _rewardOwner          address of the reward owner\n     */\n    function nextClaimableRewardEpoch(\n        address _rewardOwner\n    ) external view returns (uint256);\n\n    /**\n     * @notice Returns the array of claimable epoch ids for which the reward has not yet been claimed\n     * @param _beneficiary          address of reward beneficiary\n     * @return _epochIds            array of epoch ids\n     * @dev Reverts when queried with `_beneficiary` delegating by amount\n     */\n    function getEpochsWithUnclaimedRewards(\n        address _beneficiary\n    ) external view returns (uint256[] memory _epochIds);\n\n    /**\n     * @notice Returns the information on claimed reward of `_dataProvider` for `_rewardEpoch` by `_claimer`\n     * @param _rewardEpoch          reward epoch number\n     * @param _dataProvider         address representing the data provider\n     * @param _claimer              address representing the claimer\n     * @return _claimed             boolean indicating if reward has been claimed\n     * @return _amount              number representing the claimed amount\n     */\n    function getClaimedReward(\n        uint256 _rewardEpoch,\n        address _dataProvider,\n        address _claimer\n    ) external view returns (bool _claimed, uint256 _amount);\n\n    /**\n     * @notice Return reward epoch that will expire, when new reward epoch will start\n     * @return Reward epoch id that will expire next\n     */\n    function getRewardEpochToExpireNext() external view returns (uint256);\n\n    /**\n     * @notice Return reward epoch vote power block\n     * @param _rewardEpoch          reward epoch number\n     */\n    function getRewardEpochVotePowerBlock(\n        uint256 _rewardEpoch\n    ) external view returns (uint256);\n\n    /**\n     * @notice Return current reward epoch number\n     */\n    function getCurrentRewardEpoch() external view returns (uint256);\n\n    /**\n     * @notice Return initial reward epoch number\n     */\n    function getInitialRewardEpoch() external view returns (uint256);\n\n    /**\n     * @notice Returns the information on rewards and initial vote power of `_dataProvider` for `_rewardEpoch`\n     * @param _rewardEpoch                      reward epoch number\n     * @param _dataProvider                     address representing the data provider\n     * @return _rewardAmount                    number representing the amount of rewards\n     * @return _votePowerIgnoringRevocation     number representing the vote power ignoring revocations\n     */\n    function getDataProviderPerformanceInfo(\n        uint256 _rewardEpoch,\n        address _dataProvider\n    )\n        external\n        view\n        returns (uint256 _rewardAmount, uint256 _votePowerIgnoringRevocation);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IFtsoRewardOffersManager.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * FtsoRewardOffersManager interface.\n */\ninterface IFtsoRewardOffersManager {\n    /**\n     * Defines a reward offer.\n     */\n    struct Offer {\n        // amount (in wei) of reward in native coin\n        uint120 amount;\n        // feed id - i.e. category + base/quote symbol\n        bytes21 feedId;\n        // minimal reward eligibility turnout threshold in BIPS (basis points)\n        uint16 minRewardedTurnoutBIPS;\n        // primary band reward share in PPM (parts per million)\n        uint24 primaryBandRewardSharePPM;\n        // secondary band width in PPM (parts per million) in relation to the median\n        uint24 secondaryBandWidthPPM;\n        // address that can claim undistributed part of the reward (or burn address)\n        address claimBackAddress;\n    }\n\n    /// Event emitted when the minimal rewards offer value is set.\n    event MinimalRewardsOfferValueSet(uint256 valueWei);\n\n    /// Event emitted when a reward offer is received.\n    event RewardsOffered(\n        // reward epoch id\n        uint24 indexed rewardEpochId,\n        // feed id - i.e. category + base/quote symbol\n        bytes21 feedId,\n        // number of decimals (negative exponent)\n        int8 decimals,\n        // amount (in wei) of reward in native coin\n        uint256 amount,\n        // minimal reward eligibility turnout threshold in BIPS (basis points)\n        uint16 minRewardedTurnoutBIPS,\n        // primary band reward share in PPM (parts per million)\n        uint24 primaryBandRewardSharePPM,\n        // secondary band width in PPM (parts per million) in relation to the median\n        uint24 secondaryBandWidthPPM,\n        // address that can claim undistributed part of the reward (or burn address)\n        address claimBackAddress\n    );\n\n    /// Event emitted when inflation rewards are offered.\n    event InflationRewardsOffered(\n        // reward epoch id\n        uint24 indexed rewardEpochId,\n        // feed ids - i.e. category + base/quote symbols - multiple of 21 (one feedId is bytes21)\n        bytes feedIds,\n        // decimals encoded to - multiple of 1 (int8)\n        bytes decimals,\n        // amount (in wei) of reward in native coin\n        uint256 amount,\n        // minimal reward eligibility turnout threshold in BIPS (basis points)\n        uint16 minRewardedTurnoutBIPS,\n        // primary band reward share in PPM (parts per million)\n        uint24 primaryBandRewardSharePPM,\n        // secondary band width in PPM (parts per million) in relation to the median - multiple of 3 (uint24)\n        bytes secondaryBandWidthPPMs,\n        // rewards split mode (0 means equally, 1 means random,...)\n        uint16 mode\n    );\n\n    /**\n     * Allows community to offer rewards.\n     * @param _nextRewardEpochId The next reward epoch id.\n     * @param _offers The list of offers.\n     */\n    function offerRewards(\n        uint24 _nextRewardEpochId,\n        Offer[] calldata _offers\n    ) external payable;\n\n    /**\n     * Minimal rewards offer value (in wei).\n     */\n    function minimalRewardsOfferValueWei() external view returns (uint256);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IGovernanceSettings.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * A special contract that holds Flare governance address.\n * This contract enables updating governance address and timelock only by hard forking the network,\n * meaning only by updating validator code.\n */\ninterface IGovernanceSettings {\n    /**\n     * Get the governance account address.\n     * The governance address can only be changed by a hardfork.\n     */\n    function getGovernanceAddress() external view returns (address);\n\n    /**\n     * Get the time in seconds that must pass between a governance call and execution.\n     * The timelock value can only be changed by a hardfork.\n     */\n    function getTimelock() external view returns (uint256);\n\n    /**\n     * Get the addresses of the accounts that are allowed to execute the timelocked governance calls\n     * once the timelock period expires.\n     * Executors can be changed without a hardfork, via a normal governance call.\n     */\n    function getExecutors() external view returns (address[] memory);\n\n    /**\n     * Check whether an address is one of the executors.\n     */\n    function isExecutor(address _address) external view returns (bool);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IGovernanceVotePower.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * Interface for contracts delegating their governance vote power.\n */\ninterface IGovernanceVotePower {\n    /**\n     * Delegates all governance vote power of `msg.sender` to address `_to`.\n     * @param _to The address of the recipient.\n     */\n    function delegate(address _to) external;\n\n    /**\n     * Undelegates all governance vote power of `msg.sender`.\n     */\n    function undelegate() external;\n\n    /**\n     * Gets the governance vote power of an address at a given block number, including\n     * all delegations made to it.\n     * @param _who The address being queried.\n     * @param _blockNumber The block number at which to fetch the vote power.\n     * @return Governance vote power of `_who` at `_blockNumber`.\n     */\n    function votePowerOfAt(\n        address _who,\n        uint256 _blockNumber\n    ) external view returns (uint256);\n\n    /**\n     * Gets the governance vote power of an address at the latest block, including\n     * all delegations made to it.\n     * @param _who The address being queried.\n     * @return Governance vote power of `account` at the lastest block.\n     */\n    function getVotes(address _who) external view returns (uint256);\n\n    /**\n     * Gets the address an account is delegating its governance vote power to, at a given block number.\n     * @param _who The address being queried.\n     * @param _blockNumber The block number at which to fetch the address.\n     * @return Address where `_who` was delegating its governance vote power at block `_blockNumber`.\n     */\n    function getDelegateOfAt(\n        address _who,\n        uint256 _blockNumber\n    ) external view returns (address);\n\n    /**\n     * Gets the address an account is delegating its governance vote power to, at the latest block number.\n     * @param _who The address being queried.\n     * @return Address where `_who` is currently delegating its governance vote power.\n     */\n    function getDelegateOfAtNow(address _who) external view returns (address);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IIncreaseManager.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * Increase manager interface.\n */\ninterface IIncreaseManager {\n    function getIncentiveDuration() external view returns (uint256);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IJsonApi.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * @custom:name IJsonApi\n * @custom:supported WEB2\n * @author Flare\n * @notice An attestation request that fetches data from the given url and then edits the information with a\n * jq transformation.\n * @custom:verification  Data is fetched from an url `url`. The received data is then processed with jq as\n * the `postprocessJq` states. The structure of the final json is written in the `abi_signature`.\n *\n * The response contains an abi encoding of the final data.\n * @custom:lut `0xffffffffffffffff`\n * @custom:lut-limit `0xffffffffffffffff`\n */\ninterface IJsonApi {\n    /**\n     * @notice Toplevel request\n     * @param attestationType ID of the attestation type.\n     * @param sourceId ID of the data source.\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined\n     * by the `attestationType`.\n     */\n    struct Request {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        bytes32 messageIntegrityCode;\n        RequestBody requestBody;\n    }\n\n    /**\n     * @notice Toplevel response\n     * @param attestationType Extracted from the request.\n     * @param sourceId Extracted from the request.\n     * @param votingRound The ID of the State Connector round in which the request was considered.\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n     * @param requestBody Extracted from the request.\n     * @param responseBody Data defining the response. The verification rules for the construction\n     * of the response body and the type are defined per specific `attestationType`.\n     */\n    struct Response {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        uint64 votingRound;\n        uint64 lowestUsedTimestamp;\n        RequestBody requestBody;\n        ResponseBody responseBody;\n    }\n\n    /**\n     * @notice Toplevel proof\n     * @param merkleProof Merkle proof corresponding to the attestation response.\n     * @param data Attestation response.\n     */\n    struct Proof {\n        bytes32[] merkleProof;\n        Response data;\n    }\n\n    /**\n     * @notice Request body for Payment attestation type\n     * @param url URL of the data source\n     * @param postprocessJq jq filter to postprocess the data\n     * @param abi_signature ABI signature of the data\n     */\n    struct RequestBody {\n        string url;\n        string postprocessJq;\n        string abi_signature;\n    }\n\n    /**\n     * @notice Response body for Payment attestation type\n     * @param abi_encoded_data ABI encoded data\n     */\n    struct ResponseBody {\n        bytes abi_encoded_data;\n    }\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IJsonApiVerification.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"./IJsonApi.sol\";\n\ninterface IJsonApiVerification {\n    function verifyJsonApi(\n        IJsonApi.Proof calldata _proof\n    ) external view returns (bool _proved);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IPayment.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * @custom:name IPayment\n * @custom:id 0x01\n * @custom:supported BTC, DOGE, XRP\n * @author Flare\n * @notice A relay of a transaction on an external chain that is considered a payment in a native currency.\n * Various blockchains support different types of native payments. For each blockchain, it is specified how a payment\n * transaction should be formed to be provable by this attestation type.\n * The provable payments emulate traditional banking payments from entity A to entity B in native currency with an\n * optional payment reference.\n * @custom:verification The transaction with `transactionId` is fetched from the API of the blockchain node or\n * relevant indexer.\n * If the transaction cannot be fetched or the transaction is in a block that does not have a sufficient\n * [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected.\n *\n * Once the transaction is received, the payment summary is computed according to the rules for the source chain.\n * If the summary is successfully calculated, the response is assembled from the summary.\n * `blockNumber` and `blockTimestamp` are retrieved from the block if they are not included in the transaction data.\n * For Bitcoin and Dogecoin, `blockTimestamp` is mediantime of the block.\n * For XRPL, `blockTimestamp` is close time of the ledger converted to UNIX time.\n *\n * If the summary is not successfully calculated, the attestation request is rejected.\n * @custom:lut `blockTimestamp`\n * @custom:lutlimit `0x127500`, `0x127500`, `0x127500`\n */\ninterface IPayment {\n    /**\n     * @notice Toplevel request\n     * @param attestationType ID of the attestation type.\n     * @param sourceId ID of the data source.\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined\n     * by the `attestationType`.\n     */\n    struct Request {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        bytes32 messageIntegrityCode;\n        RequestBody requestBody;\n    }\n\n    /**\n     * @notice Toplevel response\n     * @param attestationType Extracted from the request.\n     * @param sourceId Extracted from the request.\n     * @param votingRound The ID of the State Connector round in which the request was considered.\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n     * @param requestBody Extracted from the request.\n     * @param responseBody Data defining the response. The verification rules for the construction\n     * of the response body and the type are defined per specific `attestationType`.\n     */\n    struct Response {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        uint64 votingRound;\n        uint64 lowestUsedTimestamp;\n        RequestBody requestBody;\n        ResponseBody responseBody;\n    }\n\n    /**\n     * @notice Toplevel proof\n     * @param merkleProof Merkle proof corresponding to the attestation response.\n     * @param data Attestation response.\n     */\n    struct Proof {\n        bytes32[] merkleProof;\n        Response data;\n    }\n\n    /**\n     * @notice Request body for Payment attestation type\n     * @param transactionId ID of the payment transaction.\n     * @param inUtxo For UTXO chains, this is the index of the transaction input with source address.\n     * Always 0 for the non-utxo chains.\n     * @param utxo For UTXO chains, this is the index of the transaction output with receiving address.\n     * Always 0 for the non-utxo chains.\n     */\n    struct RequestBody {\n        bytes32 transactionId;\n        uint256 inUtxo;\n        uint256 utxo;\n    }\n\n    /**\n     * @notice Response body for Payment attestation type\n     * @param blockNumber Number of the block in which the transaction is included.\n     * @param blockTimestamp The timestamp of the block in which the transaction is included.\n     * @param sourceAddressHash Standard address hash of the source address.\n     * @param sourceAddressesRoot The root of the Merkle tree of the source addresses.\n     * @param receivingAddressHash Standard address hash of the receiving address.\n     * The zero 32-byte string if there is no receivingAddress (if `status` is not success).\n     * @param intendedReceivingAddressHash Standard address hash of the intended receiving address.\n     * Relevant if the transaction is unsuccessful.\n     * @param spentAmount Amount in minimal units spent by the source address.\n     * @param intendedSpentAmount Amount in minimal units to be spent by the source address.\n     * Relevant if the transaction status is unsuccessful.\n     * @param receivedAmount Amount in minimal units received by the receiving address.\n     * @param intendedReceivedAmount Amount in minimal units intended to be received by the receiving address.\n     * Relevant if the transaction is unsuccessful.\n     * @param standardPaymentReference Standard payment reference of the transaction.\n     * @param oneToOne Indicator whether only one source and one receiver are involved in the transaction.\n     * @param status Succes status of the transaction: 0 - success, 1 - failed by sender's fault,\n     * 2 - failed by receiver's fault.\n     */\n    struct ResponseBody {\n        uint64 blockNumber;\n        uint64 blockTimestamp;\n        bytes32 sourceAddressHash;\n        bytes32 sourceAddressesRoot;\n        bytes32 receivingAddressHash;\n        bytes32 intendedReceivingAddressHash;\n        int256 spentAmount;\n        int256 intendedSpentAmount;\n        int256 receivedAmount;\n        int256 intendedReceivedAmount;\n        bytes32 standardPaymentReference;\n        bool oneToOne;\n        uint8 status;\n    }\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IPaymentVerification.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"./IPayment.sol\";\n\ninterface IPaymentVerification {\n    function verifyPayment(\n        IPayment.Proof calldata _proof\n    ) external view returns (bool _proved);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IPChainStakeMirror.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\npragma abicoder v2;\n\nimport \"./IPChainVotePower.sol\";\nimport \"./IPChainStakeMirrorVerifier.sol\";\n\n/**\n * Interface for the `PChainStakeMirror` contract.\n */\ninterface IPChainStakeMirror is IPChainVotePower {\n    /**\n     * Event emitted when max updates per block is set.\n     * @param maxUpdatesPerBlock new number of max updated per block\n     */\n    event MaxUpdatesPerBlockSet(uint256 maxUpdatesPerBlock);\n\n    /**\n     * Event emitted when the stake is confirmed.\n     * @param owner The address who opened the stake.\n     * @param nodeId Node id to which the stake was added.\n     * @param txHash Unique tx hash - keccak256(abi.encode(PChainStake.txId, PChainStake.inputAddress));\n     * @param amountWei Stake amount (in wei).\n     * @param pChainTxId P-chain transaction id.\n     */\n    event StakeConfirmed(\n        address indexed owner,\n        bytes20 indexed nodeId,\n        bytes32 indexed txHash,\n        uint256 amountWei,\n        bytes32 pChainTxId\n    );\n\n    /**\n     * Event emitted when the stake has ended.\n     * @param owner The address whose stake has ended.\n     * @param nodeId Node id from which the stake was removed.\n     * @param txHash Unique tx hash - keccak256(abi.encode(PChainStake.txId, PChainStake.inputAddress));\n     * @param amountWei Stake amount (in wei).\n     */\n    event StakeEnded(\n        address indexed owner,\n        bytes20 indexed nodeId,\n        bytes32 indexed txHash,\n        uint256 amountWei\n    );\n\n    /**\n     * Event emitted when the stake was revoked.\n     * @param owner The address whose stake has ended.\n     * @param nodeId Node id from which the stake was removed.\n     * @param txHash Unique tx hash - keccak256(abi.encode(PChainStake.txId, PChainStake.inputAddress));\n     * @param amountWei Stake amount (in wei).\n     */\n    event StakeRevoked(\n        address indexed owner,\n        bytes20 indexed nodeId,\n        bytes32 indexed txHash,\n        uint256 amountWei\n    );\n\n    /**\n     * Method for P-chain stake mirroring using `PChainStake` data and Merkle proof.\n     * @param _stakeData Information about P-chain stake.\n     * @param _merkleProof Merkle proof that should be used to prove the P-chain stake.\n     */\n    function mirrorStake(\n        IPChainStakeMirrorVerifier.PChainStake calldata _stakeData,\n        bytes32[] calldata _merkleProof\n    ) external;\n\n    /**\n     * Method for checking if active stake (stake start time <= block.timestamp < stake end time) was already mirrored.\n     * @param _txId P-chain stake transaction id.\n     * @param _inputAddress P-chain address that opened stake.\n     * @return True if stake is active and mirrored.\n     */\n    function isActiveStakeMirrored(\n        bytes32 _txId,\n        bytes20 _inputAddress\n    ) external view returns (bool);\n\n    /**\n     * Total amount of tokens at current block.\n     * @return The current total amount of tokens.\n     **/\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * Total amount of tokens at a specific `_blockNumber`.\n     * @param _blockNumber The block number when the totalSupply is queried.\n     * @return The total amount of tokens at `_blockNumber`.\n     **/\n    function totalSupplyAt(uint _blockNumber) external view returns (uint256);\n\n    /**\n     * Queries the token balance of `_owner` at current block.\n     * @param _owner The address from which the balance will be retrieved.\n     * @return The current balance.\n     **/\n    function balanceOf(address _owner) external view returns (uint256);\n\n    /**\n     * Queries the token balance of `_owner` at a specific `_blockNumber`.\n     * @param _owner The address from which the balance will be retrieved.\n     * @param _blockNumber The block number when the balance is queried.\n     * @return The balance at `_blockNumber`.\n     **/\n    function balanceOfAt(\n        address _owner,\n        uint _blockNumber\n    ) external view returns (uint256);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IPChainStakeMirrorVerifier.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\npragma abicoder v2;\n\n/**\n * Interface with structure for P-chain stake mirror verifications.\n */\ninterface IPChainStakeMirrorVerifier {\n    /**\n     * Structure describing the P-chain stake.\n     */\n    struct PChainStake {\n        // Hash of the transaction on the underlying chain.\n        bytes32 txId;\n        // Type of the staking/delegation transaction: '0' for 'ADD_VALIDATOR_TX' and '1' for 'ADD_DELEGATOR_TX'.\n        uint8 stakingType;\n        // Input address that triggered the staking or delegation transaction.\n        // See https://support.avax.network/en/articles/4596397-what-is-an-address for address definition for P-chain.\n        bytes20 inputAddress;\n        // NodeID to which staking or delegation is done.\n        // For definitions, see https://github.com/ava-labs/avalanchego/blob/master/ids/node_id.go.\n        bytes20 nodeId;\n        // Start time of the staking/delegation in seconds (Unix epoch).\n        uint64 startTime;\n        // End time of the staking/delegation in seconds (Unix epoch).\n        uint64 endTime;\n        // Staked or delegated amount in Gwei (nano FLR).\n        uint64 weight;\n    }\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IPChainVotePower.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * Interface for the vote power part of the `PChainStakeMirror` contract.\n */\ninterface IPChainVotePower {\n    /**\n     * Event triggered when a stake is confirmed or at the time it ends.\n     * Definition: `votePowerFromTo(owner, nodeId)` is `changed` from `priorVotePower` to `newVotePower`.\n     * @param owner The account that has changed the amount of vote power it is staking.\n     * @param nodeId The node id whose received vote power has changed.\n     * @param priorVotePower The vote power originally on that node id.\n     * @param newVotePower The new vote power that triggered this event.\n     */\n    event VotePowerChanged(\n        address indexed owner,\n        bytes20 indexed nodeId,\n        uint256 priorVotePower,\n        uint256 newVotePower\n    );\n\n    /**\n     * Emitted when a vote power cache entry is created.\n     * Allows history cleaners to track vote power cache cleanup opportunities off-chain.\n     * @param nodeId The node id whose vote power has just been cached.\n     * @param blockNumber The block number at which the vote power has been cached.\n     */\n    event VotePowerCacheCreated(bytes20 nodeId, uint256 blockNumber);\n\n    /**\n     * Get the vote power of `_owner` at block `_blockNumber` using cache.\n     *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\n     *   Can only be used if _blockNumber is in the past, otherwise reverts.\n     * @param _owner The node id to get voting power.\n     * @param _blockNumber The block number at which to fetch.\n     * @return Vote power of `_owner` at `_blockNumber`.\n     */\n    function votePowerOfAtCached(\n        bytes20 _owner,\n        uint256 _blockNumber\n    ) external returns (uint256);\n\n    /**\n     * Get the total vote power at block `_blockNumber` using cache.\n     *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\n     *   Can only be used if `_blockNumber` is in the past, otherwise reverts.\n     * @param _blockNumber The block number at which to fetch.\n     * @return The total vote power at the block (sum of all accounts' vote powers).\n     */\n    function totalVotePowerAtCached(\n        uint256 _blockNumber\n    ) external returns (uint256);\n\n    /**\n     * Get the current total vote power.\n     * @return The current total vote power (sum of all accounts' vote powers).\n     */\n    function totalVotePower() external view returns (uint256);\n\n    /**\n     * Get the total vote power at block `_blockNumber`\n     * @param _blockNumber The block number at which to fetch.\n     * @return The total vote power at the block  (sum of all accounts' vote powers).\n     */\n    function totalVotePowerAt(\n        uint _blockNumber\n    ) external view returns (uint256);\n\n    /**\n     * Get the amounts and node ids being staked to by a vote power owner.\n     * @param _owner The address being queried.\n     * @return _nodeIds Array of node ids.\n     * @return _amounts Array of staked amounts, for each node id.\n     */\n    function stakesOf(\n        address _owner\n    )\n        external\n        view\n        returns (bytes20[] memory _nodeIds, uint256[] memory _amounts);\n\n    /**\n     * Get the amounts and node ids being staked to by a vote power owner,\n     * at a given block.\n     * @param _owner The address being queried.\n     * @param _blockNumber The block number being queried.\n     * @return _nodeIds Array of node ids.\n     * @return _amounts Array of staked amounts, for each node id.\n     */\n    function stakesOfAt(\n        address _owner,\n        uint256 _blockNumber\n    )\n        external\n        view\n        returns (bytes20[] memory _nodeIds, uint256[] memory _amounts);\n\n    /**\n     * Get the current vote power of `_nodeId`.\n     * @param _nodeId The node id to get voting power.\n     * @return Current vote power of `_nodeId`.\n     */\n    function votePowerOf(bytes20 _nodeId) external view returns (uint256);\n\n    /**\n     * Get the vote power of `_nodeId` at block `_blockNumber`\n     * @param _nodeId The node id to get voting power.\n     * @param _blockNumber The block number at which to fetch.\n     * @return Vote power of `_nodeId` at `_blockNumber`.\n     */\n    function votePowerOfAt(\n        bytes20 _nodeId,\n        uint256 _blockNumber\n    ) external view returns (uint256);\n\n    /**\n     * Get current staked vote power from `_owner` staked to `_nodeId`.\n     * @param _owner Address of vote power owner.\n     * @param _nodeId Node id.\n     * @return The staked vote power.\n     */\n    function votePowerFromTo(\n        address _owner,\n        bytes20 _nodeId\n    ) external view returns (uint256);\n\n    /**\n     * Get current staked vote power from `_owner` staked to `_nodeId` at `_blockNumber`.\n     * @param _owner Address of vote power owner.\n     * @param _nodeId Node id.\n     * @param _blockNumber The block number at which to fetch.\n     * @return The staked vote power.\n     */\n    function votePowerFromToAt(\n        address _owner,\n        bytes20 _nodeId,\n        uint _blockNumber\n    ) external view returns (uint256);\n\n    /**\n     * Return vote powers for several node ids in a batch.\n     * @param _nodeIds The list of node ids to fetch vote power of.\n     * @param _blockNumber The block number at which to fetch.\n     * @return A list of vote powers.\n     */\n    function batchVotePowerOfAt(\n        bytes20[] memory _nodeIds,\n        uint256 _blockNumber\n    ) external view returns (uint256[] memory);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IPriceSubmitter.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"./genesis/interfaces/IFtsoGenesis.sol\";\nimport \"./genesis/interfaces/IFtsoRegistryGenesis.sol\";\nimport \"./genesis/interfaces/IFtsoManagerGenesis.sol\";\n\ninterface IPriceSubmitter {\n    /**\n     * Event emitted when hash was submitted through PriceSubmitter.\n     * @param submitter the address of the sender\n     * @param epochId current price epoch id\n     * @param hash the submitted hash\n     * @param timestamp current block timestamp\n     */\n    event HashSubmitted(\n        address indexed submitter,\n        uint256 indexed epochId,\n        bytes32 hash,\n        uint256 timestamp\n    );\n\n    /**\n     * Event emitted when prices were revealed through PriceSubmitter.\n     * @param voter the address of the sender\n     * @param epochId id of the epoch in which the price hash was submitted\n     * @param ftsos array of ftsos that correspond to the indexes in the call\n     * @param prices the submitted prices\n     * @param timestamp current block timestamp\n     */\n    event PricesRevealed(\n        address indexed voter,\n        uint256 indexed epochId,\n        IFtsoGenesis[] ftsos,\n        uint256[] prices,\n        uint256 random,\n        uint256 timestamp\n    );\n\n    /**\n     * @notice Submits hash for current epoch\n     * @param _epochId              Target epoch id to which hash is submitted\n     * @param _hash                 Hash of ftso indices, prices, random number and voter address\n     * @notice Emits HashSubmitted event\n     */\n    function submitHash(uint256 _epochId, bytes32 _hash) external;\n\n    /**\n     * @notice Reveals submitted prices during epoch reveal period\n     * @param _epochId              Id of the epoch in which the price hashes was submitted\n     * @param _ftsoIndices          List of increasing ftso indices\n     * @param _prices               List of submitted prices in USD\n     * @param _random               Submitted random number\n     * @notice The hash of ftso indices, prices, random number and voter address must be equal to the submitted hash\n     * @notice Emits PricesRevealed event\n     */\n    function revealPrices(\n        uint256 _epochId,\n        uint256[] memory _ftsoIndices,\n        uint256[] memory _prices,\n        uint256 _random\n    ) external;\n\n    /**\n     * Returns bitmap of all ftso's for which `_voter` is allowed to submit prices/hashes.\n     * If voter is allowed to vote for ftso at index (see *_FTSO_INDEX), the corrsponding\n     * bit in the result will be 1.\n     */\n    function voterWhitelistBitmap(\n        address _voter\n    ) external view returns (uint256);\n\n    function getVoterWhitelister() external view returns (address);\n    function getFtsoRegistry() external view returns (IFtsoRegistryGenesis);\n    function getFtsoManager() external view returns (IFtsoManagerGenesis);\n\n    /**\n     * @notice Returns current random number\n     */\n    function getCurrentRandom() external view returns (uint256);\n\n    /**\n     * @notice Returns random number of the specified epoch\n     * @param _epochId              Id of the epoch\n     */\n    function getRandom(uint256 _epochId) external view returns (uint256);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IRandomProvider.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * Random provider interface.\n */\ninterface IRandomProvider {\n    /**\n     * Returns current random number. Method reverts if random number was not generated securely.\n     * @return _randomNumber Current random number.\n     */\n    function getCurrentRandom() external view returns (uint256 _randomNumber);\n\n    /**\n     * Returns current random number and a flag indicating if it was securely generated.\n     * It is up to the caller to decide whether to use the returned random number or not.\n     * @return _randomNumber Current random number.\n     * @return _isSecureRandom Indicates if current random number is secure.\n     */\n    function getCurrentRandomWithQuality()\n        external\n        view\n        returns (uint256 _randomNumber, bool _isSecureRandom);\n\n    /**\n     * Returns current random number, a flag indicating if it was securely generated and its timestamp.\n     * It is up to the caller to decide whether to use the returned random number or not.\n     * @return _randomNumber Current random number.\n     * @return _isSecureRandom Indicates if current random number is secure.\n     * @return _randomTimestamp Random timestamp.\n     */\n    function getCurrentRandomWithQualityAndTimestamp()\n        external\n        view\n        returns (\n            uint256 _randomNumber,\n            bool _isSecureRandom,\n            uint256 _randomTimestamp\n        );\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IRedemptionTimeExtension.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\ninterface IRedemptionTimeExtension {\n    function setRedemptionPaymentExtensionSeconds(uint256 _value) external;\n\n    function redemptionPaymentExtensionSeconds()\n        external\n        view\n        returns (uint256);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IReferencedPaymentNonexistence.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * @custom:name IReferencedPaymentNonexistence\n * @custom:id 0x04\n * @custom:supported BTC, DOGE, XRP\n * @author Flare\n * @notice Assertion that an agreed-upon payment has not been made by a certain deadline.\n * A confirmed request shows that a transaction meeting certain criteria (address, amount, reference)\n * did not appear in the specified block range.\n *\n *\n * This type of attestation can be used to e.g. provide grounds to liquidate funds locked by a smart\n * contract on Flare when a payment is missed.\n *\n * @custom:verification If `firstOverflowBlock` cannot be determined or does not have a sufficient\n * number of confirmations, the attestation request is rejected.\n * If `firstOverflowBlockNumber` is higher or equal to `minimalBlockNumber`, the request is rejected.\n * The search range are blocks between heights including `minimalBlockNumber` and excluding `firstOverflowBlockNumber`.\n * If the verifier does not have a view of all blocks from `minimalBlockNumber` to `firstOverflowBlockNumber`,\n * the attestation request is rejected.\n *\n * The request is confirmed if no transaction meeting the specified criteria is found in the search range.\n * The criteria and timestamp are chain specific.\n * ### UTXO (Bitcoin and Dogecoin)\n *\n *\n * Criteria for the transaction:\n *\n *\n * - It is not coinbase transaction.\n * - The transaction has the specified standardPaymentReference.\n * - The sum of values of all outputs with the specified address minus the sum of values of all inputs with\n * the specified address is greater than `amount` (in practice the sum of all values of the inputs with the\n * specified address is zero).\n *\n *\n * Timestamp is `mediantime`.\n * ### XRPL\n *\n *\n *\n * Criteria for the transaction:\n * - The transaction is of type payment.\n * - The transaction has the specified standardPaymentReference,\n * - One of the following is true:\n *   - Transaction status is `SUCCESS` and the amount received by the specified destination address is\n * greater than the specified `value`.\n *   - Transaction status is `RECEIVER_FAILURE` and the specified destination address would receive an\n * amount greater than the specified `value` had the transaction been successful.\n *\n *\n * Timestamp is `close_time` converted to UNIX time.\n *\n * @custom:lut `minimalBlockTimestamp`\n * @custom:lutlimit `0x127500`, `0x127500`, `0x127500`\n */\ninterface IReferencedPaymentNonexistence {\n    /**\n     * @notice Toplevel request\n     * @param attestationType ID of the attestation type.\n     * @param sourceId ID of the data source.\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response as defined.\n     * @param requestBody Data defining the request. Type and interpretation is determined by the `attestationType`.\n     */\n    struct Request {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        bytes32 messageIntegrityCode;\n        RequestBody requestBody;\n    }\n\n    /**\n     * @notice Toplevel response\n     * @param attestationType Extracted from the request.\n     * @param sourceId Extracted from the request.\n     * @param votingRound The ID of the State Connector round in which the request was considered.\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n     * @param requestBody Extracted from the request.\n     * @param responseBody Data defining the response. The verification rules for the construction of the response\n     * body and the type are defined per specific `attestationType`.\n     */\n    struct Response {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        uint64 votingRound;\n        uint64 lowestUsedTimestamp;\n        RequestBody requestBody;\n        ResponseBody responseBody;\n    }\n\n    /**\n     * @notice Toplevel proof\n     * @param merkleProof Merkle proof corresponding to the attestation response.\n     * @param data Attestation response.\n     */\n    struct Proof {\n        bytes32[] merkleProof;\n        Response data;\n    }\n\n    /**\n     * @notice Request body for ReferencePaymentNonexistence attestation type\n     * @param minimalBlockNumber The start block of the search range.\n     * @param deadlineBlockNumber The blockNumber to be included in the search range.\n     * @param deadlineTimestamp The timestamp to be included in the search range.\n     * @param destinationAddressHash The standard address hash of the address to which the payment had to be done.\n     * @param amount The requested amount in minimal units that had to be payed.\n     * @param standardPaymentReference The requested standard payment reference.\n     * @param checkSourceAddresses If true, the source address root is checked (only full match).\n     * @param sourceAddressesRoot The root of the Merkle tree of the source addresses.\n     * @custom:below The `standardPaymentReference` should not be zero (as a 32-byte sequence).\n     */\n    struct RequestBody {\n        uint64 minimalBlockNumber;\n        uint64 deadlineBlockNumber;\n        uint64 deadlineTimestamp;\n        bytes32 destinationAddressHash;\n        uint256 amount;\n        bytes32 standardPaymentReference;\n        bool checkSourceAddresses;\n        bytes32 sourceAddressesRoot;\n    }\n\n    /**\n     * @notice Response body for ReferencePaymentNonexistence attestation type.\n     * @param minimalBlockTimestamp The timestamp of the minimalBlock.\n     * @param firstOverflowBlockNumber The height of the firstOverflowBlock.\n     * @param firstOverflowBlockTimestamp The timestamp of the firstOverflowBlock.\n     * @custom:below `firstOverflowBlock` is the first block that has block number higher than\n     * `deadlineBlockNumber` and timestamp later than `deadlineTimestamp`.\n     * The specified search range are blocks between heights including `minimalBlockNumber`\n     * and excluding `firstOverflowBlockNumber`.\n     */\n    struct ResponseBody {\n        uint64 minimalBlockTimestamp;\n        uint64 firstOverflowBlockNumber;\n        uint64 firstOverflowBlockTimestamp;\n    }\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IReferencedPaymentNonexistenceVerification.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"./IReferencedPaymentNonexistence.sol\";\n\ninterface IReferencedPaymentNonexistenceVerification {\n    function verifyReferencedPaymentNonexistence(\n        IReferencedPaymentNonexistence.Proof calldata _proof\n    ) external view returns (bool _proved);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IRelay.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"./RandomNumberV2Interface.sol\";\n\n/**\n * Relay interface.\n */\ninterface IRelay is RandomNumberV2Interface {\n    struct FeeConfig {\n        uint8 protocolId; // Protocol id for which the fee is set\n        uint256 feeInWei; // Fee in wei\n    }\n\n    struct RelayInitialConfig {\n        uint32 initialRewardEpochId; // The initial reward epoch id.\n        uint32 startingVotingRoundIdForInitialRewardEpochId; // The starting voting round id for the initial\n        // reward epoch.\n        bytes32 initialSigningPolicyHash; // The initial signing policy hash.\n        uint8 randomNumberProtocolId; // The protocol id of the random number protocol.\n        uint32 firstVotingRoundStartTs; // The timestamp of the first voting round start.\n        uint8 votingEpochDurationSeconds; // The duration of a voting epoch in seconds.\n        uint32 firstRewardEpochStartVotingRoundId; // The start voting round id of the first reward epoch.\n        uint16 rewardEpochDurationInVotingEpochs; // The duration of a reward epoch in voting epochs.\n        uint16 thresholdIncreaseBIPS; // The threshold increase in BIPS for signing with\n        // old signing policy.\n        uint32 messageFinalizationWindowInRewardEpochs; // The window of reward epochs for finalizing\n        // the protocol messages.\n        address payable feeCollectionAddress; // Fee collection address\n        FeeConfig[] feeConfigs; // Fee configurations\n    }\n\n    struct RelayGovernanceConfig {\n        bytes32 descriptionHash; // Description hash (should be keccak256(\"RelayGovernance\")\n        uint256 chainId; // Chain id on which is the relay is deployed\n        FeeConfig[] newFeeConfigs; // Fee configurations\n    }\n\n    // Event is emitted when a new signing policy is initialized by the signing policy setter.\n    event SigningPolicyInitialized(\n        uint24 indexed rewardEpochId, // Reward epoch id\n        uint32 startVotingRoundId, // First voting round id of validity.\n        // Usually it is the first voting round of reward epoch rewardEpochId.\n        // It can be later,\n        // if the confirmation of the signing policy on Flare blockchain gets delayed.\n        uint16 threshold, // Confirmation threshold (absolute value of noramalised weights).\n        uint256 seed, // Random seed.\n        address[] voters, // The list of eligible voters in the canonical order.\n        uint16[] weights, // The corresponding list of normalised signing weights of eligible voters.\n        // Normalisation is done by compressing the weights from 32-byte values to\n        // 2 bytes, while approximately keeping the weight relations.\n        bytes signingPolicyBytes, // The full signing policy byte encoded.\n        uint64 timestamp // Timestamp when this happened\n    );\n\n    // Event is emitted when a signing policy is relayed.\n    // It contains minimalistic data in order to save gas. Data about the signing policy are\n    // extractable from the calldata, assuming prefered usage of direct top-level call to relay().\n    event SigningPolicyRelayed(\n        uint256 indexed rewardEpochId // Reward epoch id\n    );\n\n    // Event is emitted when a protocol message is relayed.\n    event ProtocolMessageRelayed(\n        uint8 indexed protocolId, // Protocol id\n        uint32 indexed votingRoundId, // Voting round id\n        bool isSecureRandom, // Secure random flag\n        bytes32 merkleRoot // Merkle root of the protocol message\n    );\n\n    /**\n     * Checks the relay message for sufficient weight of signatures for the _messageHash\n     * signed for protocol message Merkle root of the form (1, 0, 0, _messageHash).\n     * If the check is successful, reward epoch id of the signing policy is returned.\n     * Otherwise the function reverts.\n     * @param _relayMessage The relay message.\n     * @param _messageHash The hash of the message.\n     * @return _rewardEpochId The reward epoch id of the signing policy.\n     */\n    function verifyCustomSignature(\n        bytes calldata _relayMessage,\n        bytes32 _messageHash\n    ) external returns (uint256 _rewardEpochId);\n\n    /**\n     * Checks the relay message for sufficient weight of signatures of the hash of the _config data.\n     * If the check is successful, the relay contract is configured with the new _config data, which\n     * in particular means that fee configurations are updated.\n     * Otherwise the function reverts.\n     * @param _relayMessage The relay message.\n     * @param _config The new relay configuration.\n     */\n    function governanceFeeSetup(\n        bytes calldata _relayMessage,\n        RelayGovernanceConfig calldata _config\n    ) external;\n\n    /**\n     * Finalization function for new signing policies and protocol messages.\n     * It can be used as finalization contract on Flare chain or as relay contract on other EVM chain.\n     * Can be called in two modes. It expects calldata that is parsed in a custom manner.\n     * Hence the transaction calls should assemble relevant calldata in the 'data' field.\n     * Depending on the data provided, the contract operations in essentially two modes:\n     * (1) Relaying signing policy. The structure of the calldata is:\n     *        function signature (4 bytes) + active signing policy\n     *             + 0 (1 byte) + new signing policy,\n     *     total of exactly 4423 bytes.\n     * (2) Relaying signed message. The structure of the calldata is:\n     *        function signature (4 bytes) + signing policy\n     *           + signed message (38 bytes) + ECDSA signatures with indices (67 bytes each)\n     *     This case splits into two subcases:\n     *     - protocolMessageId = 1: Message id must be of the form (protocolMessageId, 0, 0, merkleRoot).\n     *       The validity of the signatures of sufficient weight is checked and if\n     *       successful, the merkleRoot from the message is returned (32 bytes) and the\n     *       reward epoch id of the signing policy as well (additional 3 bytes)\n     *     - protocolMessageId > 1: The validity of the signatures of sufficient weight is checked and if\n     *       it is valid, the merkleRoot is published for protocolId and votingRoundId.\n     * Reverts if relaying is not successful.\n     */\n    function relay() external returns (bytes memory);\n\n    /**\n     * Verifies the leaf (or intermediate node) with the Merkle proof against the Merkle root\n     * for given protocol id and voting round id.\n     * A fee may need to be paid. It is protocol specific.\n     * **NOTE:** Overpayment is not refunded.\n     * @param _protocolId The protocol id.\n     * @param _votingRoundId The voting round id.\n     * @param _leaf The leaf (or intermediate node) to verify.\n     * @param _proof The Merkle proof.\n     * @return True if the verification is successful.\n     */\n    function verify(\n        uint256 _protocolId,\n        uint256 _votingRoundId,\n        bytes32 _leaf,\n        bytes32[] calldata _proof\n    ) external payable returns (bool);\n\n    /**\n     * Returns the signing policy hash for given reward epoch id.\n     * The function is reverted if signingPolicySetter is set, hence on all\n     * deployments where the contract is used as a pure relay.\n     * @param _rewardEpochId The reward epoch id.\n     * @return _signingPolicyHash The signing policy hash.\n     */\n    function toSigningPolicyHash(\n        uint256 _rewardEpochId\n    ) external view returns (bytes32 _signingPolicyHash);\n\n    /**\n     * Returns true if there is finalization for a given protocol id and voting round id.\n     * @param _protocolId The protocol id.\n     * @param _votingRoundId The voting round id.\n     */\n    function isFinalized(\n        uint256 _protocolId,\n        uint256 _votingRoundId\n    ) external view returns (bool);\n\n    /**\n     * Returns the Merkle root for given protocol id and voting round id.\n     * The function is reverted if signingPolicySetter is set, hence on all\n     * deployments where the contract is used as a pure relay.\n     * @param _protocolId The protocol id.\n     * @param _votingRoundId The voting round id.\n     * @return _merkleRoot The Merkle root.\n     */\n    function merkleRoots(\n        uint256 _protocolId,\n        uint256 _votingRoundId\n    ) external view returns (bytes32 _merkleRoot);\n\n    /**\n     * Returns the start voting round id for given reward epoch id.\n     * @param _rewardEpochId The reward epoch id.\n     * @return _startingVotingRoundId The start voting round id.\n     */\n    function startingVotingRoundIds(\n        uint256 _rewardEpochId\n    ) external view returns (uint256 _startingVotingRoundId);\n\n    /**\n     * Returns the voting round id for given timestamp.\n     * @param _timestamp The timestamp.\n     * @return _votingRoundId The voting round id.\n     */\n    function getVotingRoundId(\n        uint256 _timestamp\n    ) external view returns (uint256 _votingRoundId);\n\n    /**\n     * Returns last initialized reward epoch data.\n     * @return _lastInitializedRewardEpoch Last initialized reward epoch.\n     * @return _startingVotingRoundIdForLastInitializedRewardEpoch Starting voting round id for it.\n     */\n    function lastInitializedRewardEpochData()\n        external\n        view\n        returns (\n            uint32 _lastInitializedRewardEpoch,\n            uint32 _startingVotingRoundIdForLastInitializedRewardEpoch\n        );\n\n    /**\n     * Returns fee collection address.\n     */\n    function feeCollectionAddress() external view returns (address payable);\n\n    /**\n     * Returns fee in wei for one verification of a given protocol id.\n     * @param _protocolId The protocol id.\n     */\n    function protocolFeeInWei(\n        uint256 _protocolId\n    ) external view returns (uint256);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IRewardManager.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"./RewardsV2Interface.sol\";\n\n/**\n * RewardManager interface.\n */\ninterface IRewardManager is RewardsV2Interface {\n    /// Struct used for storing unclaimed reward data.\n    struct UnclaimedRewardState {\n        bool initialised; // Information if already initialised\n        // amount and weight might be 0 if all users already claimed\n        uint120 amount; // Total unclaimed amount.\n        uint128 weight; // Total unclaimed weight.\n    }\n\n    /**\n     * Emitted when rewards are claimed.\n     * @param beneficiary Address of the beneficiary (voter or node id) that accrued the reward.\n     * @param rewardOwner Address that was eligible for the rewards.\n     * @param recipient Address that received the reward.\n     * @param rewardEpochId Id of the reward epoch where the reward was accrued.\n     * @param claimType Claim type\n     * @param amount Amount of rewarded native tokens (wei).\n     */\n    event RewardClaimed(\n        address indexed beneficiary,\n        address indexed rewardOwner,\n        address indexed recipient,\n        uint24 rewardEpochId,\n        ClaimType claimType,\n        uint120 amount\n    );\n\n    /**\n     * Unclaimed rewards have expired and are now inaccessible.\n     *\n     * `getUnclaimedRewardState()` can be used to retrieve more information.\n     * @param rewardEpochId Id of the reward epoch that has just expired.\n     */\n    event RewardClaimsExpired(uint256 indexed rewardEpochId);\n\n    /**\n     * Emitted when reward claims have been enabled.\n     * @param rewardEpochId First claimable reward epoch.\n     */\n    event RewardClaimsEnabled(uint256 indexed rewardEpochId);\n\n    /**\n     * Claim rewards for `_rewardOwners` and their PDAs.\n     * Rewards are deposited to the WNAT (to reward owner or PDA if enabled).\n     * It can be called by reward owner or its authorized executor.\n     * Only claiming from weight based claims is supported.\n     * @param _rewardOwners Array of reward owners.\n     * @param _rewardEpochId Id of the reward epoch up to which the rewards are claimed.\n     * @param _proofs Array of reward claims with merkle proofs.\n     */\n    function autoClaim(\n        address[] calldata _rewardOwners,\n        uint24 _rewardEpochId,\n        RewardClaimWithProof[] calldata _proofs\n    ) external;\n\n    /**\n     * Initialises weight based claims.\n     * @param _proofs Array of reward claims with merkle proofs.\n     */\n    function initialiseWeightBasedClaims(\n        RewardClaimWithProof[] calldata _proofs\n    ) external;\n\n    /**\n     * Returns the reward manager id.\n     */\n    function rewardManagerId() external view returns (uint256);\n\n    /**\n     * Returns the number of weight based claims that have been initialised.\n     * @param _rewardEpochId Reward epoch id.\n     */\n    function noOfInitialisedWeightBasedClaims(\n        uint256 _rewardEpochId\n    ) external view returns (uint256);\n\n    /**\n     * Get the current cleanup block number.\n     * @return The currently set cleanup block number.\n     */\n    function cleanupBlockNumber() external view returns (uint256);\n\n    /**\n     * Returns the state of rewards for a given address at a specific reward epoch.\n     * @param _rewardOwner Address of the reward owner.\n     * @param _rewardEpochId Reward epoch id.\n     * @return _rewardStates Array of reward states.\n     */\n    function getStateOfRewardsAt(\n        address _rewardOwner,\n        uint24 _rewardEpochId\n    ) external view returns (RewardState[] memory _rewardStates);\n\n    /**\n     * Gets the unclaimed reward state for a beneficiary, reward epoch id and claim type.\n     * @param _beneficiary Address of the beneficiary to query.\n     * @param _rewardEpochId Id of the reward epoch to query.\n     * @param _claimType Claim type to query.\n     * @return _state Unclaimed reward state.\n     */\n    function getUnclaimedRewardState(\n        address _beneficiary,\n        uint24 _rewardEpochId,\n        ClaimType _claimType\n    ) external view returns (UnclaimedRewardState memory _state);\n\n    /**\n     * Returns totals.\n     * @return _totalRewardsWei Total rewards (wei).\n     * @return _totalInflationRewardsWei Total inflation rewards (wei).\n     * @return _totalClaimedWei Total claimed rewards (wei).\n     * @return _totalBurnedWei Total burned rewards (wei).\n     */\n    function getTotals()\n        external\n        view\n        returns (\n            uint256 _totalRewardsWei,\n            uint256 _totalInflationRewardsWei,\n            uint256 _totalClaimedWei,\n            uint256 _totalBurnedWei\n        );\n\n    /**\n     * Returns reward epoch totals.\n     * @param _rewardEpochId Reward epoch id.\n     * @return _totalRewardsWei Total rewards (inflation + community) for the epoch (wei).\n     * @return _totalInflationRewardsWei Total inflation rewards for the epoch (wei).\n     * @return _initialisedRewardsWei Initialised rewards of all claim types for the epoch (wei).\n     * @return _claimedRewardsWei Claimed rewards for the epoch (wei).\n     * @return _burnedRewardsWei Burned rewards for the epoch (wei).\n     */\n    function getRewardEpochTotals(\n        uint24 _rewardEpochId\n    )\n        external\n        view\n        returns (\n            uint256 _totalRewardsWei,\n            uint256 _totalInflationRewardsWei,\n            uint256 _initialisedRewardsWei,\n            uint256 _claimedRewardsWei,\n            uint256 _burnedRewardsWei\n        );\n\n    /**\n     * Returns current reward epoch id.\n     */\n    function getCurrentRewardEpochId() external view returns (uint24);\n\n    /**\n     * Returns initial reward epoch id.\n     */\n    function getInitialRewardEpochId() external view returns (uint256);\n\n    /**\n     * Returns the reward epoch id that will expire next once a new reward epoch starts.\n     */\n    function getRewardEpochIdToExpireNext() external view returns (uint256);\n\n    /**\n     * The first reward epoch id that was claimable.\n     */\n    function firstClaimableRewardEpochId() external view returns (uint24);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/ISortition.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport {G1Point} from \"./IBn256.sol\";\n\nstruct SortitionCredential {\n    uint256 replicate;\n    G1Point gamma;\n    uint256 c;\n    uint256 s;\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/ISubmission.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"./IRandomProvider.sol\";\n\n/**\n * Submission interface.\n */\ninterface ISubmission is IRandomProvider {\n    /// Event emitted when a new voting round is initiated.\n    event NewVotingRoundInitiated();\n\n    /**\n     * Submit1 method. Used in multiple protocols (i.e. as FTSO commit method).\n     */\n    function submit1() external returns (bool);\n\n    /**\n     * Submit2 method. Used in multiple protocols (i.e. as FTSO reveal method).\n     */\n    function submit2() external returns (bool);\n\n    /**\n     * Submit3 method. Future usage.\n     */\n    function submit3() external returns (bool);\n\n    /**\n     * SubmitSignatures method. Used in multiple protocols (i.e. as FTSO submit signature method).\n     */\n    function submitSignatures() external returns (bool);\n\n    /**\n     * SubmitAndPass method. Future usage.\n     * @param _data The data to pass to the submitAndPassContract.\n     */\n    function submitAndPass(bytes calldata _data) external returns (bool);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/ITransferFees.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * FAsset transfer (trailing) fees.\n */\ninterface ITransferFees {\n    /**\n     * An agent has claimed their share of transfer fees.\n     */\n    event TransferFeesClaimed(\n        address indexed agentVault,\n        address recipient,\n        uint256 agentClaimedUBA,\n        uint256 poolClaimedUBA,\n        uint256 remainingUnclaimedEpochs\n    );\n\n    /**\n     * Transfer fee will change at timestamp `scheduledAt`.\n     */\n    event TransferFeeChangeScheduled(\n        uint256 nextTransferFeeMillionths,\n        uint256 scheduledAt\n    );\n\n    /**\n     * Claim FAsset transfer fees by an agent.\n     * NOTE: may only be called by the agent vault owner\n     * @param _agentVault the agent vault for which to claim\n     * @param _recipient the account that will receive agent's share of fasset fees\n     * @param _maxEpochsToClaim limit the number of epochs to claim, to avoid using too much gas\n     * @return _agentClaimedUBA agent's share of total claimed amount in FAsset UBA\n     * @return _poolClaimedUBA pool share of total claimed amount in FAsset UBA\n     * @return _remainingUnclaimedEpochs nonzero when _maxEpochsToClaim is smaller then the number of unclaimed epochs\n     */\n    function claimTransferFees(\n        address _agentVault,\n        address _recipient,\n        uint256 _maxEpochsToClaim\n    )\n        external\n        returns (\n            uint256 _agentClaimedUBA,\n            uint256 _poolClaimedUBA,\n            uint256 _remainingUnclaimedEpochs\n        );\n\n    function currentTransferFeeEpoch() external view returns (uint256);\n\n    function firstClaimableTransferFeeEpoch() external view returns (uint256);\n\n    function agentUnclaimedTransferFeeEpochs(\n        address _agentVault\n    ) external view returns (uint256 _first, uint256 _count);\n\n    function agentTransferFeeShare(\n        address _agentVault,\n        uint256 _maxEpochsToClaim\n    ) external view returns (uint256 _feeShareUBA);\n\n    function agentTransferFeeShareForEpoch(\n        address _agentVault,\n        uint256 _epoch\n    ) external view returns (uint256);\n\n    function transferFeeMillionths() external view returns (uint256);\n\n    function setTransferFeeMillionths(\n        uint256 _value,\n        uint256 _scheduledAt\n    ) external;\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // Internal methods\n\n    function fassetTransferFeePaid(uint256 _fee) external;\n\n    function initAgentsMintingHistory(address[] calldata _agentVaults) external;\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // Methods for testing and inspection\n\n    struct TransferFeeSettings {\n        uint256 transferFeeMillionths;\n        uint256 firstEpochStartTs;\n        uint256 epochDuration;\n        uint256 maxUnexpiredEpochs;\n        uint256 firstClaimableEpoch;\n    }\n\n    struct TransferFeeEpochData {\n        uint256 startTs;\n        uint256 endTs;\n        uint256 totalFees;\n        uint256 claimedFees;\n        bool claimable;\n        bool expired;\n    }\n\n    struct TransferFeeCalculationDataForAgent {\n        uint256 totalFees;\n        uint256 cumulativeMinted;\n        uint256 totalCumulativeMinted;\n        bool claimable;\n        bool claimed;\n    }\n\n    function transferFeeSettings()\n        external\n        view\n        returns (TransferFeeSettings memory);\n\n    function transferFeeEpochData(\n        uint256 _epoch\n    ) external view returns (TransferFeeEpochData memory);\n\n    function transferFeeCalculationDataForAgent(\n        address _agentVault,\n        uint256 _epoch\n    ) external view returns (TransferFeeCalculationDataForAgent memory);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IVoterRegistry.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * VoterRegistry interface.\n */\ninterface IVoterRegistry {\n    /// Signature data.\n    struct Signature {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    /// Event emitted when a beneficiary (c-chain address or node id) is chilled.\n    event BeneficiaryChilled(\n        bytes20 indexed beneficiary,\n        uint256 untilRewardEpochId\n    );\n\n    /// Event emitted when a voter is removed.\n    event VoterRemoved(address indexed voter, uint256 indexed rewardEpochId);\n\n    /// Event emitted when a voter is registered.\n    event VoterRegistered(\n        address indexed voter,\n        uint24 indexed rewardEpochId,\n        address indexed signingPolicyAddress,\n        address submitAddress,\n        address submitSignaturesAddress,\n        bytes32 publicKeyPart1,\n        bytes32 publicKeyPart2,\n        uint256 registrationWeight\n    );\n\n    /**\n     * Registers a voter if the weight is high enough.\n     * @param _voter The voter address.\n     * @param _signature The signature.\n     */\n    function registerVoter(\n        address _voter,\n        Signature calldata _signature\n    ) external;\n\n    /**\n     * Maximum number of voters in one reward epoch.\n     */\n    function maxVoters() external view returns (uint256);\n\n    /**\n     * In case of providing bad votes (e.g. ftso collusion), the beneficiary can be chilled for a few reward epochs.\n     * If beneficiary is chilled, the vote power assigned to it is zero.\n     * @param _beneficiary The beneficiary (c-chain address or node id).\n     * @return _rewardEpochId The reward epoch id until which the voter is chilled.\n     */\n    function chilledUntilRewardEpochId(\n        bytes20 _beneficiary\n    ) external view returns (uint256 _rewardEpochId);\n\n    /**\n     * Returns the block number of the start of the new signing policy initialisation for a given reward epoch.\n     * It is a snaphost block of the voters' addresses (it is zero if the reward epoch is not supported).\n     * @param _rewardEpochId The reward epoch id.\n     */\n    function newSigningPolicyInitializationStartBlockNumber(\n        uint256 _rewardEpochId\n    ) external view returns (uint256);\n\n    /**\n     * Indicates if the voter must have the public key set when registering.\n     */\n    function publicKeyRequired() external view returns (bool);\n\n    /**\n     * Returns the list of registered voters for a given reward epoch.\n     * List can be empty if the reward epoch is not supported (before initial reward epoch or future reward epoch).\n     * List for the next reward epoch can still change until the signing policy snapshot is created.\n     * @param _rewardEpochId The reward epoch id.\n     */\n    function getRegisteredVoters(\n        uint256 _rewardEpochId\n    ) external view returns (address[] memory);\n\n    /**\n     * Returns the number of registered voters for a given reward epoch.\n     * Size can be zero if the reward epoch is not supported (before initial reward epoch or future reward epoch).\n     * Size for the next reward epoch can still change until the signing policy snapshot is created.\n     * @param _rewardEpochId The reward epoch id.\n     */\n    function getNumberOfRegisteredVoters(\n        uint256 _rewardEpochId\n    ) external view returns (uint256);\n\n    /**\n     * Returns true if a voter was (is currently) registered in a given reward epoch.\n     * @param _voter The voter address.\n     * @param _rewardEpochId The reward epoch id.\n     */\n    function isVoterRegistered(\n        address _voter,\n        uint256 _rewardEpochId\n    ) external view returns (bool);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IVoterWhitelister.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\ninterface IVoterWhitelister {\n    /**\n     * Raised when an account is removed from the voter whitelist.\n     */\n    event VoterWhitelisted(address voter, uint256 ftsoIndex);\n\n    /**\n     * Raised when an account is removed from the voter whitelist.\n     */\n    event VoterRemovedFromWhitelist(address voter, uint256 ftsoIndex);\n\n    /**\n     * Raised when an account is chilled from the voter whitelist.\n     */\n    event VoterChilled(address voter, uint256 untilRewardEpoch);\n\n    /**\n     * Request to whitelist `_voter` account to ftso at `_ftsoIndex`. Will revert if vote power too low.\n     * May be called by any address.\n     */\n    function requestWhitelistingVoter(\n        address _voter,\n        uint256 _ftsoIndex\n    ) external;\n\n    /**\n     * Request to whitelist `_voter` account to all active ftsos.\n     * May be called by any address.\n     * It returns an array of supported ftso indices and success flag per index.\n     */\n    function requestFullVoterWhitelisting(\n        address _voter\n    )\n        external\n        returns (uint256[] memory _supportedIndices, bool[] memory _success);\n\n    /**\n     * Maximum number of voters in the whitelist for a new FTSO.\n     */\n    function defaultMaxVotersForFtso() external view returns (uint256);\n\n    /**\n     * Maximum number of voters in the whitelist for FTSO at index `_ftsoIndex`.\n     */\n    function maxVotersForFtso(\n        uint256 _ftsoIndex\n    ) external view returns (uint256);\n\n    /**\n     * Get whitelisted price providers for ftso with `_symbol`\n     */\n    function getFtsoWhitelistedPriceProvidersBySymbol(\n        string memory _symbol\n    ) external view returns (address[] memory);\n\n    /**\n     * Get whitelisted price providers for ftso at `_ftsoIndex`\n     */\n    function getFtsoWhitelistedPriceProviders(\n        uint256 _ftsoIndex\n    ) external view returns (address[] memory);\n\n    /**\n     * In case of providing bad prices (e.g. collusion), the voter can be chilled for a few reward epochs.\n     * A voter can whitelist again from a returned reward epoch onwards.\n     */\n    function chilledUntilRewardEpoch(\n        address _voter\n    ) external view returns (uint256);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IVPContractEvents.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\ninterface IVPContractEvents {\n    /**\n     * Event triggered when an account delegates or undelegates another account.\n     * Definition: `votePowerFromTo(from, to)` is `changed` from `priorVotePower` to `newVotePower`.\n     * For undelegation, `newVotePower` is 0.\n     *\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract`.\n     */\n    event Delegate(\n        address indexed from,\n        address indexed to,\n        uint256 priorVotePower,\n        uint256 newVotePower\n    );\n\n    /**\n     * Event triggered only when account `delegator` revokes delegation to `delegatee`\n     * for a single block in the past (typically the current vote block).\n     *\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract` and/or `readVotePowerContract`.\n     */\n    event Revoke(\n        address indexed delegator,\n        address indexed delegatee,\n        uint256 votePower,\n        uint256 blockNumber\n    );\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IVPToken.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IGovernanceVotePower} from \"./IGovernanceVotePower.sol\";\nimport {IVPContractEvents} from \"./IVPContractEvents.sol\";\n\ninterface IVPToken is IERC20 {\n    /**\n     * @notice Delegate by percentage `_bips` of voting power to `_to` from `msg.sender`.\n     * @param _to The address of the recipient\n     * @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\n     *   Not cumulative - every call resets the delegation value (and value of 0 undelegates `to`).\n     **/\n    function delegate(address _to, uint256 _bips) external;\n\n    /**\n     * @notice Undelegate all percentage delegations from the sender and then delegate corresponding\n     *   `_bips` percentage of voting power from the sender to each member of `_delegatees`.\n     * @param _delegatees The addresses of the new recipients.\n     * @param _bips The percentages of voting power to be delegated expressed in basis points (1/100 of one percent).\n     *   Total of all `_bips` values must be at most 10000.\n     **/\n    function batchDelegate(\n        address[] memory _delegatees,\n        uint256[] memory _bips\n    ) external;\n\n    /**\n     * @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\n     * @param _to The address of the recipient\n     * @param _amount An explicit vote power amount to be delegated.\n     *   Not cumulative - every call resets the delegation value (and value of 0 undelegates `to`).\n     **/\n    function delegateExplicit(address _to, uint _amount) external;\n\n    /**\n     * @notice Revoke all delegation from sender to `_who` at given block.\n     *    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\n     *    Block `_blockNumber` must be in the past.\n     *    This method should be used only to prevent rogue delegate voting in the current voting block.\n     *    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\n     * @param _who Address of the delegatee\n     * @param _blockNumber The block number at which to revoke delegation.\n     */\n    function revokeDelegationAt(address _who, uint _blockNumber) external;\n\n    /**\n     * @notice Undelegate all voting power for delegates of `msg.sender`\n     *    Can only be used with percentage delegation.\n     *    Does not reset delegation mode back to NOTSET.\n     **/\n    function undelegateAll() external;\n\n    /**\n     * @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\n     *    Can only be used with explicit delegation.\n     *    Does not reset delegation mode back to NOTSET.\n     * @param _delegateAddresses Explicit delegation does not store delegatees' addresses,\n     *   so the caller must supply them.\n     * @return The amount still delegated (in case the list of delegates was incomplete).\n     */\n    function undelegateAllExplicit(\n        address[] memory _delegateAddresses\n    ) external returns (uint256);\n\n    /**\n     * @dev Should be compatible with ERC20 method\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Should be compatible with ERC20 method\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Should be compatible with ERC20 method\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @notice Total amount of tokens at a specific `_blockNumber`.\n     * @param _blockNumber The block number when the totalSupply is queried\n     * @return The total amount of tokens at `_blockNumber`\n     **/\n    function totalSupplyAt(uint _blockNumber) external view returns (uint256);\n\n    /**\n     * @dev Queries the token balance of `_owner` at a specific `_blockNumber`.\n     * @param _owner The address from which the balance will be retrieved.\n     * @param _blockNumber The block number when the balance is queried.\n     * @return The balance at `_blockNumber`.\n     **/\n    function balanceOfAt(\n        address _owner,\n        uint _blockNumber\n    ) external view returns (uint256);\n\n    /**\n     * @notice Get the current total vote power.\n     * @return The current total vote power (sum of all accounts' vote powers).\n     */\n    function totalVotePower() external view returns (uint256);\n\n    /**\n     * @notice Get the total vote power at block `_blockNumber`\n     * @param _blockNumber The block number at which to fetch.\n     * @return The total vote power at the block  (sum of all accounts' vote powers).\n     */\n    function totalVotePowerAt(\n        uint _blockNumber\n    ) external view returns (uint256);\n\n    /**\n     * @notice Get the current vote power of `_owner`.\n     * @param _owner The address to get voting power.\n     * @return Current vote power of `_owner`.\n     */\n    function votePowerOf(address _owner) external view returns (uint256);\n\n    /**\n     * @notice Get the vote power of `_owner` at block `_blockNumber`\n     * @param _owner The address to get voting power.\n     * @param _blockNumber The block number at which to fetch.\n     * @return Vote power of `_owner` at `_blockNumber`.\n     */\n    function votePowerOfAt(\n        address _owner,\n        uint256 _blockNumber\n    ) external view returns (uint256);\n\n    /**\n     * @notice Get the vote power of `_owner` at block `_blockNumber`, ignoring revocation information (and cache).\n     * @param _owner The address to get voting power.\n     * @param _blockNumber The block number at which to fetch.\n     * @return Vote power of `_owner` at `_blockNumber`. Result doesn't change if vote power is revoked.\n     */\n    function votePowerOfAtIgnoringRevocation(\n        address _owner,\n        uint256 _blockNumber\n    ) external view returns (uint256);\n\n    /**\n     * @notice Get the delegation mode for '_who'. This mode determines whether vote power is\n     *  allocated by percentage or by explicit value. Once the delegation mode is set,\n     *  it never changes, even if all delegations are removed.\n     * @param _who The address to get delegation mode.\n     * @return delegation mode: 0 = NOTSET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit)\n     */\n    function delegationModeOf(address _who) external view returns (uint256);\n\n    /**\n     * @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\n     * @param _from Address of delegator\n     * @param _to Address of delegatee\n     * @return The delegated vote power.\n     */\n    function votePowerFromTo(\n        address _from,\n        address _to\n    ) external view returns (uint256);\n\n    /**\n     * @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\n     * @param _from Address of delegator\n     * @param _to Address of delegatee\n     * @param _blockNumber The block number at which to fetch.\n     * @return The delegated vote power.\n     */\n    function votePowerFromToAt(\n        address _from,\n        address _to,\n        uint _blockNumber\n    ) external view returns (uint256);\n\n    /**\n     * @notice Compute the current undelegated vote power of `_owner`\n     * @param _owner The address to get undelegated voting power.\n     * @return The unallocated vote power of `_owner`\n     */\n    function undelegatedVotePowerOf(\n        address _owner\n    ) external view returns (uint256);\n\n    /**\n     * @notice Get the undelegated vote power of `_owner` at given block.\n     * @param _owner The address to get undelegated voting power.\n     * @param _blockNumber The block number at which to fetch.\n     * @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\n     */\n    function undelegatedVotePowerOfAt(\n        address _owner,\n        uint256 _blockNumber\n    ) external view returns (uint256);\n\n    /**\n     * @notice Get the vote power delegation `delegationAddresses`\n     *  and `_bips` of `_who`. Returned in two separate positional arrays.\n     * @param _who The address to get delegations.\n     * @return _delegateAddresses Positional array of delegation addresses.\n     * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\n     * @return _count The number of delegates.\n     * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\n     */\n    function delegatesOf(\n        address _who\n    )\n        external\n        view\n        returns (\n            address[] memory _delegateAddresses,\n            uint256[] memory _bips,\n            uint256 _count,\n            uint256 _delegationMode\n        );\n\n    /**\n     * @notice Get the vote power delegation `delegationAddresses`\n     *  and `pcts` of `_who`. Returned in two separate positional arrays.\n     * @param _who The address to get delegations.\n     * @param _blockNumber The block for which we want to know the delegations.\n     * @return _delegateAddresses Positional array of delegation addresses.\n     * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\n     * @return _count The number of delegates.\n     * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\n     */\n    function delegatesOfAt(\n        address _who,\n        uint256 _blockNumber\n    )\n        external\n        view\n        returns (\n            address[] memory _delegateAddresses,\n            uint256[] memory _bips,\n            uint256 _count,\n            uint256 _delegationMode\n        );\n\n    /**\n     * Returns VPContract used for readonly operations (view methods).\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\n     *\n     * @notice `readVotePowerContract` is almost always equal to `writeVotePowerContract`\n     * except during upgrade from one VPContract to a new version (which should happen\n     * rarely or never and will be anounced before).\n     *\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\n     * via VPToken (and state changing methods are forbidden from direct calls).\n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\n     * for listening to events (`Revoke` only).\n     */\n    function readVotePowerContract() external view returns (IVPContractEvents);\n\n    /**\n     * Returns VPContract used for state changing operations (non-view methods).\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\n     *\n     * @notice `writeVotePowerContract` is almost always equal to `readVotePowerContract`\n     * except during upgrade from one VPContract to a new version (which should happen\n     * rarely or never and will be anounced before). In the case of upgrade,\n     * `writeVotePowerContract` will be replaced first to establish delegations, and\n     * after some perio (e.g. after a reward epoch ends) `readVotePowerContract` will be set equal to it.\n     *\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\n     * via VPToken (and state changing methods are forbidden from direct calls).\n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\n     * for listening to events (`Delegate` and `Revoke` only).\n     */\n    function writeVotePowerContract() external view returns (IVPContractEvents);\n\n    /**\n     * When set, allows token owners to participate in governance voting\n     * and delegate governance vote power.\n     */\n    function governanceVotePower() external view returns (IGovernanceVotePower);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IWeb2Json.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * @custom:name IWeb2Json\n * @custom:supported WEB2\n * @author Flare\n * @notice An attestation request that fetches JSON data from the given URL,\n * applies a jq filter to transform the returned result, and returns the structured data as ABI encoded data.\n * @custom:verification  Data is fetched from an URL `url`. The received data is then processed with jq as\n * the `postProcessJq` states. The structure of the final JSON is written in the `abiSignature`.\n *\n * The response contains an abi encoding of the final data.\n * @custom:lut `0xffffffffffffffff`\n * @custom:lut-limit `0xffffffffffffffff`\n */\ninterface IWeb2Json {\n    /**\n     * @notice Toplevel request\n     * @param attestationType ID of the attestation type.\n     * @param sourceId ID of the data source.\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined\n     * by the `attestationType`.\n     */\n    struct Request {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        bytes32 messageIntegrityCode;\n        RequestBody requestBody;\n    }\n\n    /**\n     * @notice Toplevel response\n     * @param attestationType Extracted from the request.\n     * @param sourceId Extracted from the request.\n     * @param votingRound The ID of the State Connector round in which the request was considered.\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n     * @param requestBody Extracted from the request.\n     * @param responseBody Data defining the response. The verification rules for the construction\n     * of the response body and the type are defined per specific `attestationType`.\n     */\n    struct Response {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        uint64 votingRound;\n        uint64 lowestUsedTimestamp;\n        RequestBody requestBody;\n        ResponseBody responseBody;\n    }\n\n    /**\n     * @notice Toplevel proof\n     * @param merkleProof Merkle proof corresponding to the attestation response.\n     * @param data Attestation response.\n     */\n    struct Proof {\n        bytes32[] merkleProof;\n        Response data;\n    }\n\n    /**\n     * @notice Request body for Web2Json attestation type\n     * @param url URL of the data source\n     * @param httpMethod HTTP method to be used to fetch from URL source.\n     * Supported methods: GET, POST, PUT, PATCH, DELETE.\n     * @param headers Headers to be included to fetch from URL source. Use `{}` if no headers are needed.\n     * @param queryParams Query parameters to be included to fetch from URL source.\n     * Use `{}` if no query parameters are needed.\n     * @param body Request body to be included to fetch from URL source. Use '{}' if no request body is required.\n     * @param postProcessJq jq filter used to post-process the JSON response from the URL.\n     * @param abiSignature ABI signature of the struct used to encode the data after jq post-processing.\n     */\n    struct RequestBody {\n        string url;\n        string httpMethod;\n        string headers;\n        string queryParams;\n        string body;\n        string postProcessJq;\n        string abiSignature;\n    }\n\n    /**\n     * @notice Response body for Web2Json attestation type\n     * @param abiEncodedData Raw binary data encoded to match the function parameters in ABI.\n     */\n    struct ResponseBody {\n        bytes abiEncodedData;\n    }\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IWeb2JsonVerification.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"./IWeb2Json.sol\";\n\ninterface IWeb2JsonVerification {\n    function verifyJsonApi(\n        IWeb2Json.Proof calldata _proof\n    ) external view returns (bool _proved);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IWNat.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\ninterface IWNat {\n    /**\n     * @notice Deposit native token and mint WNAT ERC20.\n     */\n    function deposit() external payable;\n\n    /**\n     * @notice Withdraw native token and burn WNAT ERC20.\n     * @param _amount The amount to withdraw.\n     */\n    function withdraw(uint256 _amount) external;\n\n    /**\n     * @notice Deposit native token from msg.sender and mint WNAT ERC20.\n     * @param _recipient An address to receive minted WNAT.\n     */\n    function depositTo(address _recipient) external payable;\n\n    /**\n     * @notice Withdraw WNAT from an owner and send NAT to msg.sender given an allowance.\n     * @param _owner An address spending the native tokens.\n     * @param _amount The amount to spend.\n     *\n     * Requirements:\n     *\n     * - `_owner` must have a balance of at least `_amount`.\n     * - the caller must have allowance for `_owners`'s tokens of at least\n     * `_amount`.\n     */\n    function withdrawFrom(address _owner, uint256 _amount) external;\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/IWNatDelegationFee.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * WNatDelegationFee interface.\n */\ninterface IWNatDelegationFee {\n    /// Event emitted when a voter fee percentage value is changed.\n    event FeePercentageChanged(\n        address indexed voter,\n        uint16 value,\n        uint24 validFromEpochId\n    );\n\n    /**\n     * Allows voter to set (or update last) fee percentage.\n     * @param _feePercentageBIPS Number representing fee percentage in BIPS.\n     * @return Returns the reward epoch number when the value becomes effective.\n     */\n    function setVoterFeePercentage(\n        uint16 _feePercentageBIPS\n    ) external returns (uint256);\n\n    /// The offset in reward epochs for the fee percentage value to become effective.\n    function feePercentageUpdateOffset() external view returns (uint24);\n\n    /// The default fee percentage value.\n    function defaultFeePercentageBIPS() external view returns (uint16);\n\n    /**\n     * Returns the current fee percentage of `_voter`.\n     * @param _voter Voter address.\n     */\n    function getVoterCurrentFeePercentage(\n        address _voter\n    ) external view returns (uint16);\n\n    /**\n     * Returns the fee percentage of `_voter` for given reward epoch id.\n     * @param _voter Voter address.\n     * @param _rewardEpochId Reward epoch id.\n     * **NOTE:** fee percentage might still change for the `current + feePercentageUpdateOffset` reward epoch id\n     */\n    function getVoterFeePercentage(\n        address _voter,\n        uint256 _rewardEpochId\n    ) external view returns (uint16);\n\n    /**\n     * Returns the scheduled fee percentage changes of `_voter`.\n     * @param _voter Voter address.\n     * @return _feePercentageBIPS Positional array of fee percentages in BIPS.\n     * @return _validFromEpochId Positional array of reward epoch ids the fee setings are effective from.\n     * @return _fixed Positional array of boolean values indicating if settings are subjected to change.\n     */\n    function getVoterScheduledFeePercentageChanges(\n        address _voter\n    )\n        external\n        view\n        returns (\n            uint256[] memory _feePercentageBIPS,\n            uint256[] memory _validFromEpochId,\n            bool[] memory _fixed\n        );\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/ProtocolsV2Interface.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * Protocols V2 long term support interface.\n */\ninterface ProtocolsV2Interface {\n    /**\n     * Timestamp when the first reward epoch started, in seconds since UNIX epoch.\n     */\n    function firstRewardEpochStartTs() external view returns (uint64);\n\n    /**\n     * Duration of reward epoch, in seconds.\n     */\n    function rewardEpochDurationSeconds() external view returns (uint64);\n\n    /**\n     * Timestamp when the first voting epoch started, in seconds since UNIX epoch.\n     */\n    function firstVotingRoundStartTs() external view returns (uint64);\n\n    /**\n     * Duration of voting epoch, in seconds.\n     */\n    function votingEpochDurationSeconds() external view returns (uint64);\n\n    /**\n     * Returns the vote power block for given reward epoch id.\n     */\n    function getVotePowerBlock(\n        uint256 _rewardEpochId\n    ) external view returns (uint64 _votePowerBlock);\n\n    /**\n     * Returns the start voting round id for given reward epoch id.\n     */\n    function getStartVotingRoundId(\n        uint256 _rewardEpochId\n    ) external view returns (uint32);\n\n    /**\n     * Returns the current reward epoch id.\n     */\n    function getCurrentRewardEpochId() external view returns (uint24);\n\n    /**\n     * Returns the current voting epoch id.\n     */\n    function getCurrentVotingEpochId() external view returns (uint32);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/RandomNumberV2Interface.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * Random number V2 long term support interface.\n */\ninterface RandomNumberV2Interface {\n    /**\n     * Returns the current random number, its timestamp and the flag indicating if it is secure.\n     * @return _randomNumber The current random number.\n     * @return _isSecureRandom The flag indicating if the random number is secure.\n     * @return _randomTimestamp The timestamp of the random number.\n     */\n    function getRandomNumber()\n        external\n        view\n        returns (\n            uint256 _randomNumber,\n            bool _isSecureRandom,\n            uint256 _randomTimestamp\n        );\n\n    /**\n     * Returns the historical random number for a given _votingRoundId,\n     * its timestamp and the flag indicating if it is secure.\n     * If no finalization in the _votingRoundId, the function reverts.\n     * @param _votingRoundId The voting round id.\n     * @return _randomNumber The current random number.\n     * @return _isSecureRandom The flag indicating if the random number is secure.\n     * @return _randomTimestamp The timestamp of the random number.\n     */\n    function getRandomNumberHistorical(\n        uint256 _votingRoundId\n    )\n        external\n        view\n        returns (\n            uint256 _randomNumber,\n            bool _isSecureRandom,\n            uint256 _randomTimestamp\n        );\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/RewardsV2Interface.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * Rewards V2 long term support interface.\n */\ninterface RewardsV2Interface {\n    /// Claim type enum.\n    enum ClaimType {\n        DIRECT,\n        FEE,\n        WNAT,\n        MIRROR,\n        CCHAIN\n    }\n\n    /// Struct used for claiming rewards with Merkle proof.\n    struct RewardClaimWithProof {\n        bytes32[] merkleProof;\n        RewardClaim body;\n    }\n\n    /// Struct used in Merkle tree for storing reward claims.\n    struct RewardClaim {\n        uint24 rewardEpochId;\n        bytes20 beneficiary; // c-chain address or node id (bytes20) in case of type MIRROR\n        uint120 amount; // in wei\n        ClaimType claimType;\n    }\n\n    /// Struct used for returning state of rewards.\n    struct RewardState {\n        uint24 rewardEpochId;\n        bytes20 beneficiary; // c-chain address or node id (bytes20) in case of type MIRROR\n        uint120 amount; // in wei\n        ClaimType claimType;\n        bool initialised;\n    }\n\n    /**\n     * Claim rewards for `_rewardOwner` and transfer them to `_recipient`.\n     * It can be called by reward owner or its authorized executor.\n     * @param _rewardOwner Address of the reward owner.\n     * @param _recipient Address of the reward recipient.\n     * @param _rewardEpochId Id of the reward epoch up to which the rewards are claimed.\n     * @param _wrap Indicates if the reward should be wrapped (deposited) to the WNAT contract.\n     * @param _proofs Array of reward claims with merkle proofs.\n     * @return _rewardAmountWei Amount of rewarded native tokens (wei).\n     */\n    function claim(\n        address _rewardOwner,\n        address payable _recipient,\n        uint24 _rewardEpochId,\n        bool _wrap,\n        RewardClaimWithProof[] calldata _proofs\n    ) external returns (uint256 _rewardAmountWei);\n\n    /**\n     * Indicates if the contract is active - claims are enabled.\n     */\n    function active() external view returns (bool);\n\n    /**\n     * Returns the start and the end of the reward epoch range for which the reward is claimable.\n     * @return _startEpochId The oldest epoch id that allows reward claiming.\n     * @return _endEpochId The newest epoch id that allows reward claiming.\n     */\n    function getRewardEpochIdsWithClaimableRewards()\n        external\n        view\n        returns (uint24 _startEpochId, uint24 _endEpochId);\n\n    /**\n     * Returns the next claimable reward epoch for a reward owner.\n     * @param _rewardOwner Address of the reward owner to query.\n     */\n    function getNextClaimableRewardEpochId(\n        address _rewardOwner\n    ) external view returns (uint256);\n\n    /**\n     * Returns the state of rewards for a given address for all unclaimed reward epochs with claimable rewards.\n     * @param _rewardOwner Address of the reward owner.\n     * @return _rewardStates Array of reward states.\n     */\n    function getStateOfRewards(\n        address _rewardOwner\n    ) external view returns (RewardState[][] memory _rewardStates);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/TestFtsoV2Interface.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * FtsoV2 long term support interface.\n */\ninterface TestFtsoV2Interface {\n    /// Feed data structure\n    struct FeedData {\n        uint32 votingRoundId;\n        bytes21 id;\n        int32 value;\n        uint16 turnoutBIPS;\n        int8 decimals;\n    }\n\n    /// Feed data with proof structure\n    struct FeedDataWithProof {\n        bytes32[] proof;\n        FeedData body;\n    }\n\n    /// Feed id change structure\n    struct FeedIdChange {\n        bytes21 oldFeedId;\n        bytes21 newFeedId;\n    }\n\n    /// Event emitted when a feed id is changed (e.g. feed renamed).\n    event FeedIdChanged(bytes21 indexed oldFeedId, bytes21 indexed newFeedId);\n\n    /**\n     * Returns the FTSO protocol id.\n     */\n    function getFtsoProtocolId() external view returns (uint256);\n\n    /**\n     * Returns the list of supported feed ids (currently active feed ids).\n     * To get the list of all available feed ids, combine with `getFeedIdChanges()`.\n     * @return _feedIds The list of supported feed ids.\n     */\n    function getSupportedFeedIds()\n        external\n        view\n        returns (bytes21[] memory _feedIds);\n\n    /**\n     * Returns the list of feed id changes.\n     * @return _feedIdChanges The list of changed feed id pairs (old and new feed id).\n     */\n    function getFeedIdChanges()\n        external\n        view\n        returns (FeedIdChange[] memory _feedIdChanges);\n\n    /**\n     * Calculates the fee for fetching a feed.\n     * @param _feedId The id of the feed.\n     * @return _fee The fee for fetching the feed.\n     */\n    function calculateFeeById(\n        bytes21 _feedId\n    ) external view returns (uint256 _fee);\n\n    /**\n     * Calculates the fee for fetching feeds.\n     * @param _feedIds The list of feed ids.\n     * @return _fee The fee for fetching the feeds.\n     */\n    function calculateFeeByIds(\n        bytes21[] memory _feedIds\n    ) external view returns (uint256 _fee);\n\n    /**\n     * Returns stored data of a feed.\n     * A fee (calculated by the FeeCalculator contract) may need to be paid.\n     * @param _feedId The id of the feed.\n     * @return _value The value for the requested feed.\n     * @return _decimals The decimal places for the requested feed.\n     * @return _timestamp The timestamp of the last update.\n     */\n    function getFeedById(\n        bytes21 _feedId\n    ) external view returns (uint256 _value, int8 _decimals, uint64 _timestamp);\n\n    /**\n     * Returns stored data of each feed.\n     * A fee (calculated by the FeeCalculator contract) may need to be paid.\n     * @param _feedIds The list of feed ids.\n     * @return _values The list of values for the requested feeds.\n     * @return _decimals The list of decimal places for the requested feeds.\n     * @return _timestamp The timestamp of the last update.\n     */\n    function getFeedsById(\n        bytes21[] memory _feedIds\n    )\n        external\n        view\n        returns (\n            uint256[] memory _values,\n            int8[] memory _decimals,\n            uint64 _timestamp\n        );\n\n    /**\n     * Returns value in wei and timestamp of a feed.\n     * A fee (calculated by the FeeCalculator contract) may need to be paid.\n     * @param _feedId The id of the feed.\n     * @return _value The value for the requested feed in wei (i.e. with 18 decimal places).\n     * @return _timestamp The timestamp of the last update.\n     */\n    function getFeedByIdInWei(\n        bytes21 _feedId\n    ) external view returns (uint256 _value, uint64 _timestamp);\n\n    /** Returns value of each feed and a timestamp.\n     * For some feeds, a fee (calculated by the FeeCalculator contract) may need to be paid.\n     * @param _feedIds Ids of the feeds.\n     * @return _values The list of values for the requested feeds in wei (i.e. with 18 decimal places).\n     * @return _timestamp The timestamp of the last update.\n     */\n    function getFeedsByIdInWei(\n        bytes21[] memory _feedIds\n    ) external view returns (uint256[] memory _values, uint64 _timestamp);\n\n    /**\n     * Checks if the feed data is valid (i.e. is part of the confirmed Merkle tree).\n     * @param _feedData Structure containing data about the feed (FeedData structure) and Merkle proof.\n     * @return true if the feed data is valid.\n     */\n    function verifyFeedData(\n        FeedDataWithProof calldata _feedData\n    ) external view returns (bool);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/token/interfaces/IICleanable.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\ninterface IICleanable {\n    /**\n     * Set the contract that is allowed to call history cleaning methods.\n     */\n    function setCleanerContract(address _cleanerContract) external;\n\n    /**\n     * Set the cleanup block number.\n     * Historic data for the blocks before `cleanupBlockNumber` can be erased,\n     * history before that block should never be used since it can be inconsistent.\n     * In particular, cleanup block number must be before current vote power block.\n     * @param _blockNumber The new cleanup block number.\n     */\n    function setCleanupBlockNumber(uint256 _blockNumber) external;\n\n    /**\n     * Get the current cleanup block number.\n     */\n    function cleanupBlockNumber() external view returns (uint256);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/token/interfaces/IIGovernanceVotePower.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"../../IVPToken.sol\";\nimport \"../../IPChainStakeMirror.sol\";\nimport \"../../IGovernanceVotePower.sol\";\n\n/**\n * Internal interface for contracts delegating their governance vote power.\n */\ninterface IIGovernanceVotePower is IGovernanceVotePower {\n    /**\n     * Emitted when a delegate's vote power changes, as a result of a new delegation\n     * or a token transfer, for example.\n     *\n     * The event is always emitted from a `GovernanceVotePower` contract.\n     * @param delegate The account receiving the changing delegated vote power.\n     * @param previousBalance Delegated vote power before the change.\n     * @param newBalance Delegated vote power after the change.\n     */\n    event DelegateVotesChanged(\n        address indexed delegate,\n        uint256 previousBalance,\n        uint256 newBalance\n    );\n\n    /**\n     * Emitted when an account starts delegating vote power or switches its delegation\n     * to another address.\n     *\n     * The event is always emitted from a `GovernanceVotePower` contract.\n     * @param delegator Account delegating its vote power.\n     * @param fromDelegate Account receiving the delegation before the change.\n     * Can be address(0) if there was no previous delegation.\n     * @param toDelegate Account receiving the delegation after the change.\n     * Can be address(0) if `delegator` just undelegated all its vote power.\n     */\n    event DelegateChanged(\n        address indexed delegator,\n        address indexed fromDelegate,\n        address indexed toDelegate\n    );\n\n    /**\n     * Update governance vote power of all involved delegates after tokens are transferred.\n     *\n     * This function **MUST** be called after each governance token transfer for the\n     * delegates to reflect the correct balance.\n     * @param _from Source address of the transfer.\n     * @param _to Destination address of the transfer.\n     * @param _fromBalance _Ignored._\n     * @param _toBalance _Ignored._\n     * @param _amount Amount being transferred.\n     */\n    function updateAtTokenTransfer(\n        address _from,\n        address _to,\n        uint256 _fromBalance,\n        uint256 _toBalance,\n        uint256 _amount\n    ) external;\n\n    /**\n     * Set the cleanup block number.\n     * Historic data for the blocks before `cleanupBlockNumber` can be erased.\n     * History before that block should never be used since it can be inconsistent.\n     * In particular, cleanup block number must be lower than the current vote power block.\n     * @param _blockNumber The new cleanup block number.\n     */\n    function setCleanupBlockNumber(uint256 _blockNumber) external;\n\n    /**\n     * Set the contract that is allowed to call history cleaning methods.\n     * @param _cleanerContract Address of the cleanup contract.\n     * Usually this will be an instance of `CleanupBlockNumberManager`.\n     */\n    function setCleanerContract(address _cleanerContract) external;\n\n    /**\n     * Get the token that this governance vote power contract belongs to.\n     * @return The IVPToken interface owning this contract.\n     */\n    function ownerToken() external view returns (IVPToken);\n\n    /**\n     * Get the stake mirror contract that this governance vote power contract belongs to.\n     * @return The IPChainStakeMirror interface owning this contract.\n     */\n    function pChainStakeMirror() external view returns (IPChainStakeMirror);\n\n    /**\n     * Get the current cleanup block number set with `setCleanupBlockNumber()`.\n     * @return The currently set cleanup block number.\n     */\n    function getCleanupBlockNumber() external view returns (uint256);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/token/interfaces/IIVPContract.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"../../IVPToken.sol\";\nimport \"../../IVPContractEvents.sol\";\nimport \"./IICleanable.sol\";\n\ninterface IIVPContract is IICleanable, IVPContractEvents {\n    /**\n     * Update vote powers when tokens are transfered.\n     * Also update delegated vote powers for percentage delegation\n     * and check for enough funds for explicit delegations.\n     **/\n    function updateAtTokenTransfer(\n        address _from,\n        address _to,\n        uint256 _fromBalance,\n        uint256 _toBalance,\n        uint256 _amount\n    ) external;\n\n    /**\n     * @notice Delegate `_bips` percentage of voting power to `_to` from `_from`\n     * @param _from The address of the delegator\n     * @param _to The address of the recipient\n     * @param _balance The delegator's current balance\n     * @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\n     *   Not cumulative - every call resets the delegation value (and value of 0 revokes delegation).\n     **/\n    function delegate(\n        address _from,\n        address _to,\n        uint256 _balance,\n        uint256 _bips\n    ) external;\n\n    /**\n     * @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\n     * @param _from The address of the delegator\n     * @param _to The address of the recipient\n     * @param _balance The delegator's current balance\n     * @param _amount An explicit vote power amount to be delegated.\n     *   Not cumulative - every call resets the delegation value (and value of 0 undelegates `to`).\n     **/\n    function delegateExplicit(\n        address _from,\n        address _to,\n        uint256 _balance,\n        uint _amount\n    ) external;\n\n    /**\n     * @notice Revoke all delegation from sender to `_who` at given block.\n     *    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\n     *    Block `_blockNumber` must be in the past.\n     *    This method should be used only to prevent rogue delegate voting in the current voting block.\n     *    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\n     * @param _from The address of the delegator\n     * @param _who Address of the delegatee\n     * @param _balance The delegator's current balance\n     * @param _blockNumber The block number at which to revoke delegation.\n     **/\n    function revokeDelegationAt(\n        address _from,\n        address _who,\n        uint256 _balance,\n        uint _blockNumber\n    ) external;\n\n    /**\n     * @notice Undelegate all voting power for delegates of `msg.sender`\n     *    Can only be used with percentage delegation.\n     *    Does not reset delegation mode back to NOTSET.\n     * @param _from The address of the delegator\n     **/\n    function undelegateAll(address _from, uint256 _balance) external;\n\n    /**\n     * @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\n     *    Can only be used with explicit delegation.\n     *    Does not reset delegation mode back to NOTSET.\n     * @param _from The address of the delegator\n     * @param _delegateAddresses Explicit delegation does not store delegatees' addresses,\n     *   so the caller must supply them.\n     * @return The amount still delegated (in case the list of delegates was incomplete).\n     */\n    function undelegateAllExplicit(\n        address _from,\n        address[] memory _delegateAddresses\n    ) external returns (uint256);\n\n    /**\n     * @notice Get the vote power of `_who` at block `_blockNumber`\n     *   Reads/updates cache and upholds revocations.\n     * @param _who The address to get voting power.\n     * @param _blockNumber The block number at which to fetch.\n     * @return Vote power of `_who` at `_blockNumber`.\n     */\n    function votePowerOfAtCached(\n        address _who,\n        uint256 _blockNumber\n    ) external returns (uint256);\n\n    /**\n     * @notice Get the current vote power of `_who`.\n     * @param _who The address to get voting power.\n     * @return Current vote power of `_who`.\n     */\n    function votePowerOf(address _who) external view returns (uint256);\n\n    /**\n     * @notice Get the vote power of `_who` at block `_blockNumber`\n     * @param _who The address to get voting power.\n     * @param _blockNumber The block number at which to fetch.\n     * @return Vote power of `_who` at `_blockNumber`.\n     */\n    function votePowerOfAt(\n        address _who,\n        uint256 _blockNumber\n    ) external view returns (uint256);\n\n    /**\n     * @notice Get the vote power of `_who` at block `_blockNumber`, ignoring revocation information (and cache).\n     * @param _who The address to get voting power.\n     * @param _blockNumber The block number at which to fetch.\n     * @return Vote power of `_who` at `_blockNumber`. Result doesn't change if vote power is revoked.\n     */\n    function votePowerOfAtIgnoringRevocation(\n        address _who,\n        uint256 _blockNumber\n    ) external view returns (uint256);\n\n    /**\n     * Return vote powers for several addresses in a batch.\n     * @param _owners The list of addresses to fetch vote power of.\n     * @param _blockNumber The block number at which to fetch.\n     * @return A list of vote powers.\n     */\n    function batchVotePowerOfAt(\n        address[] memory _owners,\n        uint256 _blockNumber\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\n     * @param _from Address of delegator\n     * @param _to Address of delegatee\n     * @param _balance The delegator's current balance\n     * @return The delegated vote power.\n     */\n    function votePowerFromTo(\n        address _from,\n        address _to,\n        uint256 _balance\n    ) external view returns (uint256);\n\n    /**\n     * @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\n     * @param _from Address of delegator\n     * @param _to Address of delegatee\n     * @param _balance The delegator's current balance\n     * @param _blockNumber The block number at which to fetch.\n     * @return The delegated vote power.\n     */\n    function votePowerFromToAt(\n        address _from,\n        address _to,\n        uint256 _balance,\n        uint _blockNumber\n    ) external view returns (uint256);\n\n    /**\n     * @notice Compute the current undelegated vote power of `_owner`\n     * @param _owner The address to get undelegated voting power.\n     * @param _balance Owner's current balance\n     * @return The unallocated vote power of `_owner`\n     */\n    function undelegatedVotePowerOf(\n        address _owner,\n        uint256 _balance\n    ) external view returns (uint256);\n\n    /**\n     * @notice Get the undelegated vote power of `_owner` at given block.\n     * @param _owner The address to get undelegated voting power.\n     * @param _blockNumber The block number at which to fetch.\n     * @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\n     */\n    function undelegatedVotePowerOfAt(\n        address _owner,\n        uint256 _balance,\n        uint256 _blockNumber\n    ) external view returns (uint256);\n\n    /**\n     * @notice Get the delegation mode for '_who'. This mode determines whether vote power is\n     *  allocated by percentage or by explicit value.\n     * @param _who The address to get delegation mode.\n     * @return Delegation mode (NOTSET=0, PERCENTAGE=1, AMOUNT=2))\n     */\n    function delegationModeOf(address _who) external view returns (uint256);\n\n    /**\n     * @notice Get the vote power delegation `_delegateAddresses`\n     *  and `pcts` of an `_owner`. Returned in two separate positional arrays.\n     * @param _owner The address to get delegations.\n     * @return _delegateAddresses Positional array of delegation addresses.\n     * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\n     * @return _count The number of delegates.\n     * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\n     */\n    function delegatesOf(\n        address _owner\n    )\n        external\n        view\n        returns (\n            address[] memory _delegateAddresses,\n            uint256[] memory _bips,\n            uint256 _count,\n            uint256 _delegationMode\n        );\n\n    /**\n     * @notice Get the vote power delegation `delegationAddresses`\n     *  and `pcts` of an `_owner`. Returned in two separate positional arrays.\n     * @param _owner The address to get delegations.\n     * @param _blockNumber The block for which we want to know the delegations.\n     * @return _delegateAddresses Positional array of delegation addresses.\n     * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\n     * @return _count The number of delegates.\n     * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\n     */\n    function delegatesOfAt(\n        address _owner,\n        uint256 _blockNumber\n    )\n        external\n        view\n        returns (\n            address[] memory _delegateAddresses,\n            uint256[] memory _bips,\n            uint256 _count,\n            uint256 _delegationMode\n        );\n\n    /**\n     * The VPToken (or some other contract) that owns this VPContract.\n     * All state changing methods may be called only from this address.\n     * This is because original msg.sender is sent in `_from` parameter\n     * and we must be sure that it cannot be faked by directly calling VPContract.\n     * Owner token is also used in case of replacement to recover vote powers from balances.\n     */\n    function ownerToken() external view returns (IVPToken);\n\n    /**\n     * Return true if this IIVPContract is configured to be used as a replacement for other contract.\n     * It means that vote powers are not necessarily correct at the initialization, therefore\n     * every method that reads vote power must check whether it is initialized for that address and block.\n     */\n    function isReplacement() external view returns (bool);\n}\n"
      },
      "npm/@flarenetwork/flare-periphery-contracts@0.1.33/coston2/token/interfaces/IIVPToken.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"../../IVPToken.sol\";\nimport \"../../IGovernanceVotePower.sol\";\nimport \"./IIVPContract.sol\";\nimport \"./IIGovernanceVotePower.sol\";\nimport \"./IICleanable.sol\";\n\ninterface IIVPToken is IVPToken, IICleanable {\n    /**\n     * Set the contract that is allowed to set cleanupBlockNumber.\n     * Usually this will be an instance of CleanupBlockNumberManager.\n     */\n    function setCleanupBlockNumberManager(\n        address _cleanupBlockNumberManager\n    ) external;\n\n    /**\n     * Sets new governance vote power contract that allows token owners to participate in governance voting\n     * and delegate governance vote power.\n     */\n    function setGovernanceVotePower(\n        IIGovernanceVotePower _governanceVotePower\n    ) external;\n\n    /**\n     * @notice Get the total vote power at block `_blockNumber` using cache.\n     *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\n     *   Can only be used if `_blockNumber` is in the past, otherwise reverts.\n     * @param _blockNumber The block number at which to fetch.\n     * @return The total vote power at the block (sum of all accounts' vote powers).\n     */\n    function totalVotePowerAtCached(\n        uint256 _blockNumber\n    ) external returns (uint256);\n\n    /**\n     * @notice Get the vote power of `_owner` at block `_blockNumber` using cache.\n     *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\n     *   Can only be used if _blockNumber is in the past, otherwise reverts.\n     * @param _owner The address to get voting power.\n     * @param _blockNumber The block number at which to fetch.\n     * @return Vote power of `_owner` at `_blockNumber`.\n     */\n    function votePowerOfAtCached(\n        address _owner,\n        uint256 _blockNumber\n    ) external returns (uint256);\n\n    /**\n     * Return vote powers for several addresses in a batch.\n     * @param _owners The list of addresses to fetch vote power of.\n     * @param _blockNumber The block number at which to fetch.\n     * @return A list of vote powers.\n     */\n    function batchVotePowerOfAt(\n        address[] memory _owners,\n        uint256 _blockNumber\n    ) external view returns (uint256[] memory);\n}\n"
      },
      "npm/@openzeppelin/contracts@4.9.6/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@4.9.6/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/interfaces/draft-IERC6093.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/interfaces/IERC1363.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/interfaces/IERC1363Receiver.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title IERC1363Receiver\n * @dev Interface for any contract that wants to support `transferAndCall` or `transferFromAndCall`\n * from ERC-1363 token contracts.\n */\ninterface IERC1363Receiver {\n    /**\n     * @dev Whenever ERC-1363 tokens are transferred to this contract via `transferAndCall` or `transferFromAndCall`\n     * by `operator` from `from`, this function is called.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))`\n     * (i.e. 0x88a7ca5c, or its own function selector).\n     *\n     * @param operator The address which called `transferAndCall` or `transferFromAndCall` function.\n     * @param from The address which the tokens are transferred from.\n     * @param value The amount of tokens transferred.\n     * @param data Additional data with no specified format.\n     * @return `bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))` if transfer is allowed unless throwing.\n     */\n    function onTransferReceived(\n        address operator,\n        address from,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/interfaces/IERC1363Spender.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363Spender.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title IERC1363Spender\n * @dev Interface for any contract that wants to support `approveAndCall`\n * from ERC-1363 token contracts.\n */\ninterface IERC1363Spender {\n    /**\n     * @dev Whenever an ERC-1363 token `owner` approves this contract via `approveAndCall`\n     * to spend their tokens, this function is called.\n     *\n     * NOTE: To accept the approval, this must return\n     * `bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))`\n     * (i.e. 0x7b04a2d0, or its own function selector).\n     *\n     * @param owner The address which called `approveAndCall` function and previously owned the tokens.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format.\n     * @return `bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))` if approval is allowed unless throwing.\n     */\n    function onApprovalReceived(address owner, uint256 value, bytes calldata data) external returns (bytes4);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/interfaces/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/interfaces/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/interfaces/IERC5267.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.20;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/proxy/Clones.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.20;\n\nimport {Create2} from \"../utils/Create2.sol\";\nimport {Errors} from \"../utils/Errors.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[ERC-1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n */\nlibrary Clones {\n    error CloneArgumentsTooLong();\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        return clone(implementation, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Clones-clone-address-}[clone], but with a `value` parameter to send native currency\n     * to the new contract.\n     *\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\n     */\n    function clone(address implementation, uint256 value) internal returns (address instance) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        assembly (\"memory-safe\") {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(value, 0x09, 0x37)\n        }\n        if (instance == address(0)) {\n            revert Errors.FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple times will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        return cloneDeterministic(implementation, salt, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Clones-cloneDeterministic-address-bytes32-}[cloneDeterministic], but with\n     * a `value` parameter to send native currency to the new contract.\n     *\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\n     */\n    function cloneDeterministic(\n        address implementation,\n        bytes32 salt,\n        uint256 value\n    ) internal returns (address instance) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        assembly (\"memory-safe\") {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(value, 0x09, 0x37, salt)\n        }\n        if (instance == address(0)) {\n            revert Errors.FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := and(keccak256(add(ptr, 0x43), 0x55), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation` with custom\n     * immutable arguments. These are provided through `args` and cannot be changed after deployment. To\n     * access the arguments within the implementation, use {fetchCloneArgs}.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function cloneWithImmutableArgs(address implementation, bytes memory args) internal returns (address instance) {\n        return cloneWithImmutableArgs(implementation, args, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Clones-cloneWithImmutableArgs-address-bytes-}[cloneWithImmutableArgs], but with a `value`\n     * parameter to send native currency to the new contract.\n     *\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\n     */\n    function cloneWithImmutableArgs(\n        address implementation,\n        bytes memory args,\n        uint256 value\n    ) internal returns (address instance) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        bytes memory bytecode = _cloneCodeWithImmutableArgs(implementation, args);\n        assembly (\"memory-safe\") {\n            instance := create(value, add(bytecode, 0x20), mload(bytecode))\n        }\n        if (instance == address(0)) {\n            revert Errors.FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation` with custom\n     * immutable arguments. These are provided through `args` and cannot be changed after deployment. To\n     * access the arguments within the implementation, use {fetchCloneArgs}.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy the clone. Using the same\n     * `implementation`, `args` and `salt` multiple times will revert, since the clones cannot be deployed twice\n     * at the same address.\n     */\n    function cloneDeterministicWithImmutableArgs(\n        address implementation,\n        bytes memory args,\n        bytes32 salt\n    ) internal returns (address instance) {\n        return cloneDeterministicWithImmutableArgs(implementation, args, salt, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Clones-cloneDeterministicWithImmutableArgs-address-bytes-bytes32-}[cloneDeterministicWithImmutableArgs],\n     * but with a `value` parameter to send native currency to the new contract.\n     *\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\n     */\n    function cloneDeterministicWithImmutableArgs(\n        address implementation,\n        bytes memory args,\n        bytes32 salt,\n        uint256 value\n    ) internal returns (address instance) {\n        bytes memory bytecode = _cloneCodeWithImmutableArgs(implementation, args);\n        return Create2.deploy(value, salt, bytecode);\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministicWithImmutableArgs}.\n     */\n    function predictDeterministicAddressWithImmutableArgs(\n        address implementation,\n        bytes memory args,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        bytes memory bytecode = _cloneCodeWithImmutableArgs(implementation, args);\n        return Create2.computeAddress(salt, keccak256(bytecode), deployer);\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministicWithImmutableArgs}.\n     */\n    function predictDeterministicAddressWithImmutableArgs(\n        address implementation,\n        bytes memory args,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddressWithImmutableArgs(implementation, args, salt, address(this));\n    }\n\n    /**\n     * @dev Get the immutable args attached to a clone.\n     *\n     * - If `instance` is a clone that was deployed using `clone` or `cloneDeterministic`, this\n     *   function will return an empty array.\n     * - If `instance` is a clone that was deployed using `cloneWithImmutableArgs` or\n     *   `cloneDeterministicWithImmutableArgs`, this function will return the args array used at\n     *   creation.\n     * - If `instance` is NOT a clone deployed using this library, the behavior is undefined. This\n     *   function should only be used to check addresses that are known to be clones.\n     */\n    function fetchCloneArgs(address instance) internal view returns (bytes memory) {\n        bytes memory result = new bytes(instance.code.length - 45); // revert if length is too short\n        assembly (\"memory-safe\") {\n            extcodecopy(instance, add(result, 32), 45, mload(result))\n        }\n        return result;\n    }\n\n    /**\n     * @dev Helper that prepares the initcode of the proxy with immutable args.\n     *\n     * An assembly variant of this function requires copying the `args` array, which can be efficiently done using\n     * `mcopy`. Unfortunately, that opcode is not available before cancun. A pure solidity implementation using\n     * abi.encodePacked is more expensive but also more portable and easier to review.\n     *\n     * NOTE: https://eips.ethereum.org/EIPS/eip-170[EIP-170] limits the length of the contract code to 24576 bytes.\n     * With the proxy code taking 45 bytes, that limits the length of the immutable args to 24531 bytes.\n     */\n    function _cloneCodeWithImmutableArgs(\n        address implementation,\n        bytes memory args\n    ) private pure returns (bytes memory) {\n        if (args.length > 24531) revert CloneArgumentsTooLong();\n        return\n            abi.encodePacked(\n                hex\"61\",\n                uint16(args.length + 45),\n                hex\"3d81600a3d39f3363d3d373d3d3d363d73\",\n                implementation,\n                hex\"5af43d82803e903d91602b57fd5bf3\",\n                args\n            );\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/proxy/utils/Initializable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\n     *\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\n     */\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\n        return INITIALIZABLE_STORAGE;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        bytes32 slot = _initializableStorageSlot();\n        assembly {\n            $.slot := slot\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/token/ERC20/ERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/token/ERC20/extensions/ERC1363.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/extensions/ERC1363.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC20} from \"../ERC20.sol\";\nimport {IERC165, ERC165} from \"../../../utils/introspection/ERC165.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\nimport {ERC1363Utils} from \"../utils/ERC1363Utils.sol\";\n\n/**\n * @title ERC1363\n * @dev Extension of {ERC20} tokens that adds support for code execution after transfers and approvals\n * on recipient contracts. Calls after transfers are enabled through the {ERC1363-transferAndCall} and\n * {ERC1363-transferFromAndCall} methods while calls after approvals can be made with {ERC1363-approveAndCall}\n *\n * _Available since v5.1._\n */\nabstract contract ERC1363 is ERC20, ERC165, IERC1363 {\n    /**\n     * @dev Indicates a failure within the {transfer} part of a transferAndCall operation.\n     * @param receiver Address to which tokens are being transferred.\n     * @param value Amount of tokens to be transferred.\n     */\n    error ERC1363TransferFailed(address receiver, uint256 value);\n\n    /**\n     * @dev Indicates a failure within the {transferFrom} part of a transferFromAndCall operation.\n     * @param sender Address from which to send tokens.\n     * @param receiver Address to which tokens are being transferred.\n     * @param value Amount of tokens to be transferred.\n     */\n    error ERC1363TransferFromFailed(address sender, address receiver, uint256 value);\n\n    /**\n     * @dev Indicates a failure within the {approve} part of a approveAndCall operation.\n     * @param spender Address which will spend the funds.\n     * @param value Amount of tokens to be spent.\n     */\n    error ERC1363ApproveFailed(address spender, uint256 value);\n\n    /**\n     * @inheritdoc IERC165\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1363).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`. Returns a flag that indicates\n     * if the call succeeded.\n     *\n     * Requirements:\n     *\n     * - The target has code (i.e. is a contract).\n     * - The target `to` must implement the {IERC1363Receiver} interface.\n     * - The target must return the {IERC1363Receiver-onTransferReceived} selector to accept the transfer.\n     * - The internal {transfer} must succeed (returned `true`).\n     */\n    function transferAndCall(address to, uint256 value) public returns (bool) {\n        return transferAndCall(to, value, \"\");\n    }\n\n    /**\n     * @dev Variant of {transferAndCall} that accepts an additional `data` parameter with\n     * no specified format.\n     */\n    function transferAndCall(address to, uint256 value, bytes memory data) public virtual returns (bool) {\n        if (!transfer(to, value)) {\n            revert ERC1363TransferFailed(to, value);\n        }\n        ERC1363Utils.checkOnERC1363TransferReceived(_msgSender(), _msgSender(), to, value, data);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`. Returns a flag that indicates\n     * if the call succeeded.\n     *\n     * Requirements:\n     *\n     * - The target has code (i.e. is a contract).\n     * - The target `to` must implement the {IERC1363Receiver} interface.\n     * - The target must return the {IERC1363Receiver-onTransferReceived} selector to accept the transfer.\n     * - The internal {transferFrom} must succeed (returned `true`).\n     */\n    function transferFromAndCall(address from, address to, uint256 value) public returns (bool) {\n        return transferFromAndCall(from, to, value, \"\");\n    }\n\n    /**\n     * @dev Variant of {transferFromAndCall} that accepts an additional `data` parameter with\n     * no specified format.\n     */\n    function transferFromAndCall(\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) public virtual returns (bool) {\n        if (!transferFrom(from, to, value)) {\n            revert ERC1363TransferFromFailed(from, to, value);\n        }\n        ERC1363Utils.checkOnERC1363TransferReceived(_msgSender(), from, to, value, data);\n        return true;\n    }\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * Returns a flag that indicates if the call succeeded.\n     *\n     * Requirements:\n     *\n     * - The target has code (i.e. is a contract).\n     * - The target `spender` must implement the {IERC1363Spender} interface.\n     * - The target must return the {IERC1363Spender-onApprovalReceived} selector to accept the approval.\n     * - The internal {approve} must succeed (returned `true`).\n     */\n    function approveAndCall(address spender, uint256 value) public returns (bool) {\n        return approveAndCall(spender, value, \"\");\n    }\n\n    /**\n     * @dev Variant of {approveAndCall} that accepts an additional `data` parameter with\n     * no specified format.\n     */\n    function approveAndCall(address spender, uint256 value, bytes memory data) public virtual returns (bool) {\n        if (!approve(spender, value)) {\n            revert ERC1363ApproveFailed(spender, value);\n        }\n        ERC1363Utils.checkOnERC1363ApprovalReceived(_msgSender(), spender, value, data);\n        return true;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/token/ERC20/extensions/ERC20Burnable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC20} from \"../ERC20.sol\";\nimport {Context} from \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys a `value` amount of tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 value) public virtual {\n        _burn(_msgSender(), value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\n     * the caller's allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `value`.\n     */\n    function burnFrom(address account, uint256 value) public virtual {\n        _spendAllowance(account, _msgSender(), value);\n        _burn(account, value);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/token/ERC20/extensions/ERC20Permit.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/ERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20Permit} from \"./IERC20Permit.sol\";\nimport {ERC20} from \"../ERC20.sol\";\nimport {ECDSA} from \"../../../utils/cryptography/ECDSA.sol\";\nimport {EIP712} from \"../../../utils/cryptography/EIP712.sol\";\nimport {Nonces} from \"../../../utils/Nonces.sol\";\n\n/**\n * @dev Implementation of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {\n    bytes32 private constant PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Permit deadline has expired.\n     */\n    error ERC2612ExpiredSignature(uint256 deadline);\n\n    /**\n     * @dev Mismatched signature.\n     */\n    error ERC2612InvalidSigner(address signer, address owner);\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC-20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        if (block.timestamp > deadline) {\n            revert ERC2612ExpiredSignature(deadline);\n        }\n\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        if (signer != owner) {\n            revert ERC2612InvalidSigner(signer, owner);\n        }\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\n        return super.nonces(owner);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/token/ERC20/extensions/IERC20Metadata.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/token/ERC20/extensions/IERC20Permit.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/token/ERC20/utils/ERC1363Utils.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/utils/ERC1363Utils.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1363Receiver} from \"../../../interfaces/IERC1363Receiver.sol\";\nimport {IERC1363Spender} from \"../../../interfaces/IERC1363Spender.sol\";\n\n/**\n * @dev Library that provides common ERC-1363 utility functions.\n *\n * See https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n */\nlibrary ERC1363Utils {\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1363InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the token `spender`. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1363InvalidSpender(address spender);\n\n    /**\n     * @dev Performs a call to {IERC1363Receiver-onTransferReceived} on a target address.\n     *\n     * Requirements:\n     *\n     * - The target has code (i.e. is a contract).\n     * - The target `to` must implement the {IERC1363Receiver} interface.\n     * - The target must return the {IERC1363Receiver-onTransferReceived} selector to accept the transfer.\n     */\n    function checkOnERC1363TransferReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            revert ERC1363InvalidReceiver(to);\n        }\n\n        try IERC1363Receiver(to).onTransferReceived(operator, from, value, data) returns (bytes4 retval) {\n            if (retval != IERC1363Receiver.onTransferReceived.selector) {\n                revert ERC1363InvalidReceiver(to);\n            }\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert ERC1363InvalidReceiver(to);\n            } else {\n                assembly (\"memory-safe\") {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Performs a call to {IERC1363Spender-onApprovalReceived} on a target address.\n     *\n     * Requirements:\n     *\n     * - The target has code (i.e. is a contract).\n     * - The target `spender` must implement the {IERC1363Spender} interface.\n     * - The target must return the {IERC1363Spender-onApprovalReceived} selector to accept the approval.\n     */\n    function checkOnERC1363ApprovalReceived(\n        address operator,\n        address spender,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (spender.code.length == 0) {\n            revert ERC1363InvalidSpender(spender);\n        }\n\n        try IERC1363Spender(spender).onApprovalReceived(operator, value, data) returns (bytes4 retval) {\n            if (retval != IERC1363Spender.onApprovalReceived.selector) {\n                revert ERC1363InvalidSpender(spender);\n            }\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert ERC1363InvalidSpender(spender);\n            } else {\n                assembly (\"memory-safe\") {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/utils/Create2.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Create2.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev There's no code to deploy.\n     */\n    error Create2EmptyBytecode();\n\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n        if (bytecode.length == 0) {\n            revert Create2EmptyBytecode();\n        }\n        assembly (\"memory-safe\") {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n            // if no address was created, and returndata is not empty, bubble revert\n            if and(iszero(addr), not(iszero(returndatasize()))) {\n                let p := mload(0x40)\n                returndatacopy(p, 0, returndatasize())\n                revert(p, returndatasize())\n            }\n        }\n        if (addr == address(0)) {\n            revert Errors.FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := and(keccak256(start, 85), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/utils/cryptography/ECDSA.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes memory signature\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly (\"memory-safe\") {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/utils/cryptography/EIP712.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.20;\n\nimport {MessageHashUtils} from \"./MessageHashUtils.sol\";\nimport {ShortStrings, ShortString} from \"../ShortStrings.sol\";\nimport {IERC5267} from \"../../interfaces/IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    // slither-disable-next-line constable-states\n    string private _nameFallback;\n    // slither-disable-next-line constable-states\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @inheritdoc IERC5267\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _name which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Name() internal view returns (string memory) {\n        return _name.toStringWithFallback(_nameFallback);\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _version which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Version() internal view returns (string memory) {\n        return _version.toStringWithFallback(_versionFallback);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/utils/cryptography/MessageHashUtils.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Variant of {toDataWithIntendedValidatorHash-address-bytes} optimized for cases where `data` is a bytes32.\n     */\n    function toDataWithIntendedValidatorHash(\n        address validator,\n        bytes32 messageHash\n    ) internal pure returns (bytes32 digest) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, hex\"19_00\")\n            mstore(0x02, shl(96, validator))\n            mstore(0x16, messageHash)\n            digest := keccak256(0x00, 0x36)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/utils/Errors.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n *\n * _Available since v5.1._\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n\n    /**\n     * @dev A necessary precompile is missing.\n     */\n    error MissingPrecompile(address);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/utils/introspection/ERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/utils/math/Math.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\nimport {Panic} from \"../Panic.sol\";\nimport {SafeCast} from \"./SafeCast.sol\";\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Return the 512-bit addition of two uint256.\n     *\n     * The result is stored in two 256 variables such that sum = high * 2²⁵⁶ + low.\n     */\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\n        assembly (\"memory-safe\") {\n            low := add(a, b)\n            high := lt(low, a)\n        }\n    }\n\n    /**\n     * @dev Return the 512-bit multiplication of two uint256.\n     *\n     * The result is stored in two 256 variables such that product = high * 2²⁵⁶ + low.\n     */\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2²⁵⁶ and mod 2²⁵⁶ - 1, then use\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = high * 2²⁵⁶ + low.\n        assembly (\"memory-safe\") {\n            let mm := mulmod(a, b, not(0))\n            low := mul(a, b)\n            high := sub(sub(mm, low), lt(mm, low))\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a + b;\n            success = c >= a;\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a - b;\n            success = c <= a;\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a * b;\n            assembly (\"memory-safe\") {\n                // Only true when the multiplication doesn't overflow\n                // (c / a == b) || (a == 0)\n                success := or(eq(div(c, a), b), iszero(a))\n            }\n            // equivalent to: success ? c : 0\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            success = b > 0;\n            assembly (\"memory-safe\") {\n                // The `DIV` opcode returns zero when the denominator is 0.\n                result := div(a, b)\n            }\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            success = b > 0;\n            assembly (\"memory-safe\") {\n                // The `MOD` opcode returns zero when the denominator is 0.\n                result := mod(a, b)\n            }\n        }\n    }\n\n    /**\n     * @dev Unsigned saturating addition, bounds to `2²⁵⁶ - 1` instead of overflowing.\n     */\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        (bool success, uint256 result) = tryAdd(a, b);\n        return ternary(success, result, type(uint256).max);\n    }\n\n    /**\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\n     */\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\n        (, uint256 result) = trySub(a, b);\n        return result;\n    }\n\n    /**\n     * @dev Unsigned saturating multiplication, bounds to `2²⁵⁶ - 1` instead of overflowing.\n     */\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        (bool success, uint256 result) = tryMul(a, b);\n        return ternary(success, result, type(uint256).max);\n    }\n\n    /**\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n     *\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n     * one branch when needed, making this function more expensive.\n     */\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\n        unchecked {\n            // branchless ternary works because:\n            // b ^ (a ^ b) == a\n            // b ^ 0 == b\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a > b, a, b);\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a < b, a, b);\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n\n        // The following calculation ensures accurate ceiling division without overflow.\n        // Since a is non-zero, (a - 1) / b will not overflow.\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\n        // when a = type(uint256).max and b = 1.\n        unchecked {\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\n        }\n    }\n\n    /**\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     *\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            (uint256 high, uint256 low) = mul512(x, y);\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (high == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return low / denominator;\n            }\n\n            // Make sure the result is less than 2²⁵⁶. Also prevents denominator == 0.\n            if (denominator <= high) {\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [high low].\n            uint256 remainder;\n            assembly (\"memory-safe\") {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                high := sub(high, gt(remainder, low))\n                low := sub(low, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly (\"memory-safe\") {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [high low] by twos.\n                low := div(low, twos)\n\n                // Flip twos such that it is 2²⁵⁶ / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from high into low.\n            low |= high * twos;\n\n            // Invert denominator mod 2²⁵⁶. Now that denominator is an odd number, it has an inverse modulo 2²⁵⁶ such\n            // that denominator * inv ≡ 1 mod 2²⁵⁶. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv ≡ 1 mod 2⁴.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹⁶\n            inverse *= 2 - denominator * inverse; // inverse mod 2³²\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁶⁴\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹²⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2²⁵⁶\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2²⁵⁶. Since the preconditions guarantee that the outcome is\n            // less than 2²⁵⁶, this is the final result. We don't need to compute the high bits of the result and high\n            // is no longer required.\n            result = low * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\n    }\n\n    /**\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\n     */\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\n        unchecked {\n            (uint256 high, uint256 low) = mul512(x, y);\n            if (high >= 1 << n) {\n                Panic.panic(Panic.UNDER_OVERFLOW);\n            }\n            return (high << (256 - n)) | (low >> n);\n        }\n    }\n\n    /**\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\n     */\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\n    }\n\n    /**\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\n     *\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\n     *\n     * If the input value is not inversible, 0 is returned.\n     *\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\n     */\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\n        unchecked {\n            if (n == 0) return 0;\n\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\n            // ax + ny = 1\n            // ax = 1 + (-y)n\n            // ax ≡ 1 (mod n) # x is the inverse of a modulo n\n\n            // If the remainder is 0 the gcd is n right away.\n            uint256 remainder = a % n;\n            uint256 gcd = n;\n\n            // Therefore the initial coefficients are:\n            // ax + ny = gcd(a, n) = n\n            // 0a + 1n = n\n            int256 x = 0;\n            int256 y = 1;\n\n            while (remainder != 0) {\n                uint256 quotient = gcd / remainder;\n\n                (gcd, remainder) = (\n                    // The old remainder is the next gcd to try.\n                    remainder,\n                    // Compute the next remainder.\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\n                    // where gcd is at most n (capped to type(uint256).max)\n                    gcd - remainder * quotient\n                );\n\n                (x, y) = (\n                    // Increment the coefficient of a.\n                    y,\n                    // Decrement the coefficient of n.\n                    // Can overflow, but the result is casted to uint256 so that the\n                    // next value of y is \"wrapped around\" to a value between 0 and n - 1.\n                    x - y * int256(quotient)\n                );\n            }\n\n            if (gcd != 1) return 0; // No inverse exists.\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\n        }\n    }\n\n    /**\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\n     *\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\n     * prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\n     *\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\n     */\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\n        unchecked {\n            return Math.modExp(a, p - 2, p);\n        }\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\n     *\n     * Requirements:\n     * - modulus can't be zero\n     * - underlying staticcall to precompile must succeed\n     *\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\n     * interpreted as 0.\n     */\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\n        (bool success, uint256 result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\n     * to operate modulo 0 or if the underlying precompile reverted.\n     *\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\n     * of a revert, but the result may be incorrectly interpreted as 0.\n     */\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\n        if (m == 0) return (false, 0);\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            // | Offset    | Content    | Content (Hex)                                                      |\n            // |-----------|------------|--------------------------------------------------------------------|\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\n            mstore(ptr, 0x20)\n            mstore(add(ptr, 0x20), 0x20)\n            mstore(add(ptr, 0x40), 0x20)\n            mstore(add(ptr, 0x60), b)\n            mstore(add(ptr, 0x80), e)\n            mstore(add(ptr, 0xa0), m)\n\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\n            // so we can use the memory scratch space located at offset 0.\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\n            result := mload(0x00)\n        }\n    }\n\n    /**\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\n     */\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\n        (bool success, bytes memory result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\n     */\n    function tryModExp(\n        bytes memory b,\n        bytes memory e,\n        bytes memory m\n    ) internal view returns (bool success, bytes memory result) {\n        if (_zeroBytes(m)) return (false, new bytes(0));\n\n        uint256 mLen = m.length;\n\n        // Encode call args in result and move the free memory pointer\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\n\n        assembly (\"memory-safe\") {\n            let dataPtr := add(result, 0x20)\n            // Write result on top of args to avoid allocating extra memory.\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\n            // Overwrite the length.\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\n            mstore(result, mLen)\n            // Set the memory pointer after the returned data.\n            mstore(0x40, add(dataPtr, mLen))\n        }\n    }\n\n    /**\n     * @dev Returns whether the provided byte array is zero.\n     */\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\n        for (uint256 i = 0; i < byteArray.length; ++i) {\n            if (byteArray[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\n     * using integer operations.\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        unchecked {\n            // Take care of easy edge cases when a == 0 or a == 1\n            if (a <= 1) {\n                return a;\n            }\n\n            // In this function, we use Newton's method to get a root of `f(x) := x² - a`. It involves building a\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\n            // the current value as `ε_n = | x_n - sqrt(a) |`.\n            //\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\n            // of the target. (i.e. `2**(e-1) ≤ sqrt(a) < 2**e`). We know that `e ≤ 128` because `(2¹²⁸)² = 2²⁵⁶` is\n            // bigger than any uint256.\n            //\n            // By noticing that\n            // `2**(e-1) ≤ sqrt(a) < 2**e → (2**(e-1))² ≤ a < (2**e)² → 2**(2*e-2) ≤ a < 2**(2*e)`\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\n            // to the msb function.\n            uint256 aa = a;\n            uint256 xn = 1;\n\n            if (aa >= (1 << 128)) {\n                aa >>= 128;\n                xn <<= 64;\n            }\n            if (aa >= (1 << 64)) {\n                aa >>= 64;\n                xn <<= 32;\n            }\n            if (aa >= (1 << 32)) {\n                aa >>= 32;\n                xn <<= 16;\n            }\n            if (aa >= (1 << 16)) {\n                aa >>= 16;\n                xn <<= 8;\n            }\n            if (aa >= (1 << 8)) {\n                aa >>= 8;\n                xn <<= 4;\n            }\n            if (aa >= (1 << 4)) {\n                aa >>= 4;\n                xn <<= 2;\n            }\n            if (aa >= (1 << 2)) {\n                xn <<= 1;\n            }\n\n            // We now have x_n such that `x_n = 2**(e-1) ≤ sqrt(a) < 2**e = 2 * x_n`. This implies ε_n ≤ 2**(e-1).\n            //\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to ε_n ≤ 2**(e-2).\n            // This is going to be our x_0 (and ε_0)\n            xn = (3 * xn) >> 1; // ε_0 := | x_0 - sqrt(a) | ≤ 2**(e-2)\n\n            // From here, Newton's method give us:\n            // x_{n+1} = (x_n + a / x_n) / 2\n            //\n            // One should note that:\n            // x_{n+1}² - a = ((x_n + a / x_n) / 2)² - a\n            //              = ((x_n² + a) / (2 * x_n))² - a\n            //              = (x_n⁴ + 2 * a * x_n² + a²) / (4 * x_n²) - a\n            //              = (x_n⁴ + 2 * a * x_n² + a² - 4 * a * x_n²) / (4 * x_n²)\n            //              = (x_n⁴ - 2 * a * x_n² + a²) / (4 * x_n²)\n            //              = (x_n² - a)² / (2 * x_n)²\n            //              = ((x_n² - a) / (2 * x_n))²\n            //              ≥ 0\n            // Which proves that for all n ≥ 1, sqrt(a) ≤ x_n\n            //\n            // This gives us the proof of quadratic convergence of the sequence:\n            // ε_{n+1} = | x_{n+1} - sqrt(a) |\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\n            //         = | (x_n² + a - 2*x_n*sqrt(a)) / (2 * x_n) |\n            //         = | (x_n - sqrt(a))² / (2 * x_n) |\n            //         = | ε_n² / (2 * x_n) |\n            //         = ε_n² / | (2 * x_n) |\n            //\n            // For the first iteration, we have a special case where x_0 is known:\n            // ε_1 = ε_0² / | (2 * x_0) |\n            //     ≤ (2**(e-2))² / (2 * (2**(e-1) + 2**(e-2)))\n            //     ≤ 2**(2*e-4) / (3 * 2**(e-1))\n            //     ≤ 2**(e-3) / 3\n            //     ≤ 2**(e-3-log2(3))\n            //     ≤ 2**(e-4.5)\n            //\n            // For the following iterations, we use the fact that, 2**(e-1) ≤ sqrt(a) ≤ x_n:\n            // ε_{n+1} = ε_n² / | (2 * x_n) |\n            //         ≤ (2**(e-k))² / (2 * 2**(e-1))\n            //         ≤ 2**(2*e-2*k) / 2**e\n            //         ≤ 2**(e-2*k)\n            xn = (xn + a / xn) >> 1; // ε_1 := | x_1 - sqrt(a) | ≤ 2**(e-4.5)  -- special case, see above\n            xn = (xn + a / xn) >> 1; // ε_2 := | x_2 - sqrt(a) | ≤ 2**(e-9)    -- general case with k = 4.5\n            xn = (xn + a / xn) >> 1; // ε_3 := | x_3 - sqrt(a) | ≤ 2**(e-18)   -- general case with k = 9\n            xn = (xn + a / xn) >> 1; // ε_4 := | x_4 - sqrt(a) | ≤ 2**(e-36)   -- general case with k = 18\n            xn = (xn + a / xn) >> 1; // ε_5 := | x_5 - sqrt(a) | ≤ 2**(e-72)   -- general case with k = 36\n            xn = (xn + a / xn) >> 1; // ε_6 := | x_6 - sqrt(a) | ≤ 2**(e-144)  -- general case with k = 72\n\n            // Because e ≤ 128 (as discussed during the first estimation phase), we know have reached a precision\n            // ε_6 ≤ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\n            // sqrt(a) or sqrt(a) + 1.\n            return xn - SafeCast.toUint(xn > a / xn);\n        }\n    }\n\n    /**\n     * @dev Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 x) internal pure returns (uint256 r) {\n        // If value has upper 128 bits set, log2 result is at least 128\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\n        // If upper 64 bits of 128-bit half set, add 64 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\n        // If upper 32 bits of 64-bit half set, add 32 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\n        // If upper 16 bits of 32-bit half set, add 16 to result\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\n        // If upper 8 bits of 16-bit half set, add 8 to result\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\n        // If upper 4 bits of 8-bit half set, add 4 to result\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\n\n        // Shifts value right by the current result and use it as an index into this lookup table:\n        //\n        // | x (4 bits) |  index  | table[index] = MSB position |\n        // |------------|---------|-----------------------------|\n        // |    0000    |    0    |        table[0] = 0         |\n        // |    0001    |    1    |        table[1] = 0         |\n        // |    0010    |    2    |        table[2] = 1         |\n        // |    0011    |    3    |        table[3] = 1         |\n        // |    0100    |    4    |        table[4] = 2         |\n        // |    0101    |    5    |        table[5] = 2         |\n        // |    0110    |    6    |        table[6] = 2         |\n        // |    0111    |    7    |        table[7] = 2         |\n        // |    1000    |    8    |        table[8] = 3         |\n        // |    1001    |    9    |        table[9] = 3         |\n        // |    1010    |   10    |        table[10] = 3        |\n        // |    1011    |   11    |        table[11] = 3        |\n        // |    1100    |   12    |        table[12] = 3        |\n        // |    1101    |   13    |        table[13] = 3        |\n        // |    1110    |   14    |        table[14] = 3        |\n        // |    1111    |   15    |        table[15] = 3        |\n        //\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\n        assembly (\"memory-safe\") {\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 x) internal pure returns (uint256 r) {\n        // If value has upper 128 bits set, log2 result is at least 128\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\n        // If upper 64 bits of 128-bit half set, add 64 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\n        // If upper 32 bits of 64-bit half set, add 32 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\n        // If upper 16 bits of 32-bit half set, add 16 to result\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/utils/math/SafeCast.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value > type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value > type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value > type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value > type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value > type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value > type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value > type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value > type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value > type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value > type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value > type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value > type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value > type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value > type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value > type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value > type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value > type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value > type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value > type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value > type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value > type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value > type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value > type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value > type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value > type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value > type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value > type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value > type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value > type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value > type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value > type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value < 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value > uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n\n    /**\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\n     */\n    function toUint(bool b) internal pure returns (uint256 u) {\n        assembly (\"memory-safe\") {\n            u := iszero(iszero(b))\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/utils/math/SignedMath.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\nimport {SafeCast} from \"./SafeCast.sol\";\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n     *\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n     * one branch when needed, making this function more expensive.\n     */\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\n        unchecked {\n            // branchless ternary works because:\n            // b ^ (a ^ b) == a\n            // b ^ 0 == b\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return ternary(a > b, a, b);\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return ternary(a < b, a, b);\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // Formula from the \"Bit Twiddling Hacks\" by Sean Eron Anderson.\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\n            // taking advantage of the most significant (or \"sign\" bit) in two's complement representation.\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\n            int256 mask = n >> 255;\n\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\n            return uint256((n + mask) ^ mask);\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/utils/Nonces.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\n */\nabstract contract Nonces {\n    /**\n     * @dev The nonce used for an `account` is not the expected current nonce.\n     */\n    error InvalidAccountNonce(address account, uint256 currentNonce);\n\n    mapping(address account => uint256) private _nonces;\n\n    /**\n     * @dev Returns the next unused nonce for an address.\n     */\n    function nonces(address owner) public view virtual returns (uint256) {\n        return _nonces[owner];\n    }\n\n    /**\n     * @dev Consumes a nonce.\n     *\n     * Returns the current value and increments nonce.\n     */\n    function _useNonce(address owner) internal virtual returns (uint256) {\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\n        // decremented or reset. This guarantees that the nonce never overflows.\n        unchecked {\n            // It is important to do x++ and not ++x here.\n            return _nonces[owner]++;\n        }\n    }\n\n    /**\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\n     */\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\n        uint256 current = _useNonce(owner);\n        if (nonce != current) {\n            revert InvalidAccountNonce(owner, current);\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/utils/Panic.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Helper library for emitting standardized panic codes.\n *\n * ```solidity\n * contract Example {\n *      using Panic for uint256;\n *\n *      // Use any of the declared internal constants\n *      function foo() { Panic.GENERIC.panic(); }\n *\n *      // Alternatively\n *      function foo() { Panic.panic(Panic.GENERIC); }\n * }\n * ```\n *\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\n *\n * _Available since v5.1._\n */\n// slither-disable-next-line unused-state\nlibrary Panic {\n    /// @dev generic / unspecified error\n    uint256 internal constant GENERIC = 0x00;\n    /// @dev used by the assert() builtin\n    uint256 internal constant ASSERT = 0x01;\n    /// @dev arithmetic underflow or overflow\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\n    /// @dev division or modulo by zero\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\n    /// @dev enum conversion error\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\n    /// @dev invalid encoding in storage\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\n    /// @dev empty array pop\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\n    /// @dev array out of bounds access\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\n    /// @dev resource error (too large allocation or too large array)\n    uint256 internal constant RESOURCE_ERROR = 0x41;\n    /// @dev calling invalid internal function\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\n\n    /// @dev Reverts with a panic code. Recommended to use with\n    /// the internal constants with predefined codes.\n    function panic(uint256 code) internal pure {\n        assembly (\"memory-safe\") {\n            mstore(0x00, 0x4e487b71)\n            mstore(0x20, code)\n            revert(0x1c, 0x24)\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/utils/ShortStrings.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        assembly (\"memory-safe\") {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {toShortStringWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n     * {toShortStringWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/utils/StorageSlot.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC-1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * TIP: Consider using this library along with {SlotDerivation}.\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct Int256Slot {\n        int256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\n     */\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/utils/Strings.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SafeCast} from \"./math/SafeCast.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    using SafeCast for *;\n\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n    uint256 private constant SPECIAL_CHARS_LOOKUP =\n        (1 << 0x08) | // backspace\n            (1 << 0x09) | // tab\n            (1 << 0x0a) | // newline\n            (1 << 0x0c) | // form feed\n            (1 << 0x0d) | // carriage return\n            (1 << 0x22) | // double quote\n            (1 << 0x5c); // backslash\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev The string being parsed contains characters that are not in scope of the given base.\n     */\n    error StringsInvalidChar();\n\n    /**\n     * @dev The string being parsed is not a properly formatted address.\n     */\n    error StringsInvalidAddressFormat();\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            assembly (\"memory-safe\") {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                assembly (\"memory-safe\") {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\n     * representation, according to EIP-55.\n     */\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\n        bytes memory buffer = bytes(toHexString(addr));\n\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\n        uint256 hashValue;\n        assembly (\"memory-safe\") {\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\n        }\n\n        for (uint256 i = 41; i > 1; --i) {\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\n                // case shift by xoring with 0x20\n                buffer[i] ^= 0x20;\n            }\n            hashValue >>= 4;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n\n    /**\n     * @dev Parse a decimal string and returns the value as a `uint256`.\n     *\n     * Requirements:\n     * - The string must be formatted as `[0-9]*`\n     * - The result must fit into an `uint256` type\n     */\n    function parseUint(string memory input) internal pure returns (uint256) {\n        return parseUint(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseUint-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `[0-9]*`\n     * - The result must fit into an `uint256` type\n     */\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\n        if (!success) revert StringsInvalidChar();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\n     * character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseUint(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, uint256 value) {\n        if (end > bytes(input).length || begin > end) return (false, 0);\n        return _tryParseUintUncheckedBounds(input, begin, end);\n    }\n\n    /**\n     * @dev Implementation of {tryParseUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\n     */\n    function _tryParseUintUncheckedBounds(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) private pure returns (bool success, uint256 value) {\n        bytes memory buffer = bytes(input);\n\n        uint256 result = 0;\n        for (uint256 i = begin; i < end; ++i) {\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\n            if (chr > 9) return (false, 0);\n            result *= 10;\n            result += chr;\n        }\n        return (true, result);\n    }\n\n    /**\n     * @dev Parse a decimal string and returns the value as a `int256`.\n     *\n     * Requirements:\n     * - The string must be formatted as `[-+]?[0-9]*`\n     * - The result must fit in an `int256` type.\n     */\n    function parseInt(string memory input) internal pure returns (int256) {\n        return parseInt(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `[-+]?[0-9]*`\n     * - The result must fit in an `int256` type.\n     */\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\n        (bool success, int256 value) = tryParseInt(input, begin, end);\n        if (!success) revert StringsInvalidChar();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\n     * the result does not fit in a `int256`.\n     *\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\n     */\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\n    }\n\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\n\n    /**\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\n     * character or if the result does not fit in a `int256`.\n     *\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\n     */\n    function tryParseInt(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, int256 value) {\n        if (end > bytes(input).length || begin > end) return (false, 0);\n        return _tryParseIntUncheckedBounds(input, begin, end);\n    }\n\n    /**\n     * @dev Implementation of {tryParseInt-string-uint256-uint256} that does not check bounds. Caller should make sure that\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\n     */\n    function _tryParseIntUncheckedBounds(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) private pure returns (bool success, int256 value) {\n        bytes memory buffer = bytes(input);\n\n        // Check presence of a negative sign.\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\n        bool positiveSign = sign == bytes1(\"+\");\n        bool negativeSign = sign == bytes1(\"-\");\n        uint256 offset = (positiveSign || negativeSign).toUint();\n\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\n\n        if (absSuccess && absValue < ABS_MIN_INT256) {\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\n            return (true, type(int256).min);\n        } else return (false, 0);\n    }\n\n    /**\n     * @dev Parse a hexadecimal string (with or without \"0x\" prefix), and returns the value as a `uint256`.\n     *\n     * Requirements:\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\n     * - The result must fit in an `uint256` type.\n     */\n    function parseHexUint(string memory input) internal pure returns (uint256) {\n        return parseHexUint(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseHexUint-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\n     * - The result must fit in an `uint256` type.\n     */\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\n        if (!success) revert StringsInvalidChar();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\n     * invalid character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseHexUint(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, uint256 value) {\n        if (end > bytes(input).length || begin > end) return (false, 0);\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\n    }\n\n    /**\n     * @dev Implementation of {tryParseHexUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\n     */\n    function _tryParseHexUintUncheckedBounds(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) private pure returns (bool success, uint256 value) {\n        bytes memory buffer = bytes(input);\n\n        // skip 0x prefix if present\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\"0x\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\n        uint256 offset = hasPrefix.toUint() * 2;\n\n        uint256 result = 0;\n        for (uint256 i = begin + offset; i < end; ++i) {\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\n            if (chr > 15) return (false, 0);\n            result *= 16;\n            unchecked {\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\n                // This guarantees that adding a value < 16 will not cause an overflow, hence the unchecked.\n                result += chr;\n            }\n        }\n        return (true, result);\n    }\n\n    /**\n     * @dev Parse a hexadecimal string (with or without \"0x\" prefix), and returns the value as an `address`.\n     *\n     * Requirements:\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\n     */\n    function parseAddress(string memory input) internal pure returns (address) {\n        return parseAddress(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseAddress-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\n     */\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\n        (bool success, address value) = tryParseAddress(input, begin, end);\n        if (!success) revert StringsInvalidAddressFormat();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\n     * formatted address. See {parseAddress-string} requirements.\n     */\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\n        return tryParseAddress(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\n     * formatted address. See {parseAddress-string-uint256-uint256} requirements.\n     */\n    function tryParseAddress(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, address value) {\n        if (end > bytes(input).length || begin > end) return (false, address(0));\n\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\"0x\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\n\n        // check that input is the correct length\n        if (end - begin == expectedLength) {\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\n            return (s, address(uint160(v)));\n        } else {\n            return (false, address(0));\n        }\n    }\n\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\n        uint8 value = uint8(chr);\n\n        // Try to parse `chr`:\n        // - Case 1: [0-9]\n        // - Case 2: [a-f]\n        // - Case 3: [A-F]\n        // - otherwise not supported\n        unchecked {\n            if (value > 47 && value < 58) value -= 48;\n            else if (value > 96 && value < 103) value -= 87;\n            else if (value > 64 && value < 71) value -= 55;\n            else return type(uint8).max;\n        }\n\n        return value;\n    }\n\n    /**\n     * @dev Escape special characters in JSON strings. This can be useful to prevent JSON injection in NFT metadata.\n     *\n     * WARNING: This function should only be used in double quoted JSON strings. Single quotes are not escaped.\n     *\n     * NOTE: This function escapes all unicode characters, and not just the ones in ranges defined in section 2.5 of\n     * RFC-4627 (U+0000 to U+001F, U+0022 and U+005C). ECMAScript's `JSON.parse` does recover escaped unicode\n     * characters that are not in this range, but other tooling may provide different results.\n     */\n    function escapeJSON(string memory input) internal pure returns (string memory) {\n        bytes memory buffer = bytes(input);\n        bytes memory output = new bytes(2 * buffer.length); // worst case scenario\n        uint256 outputLength = 0;\n\n        for (uint256 i; i < buffer.length; ++i) {\n            bytes1 char = bytes1(_unsafeReadBytesOffset(buffer, i));\n            if (((SPECIAL_CHARS_LOOKUP & (1 << uint8(char))) != 0)) {\n                output[outputLength++] = \"\\\\\";\n                if (char == 0x08) output[outputLength++] = \"b\";\n                else if (char == 0x09) output[outputLength++] = \"t\";\n                else if (char == 0x0a) output[outputLength++] = \"n\";\n                else if (char == 0x0c) output[outputLength++] = \"f\";\n                else if (char == 0x0d) output[outputLength++] = \"r\";\n                else if (char == 0x5c) output[outputLength++] = \"\\\\\";\n                else if (char == 0x22) {\n                    // solhint-disable-next-line quotes\n                    output[outputLength++] = '\"';\n                }\n            } else {\n                output[outputLength++] = char;\n            }\n        }\n        // write the actual length and deallocate unused memory\n        assembly (\"memory-safe\") {\n            mstore(output, outputLength)\n            mstore(0x40, add(output, shl(5, shr(5, add(outputLength, 63)))))\n        }\n\n        return string(output);\n    }\n\n    /**\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\n     *\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\n     * assembly block as such would prevent some optimizations.\n     */\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\n        assembly (\"memory-safe\") {\n            value := mload(add(buffer, add(0x20, offset)))\n        }\n    }\n}\n"
      },
      "project/contracts/IPMW20.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {IERC20Permit} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\";\nimport {IERC1363} from \"@openzeppelin/contracts/interfaces/IERC1363.sol\";\n\ninterface IPMW20 is IERC20, IERC20Metadata, IERC20Permit, IERC1363 {\n    function initialize(\n        string memory initName,\n        string memory initSymbol,\n        address initOwner\n    ) external;\n\n    function mint(address to, uint256 amount) external;\n\n    function burn(uint256 amount) external;\n\n    function burnFrom(address from, uint256 amount) external;\n}\n"
      },
      "project/contracts/PMW20.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {ERC20, IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {ERC20Burnable} from \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport {ERC20Permit, IERC20Permit} from \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\";\nimport {ERC1363} from \"@openzeppelin/contracts/token/ERC20/extensions/ERC1363.sol\";\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {Initializable} from \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n\nimport {IPMW20} from \"./IPMW20.sol\";\n\ncontract PMW20 is\n    ERC20,\n    ERC20Burnable,\n    ERC20Permit,\n    ERC1363,\n    Ownable,\n    Initializable,\n    IPMW20\n{\n    string private _name;\n    string private _symbol;\n\n    constructor() ERC20(\"\", \"\") ERC20Permit(\"\") Ownable(address(1)) {}\n\n    function initialize(\n        string memory initName,\n        string memory initSymbol,\n        address initOwner\n    ) external override initializer {\n        _name = initName;\n        _symbol = initSymbol;\n\n        _transferOwnership(initOwner);\n    }\n\n    function mint(address to, uint256 amount) external override onlyOwner {\n        _mint(to, amount);\n    }\n\n    function burn(uint256 amount) public override(ERC20Burnable, IPMW20) {\n        ERC20Burnable.burn(amount);\n    }\n\n    function burnFrom(\n        address from,\n        uint256 amount\n    ) public override(ERC20Burnable, IPMW20) {\n        if(msg.sender == owner()) {\n            _burn(from, amount);\n        } else {\n            super.burnFrom(from, amount);\n        }\n    }\n\n    function name()\n        public\n        view\n        override(ERC20, IERC20Metadata)\n        returns (string memory)\n    {\n        return _name;\n    }\n\n    function symbol()\n        public\n        view\n        override(ERC20, IERC20Metadata)\n        returns (string memory)\n    {\n        return _symbol;\n    }\n\n    function nonces(\n        address owner\n    ) public view override(ERC20Permit, IERC20Permit) returns (uint256) {\n        return super.nonces(owner);\n    }\n}\n"
      },
      "project/contracts/PMWPool.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {Initializable} from \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport {Clones} from \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {IPMW20} from \"./IPMW20.sol\";\n\ncontract PMWPool is Initializable {\n    address private _asset;\n    address private _lpToken;\n\n    address private _owner;\n\n    constructor() {}\n\n    function initialize(\n        address initAsset,\n        address assetSpender,\n        address lpTokenImplementation,\n        address initOwner\n    ) external initializer {\n        _asset = initAsset;\n        IERC20(_asset).approve(assetSpender, type(uint256).max);\n\n        _lpToken = Clones.clone(lpTokenImplementation);\n        IPMW20(_lpToken).initialize(\n            \"PMW LP\",\n            \"PMW-LP\",\n            address(this)\n        );\n\n        _owner = initOwner;\n    }\n\n    function addLiquidity(uint256 amount, address lpTokenRecipient) external {\n        IERC20(_asset).transferFrom(msg.sender, address(this), amount);\n        IPMW20(_lpToken).mint(lpTokenRecipient, amount);\n    }\n\n    function removeLiquidity(uint256 amount, address assetRecipient) external {\n        IPMW20(_lpToken).burnFrom(msg.sender, amount);\n        IERC20(_asset).transfer(assetRecipient, amount);\n    } \n\n    function asset() external view returns (address) {\n        return _asset;\n    }\n\n    function lpToken() external view returns (address) {\n        return _lpToken;\n    }\n\n    function owner() external view returns (address) {\n        return _owner;\n    }\n}"
      },
      "project/contracts/ProveMeWrong.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {Clones} from \"@openzeppelin/contracts/proxy/Clones.sol\";\n\nimport {ContractRegistry} from \"@flarenetwork/flare-periphery-contracts/coston2/ContractRegistry.sol\";\nimport {IWeb2Json} from \"@flarenetwork/flare-periphery-contracts/coston2/IWeb2Json.sol\";\n\nimport {IPMW20} from \"./IPMW20.sol\";\nimport {PMW20} from \"./PMW20.sol\";\nimport {PMWPool} from \"./PMWPool.sol\";\n\ncontract ProveMeWrong {\n    struct Market {\n        bytes32 requestHash;\n        address yes;\n        address no;\n        uint256 yesPrice;\n        uint256 noPrice;\n        address pool;\n        // 0 = no, 1 = yes, 2 = unknown\n        uint256 outcome;\n    }\n\n    uint256 private constant PRICE_SCALE = 1e18;\n    uint256 private constant CURVE_FACTOR = 1e15; // 0.1% curve steepness\n    uint256 private constant FEE_PERCENTAGE = 1e15; // 0.1% fee (1e15 = 0.1% of 1e18)\n\n    address public immutable pmw20Implementation;\n    address public immutable pmwPoolImplementation;\n\n    // Market ID => Market\n    mapping(bytes32 => Market) private _markets;\n\n    struct ResolutionData {\n        // 0 = no, 1 = yes, 2 = unknown\n        uint256 outcome;\n    }\n\n    constructor() {\n        pmw20Implementation = address(new PMW20());\n        pmwPoolImplementation = address(new PMWPool());\n    }\n\n    function createPool(address asset, address owner) external {\n        address pool = Clones.clone(pmwPoolImplementation);\n        PMWPool(pool).initialize(\n            asset,\n            address(this),\n            pmw20Implementation,\n            owner\n        );\n    }\n\n    function createMarket(\n        bytes32 marketId,\n        bytes32 requestHash,\n        string memory name,\n        string memory symbol,\n        uint256 yesPrice,\n        uint256 noPrice,\n        address pool\n    ) external {\n        if (_marketExists(marketId)) {\n            revert(\"Market already exists\");\n        }\n\n        if (PMWPool(pool).owner() != msg.sender) {\n            revert(\"Pool not owned by caller\");\n        }\n\n        if (yesPrice + noPrice != PRICE_SCALE) {\n            revert(\"Prices must sum to 100%\");\n        }\n        \n        address yes = Clones.clone(pmw20Implementation);\n        IPMW20(yes).initialize(\n            string.concat(name, \" (yes)\"),\n            string.concat(symbol, \"yes\"),\n            address(this)\n        );\n\n        address no = Clones.clone(pmw20Implementation);\n        IPMW20(no).initialize(\n            string.concat(name, \" (no)\"),\n            string.concat(symbol, \"no\"),\n            address(this)\n        );\n\n        _markets[marketId] = Market({\n            requestHash: requestHash,\n            yes: yes,\n            no: no,\n            yesPrice: yesPrice,\n            noPrice: noPrice,\n            pool: pool,\n            outcome: 2\n        });\n    }\n\n    function mint(\n        bytes32 marketId,\n        uint256 amount,\n        bool outcome\n    ) external {\n        if (!_marketExists(marketId)) {\n            revert(\"Market does not exist\");\n        }\n\n        if (_marketResolved(marketId)) {\n            revert(\"Market already resolved\");\n        }\n\n        if (amount == 0) {\n            revert(\"Amount must be greater than 0\");\n        }\n\n        // Calculate fee (0.1% of the bet amount)\n        uint256 feeAmount = (amount * FEE_PERCENTAGE) / PRICE_SCALE;\n        uint256 betAmount = amount - feeAmount;\n\n        IERC20(PMWPool(_markets[marketId].pool).asset()).transfer(\n            _markets[marketId].pool,\n            amount\n        );\n\n        // Calculate tokens to mint based on current prices (using amount after fee)\n        uint256 tokensToMint;\n        if (outcome == true) {\n            tokensToMint = (betAmount * PRICE_SCALE) / _markets[marketId].yesPrice;\n        } else {\n            tokensToMint = (betAmount * PRICE_SCALE) / _markets[marketId].noPrice;\n        }\n\n        // Mint tokens representing potential winnings\n        if (outcome == true) {\n            IPMW20(_markets[marketId].yes).mint(msg.sender, tokensToMint);\n        } else {\n            IPMW20(_markets[marketId].no).mint(msg.sender, tokensToMint);\n        }\n\n        // Update prices using bonding curve adjustment\n        _updatePricesWithBondingCurve(marketId, outcome);\n    }\n\n    function redeem(\n        bytes32 marketId,\n        address account\n    ) external {\n        if (!_marketExists(marketId)) {\n            revert(\"Market does not exist\");\n        }\n\n        if(!_marketResolved(marketId)) {\n            revert(\"Market not resolved\");\n        }\n\n        address token = _markets[marketId].outcome == 1 ? _markets[marketId].yes : _markets[marketId].no;\n        \n        uint256 balance = IPMW20(token).balanceOf(account);\n        if(balance == 0) {\n            revert(\"No tokens to redeem\");\n        }\n\n        IPMW20(token).burnFrom(account, balance);\n        IERC20(PMWPool(_markets[marketId].pool).asset()).transfer(\n            account,\n            balance\n        );\n    }\n\n    function _updatePricesWithBondingCurve(bytes32 marketId, bool outcome) private {\n        Market storage market = _markets[marketId];\n        \n        uint256 yesSupply = IPMW20(market.yes).totalSupply();\n        uint256 noSupply = IPMW20(market.no).totalSupply();\n        uint256 totalSupply = yesSupply + noSupply;\n\n        // Calculate adjustment based on bonding curve\n        uint256 adjustmentFactor = CURVE_FACTOR;\n        if (totalSupply > PRICE_SCALE) {\n            // Decrease adjustment rate as supply increases\n            adjustmentFactor = (CURVE_FACTOR * PRICE_SCALE) / \n                             (PRICE_SCALE + (totalSupply - PRICE_SCALE) / 10);\n        }\n\n        // Calculate price adjustments based on the minting action\n        if (outcome == true) {\n            // Minting yes tokens: increase yes price, decrease no price\n            uint256 yesIncrease = (adjustmentFactor * market.yesPrice) / PRICE_SCALE;\n            uint256 noDecrease = (adjustmentFactor * market.noPrice) / PRICE_SCALE;\n            \n            market.yesPrice = market.yesPrice + yesIncrease;\n            market.noPrice = market.noPrice - noDecrease;\n        } else {\n            // Minting no tokens: increase no price, decrease yes price\n            uint256 noIncrease = (adjustmentFactor * market.noPrice) / PRICE_SCALE;\n            uint256 yesDecrease = (adjustmentFactor * market.yesPrice) / PRICE_SCALE;\n            \n            market.noPrice = market.noPrice + noIncrease;\n            market.yesPrice = market.yesPrice - yesDecrease;\n        }\n\n        // Normalize to ensure prices sum to PRICE_SCALE\n        uint256 totalPrice = market.yesPrice + market.noPrice;\n        market.yesPrice = (market.yesPrice * PRICE_SCALE) / totalPrice;\n        market.noPrice = (market.noPrice * PRICE_SCALE) / totalPrice;\n    }\n\n    function resolveMarket(\n        bytes32 marketId,\n        IWeb2Json.Proof calldata data,\n        bytes32 requestHashSalt\n    ) external {\n        if (!_isJsonApiProofValid(data)) {\n            revert(\"Invalid proof\");\n        }\n\n        if (!_marketExists(marketId)) {\n            revert(\"Market does not exist\");\n        }\n\n        if (_marketResolved(marketId)) {\n            revert(\"Market already resolved\");\n        }\n\n        if (\n            _markets[marketId].requestHash !=\n            _hashRequest(data.data.requestBody, requestHashSalt)\n        ) {\n            revert(\"Invalid request hash\");\n        }\n\n        ResolutionData memory resolutionData = abi.decode(\n            data.data.responseBody.abiEncodedData,\n            (ResolutionData)\n        );\n        uint256 outcome = resolutionData.outcome;\n\n        if (outcome == 2) {\n            revert(\"Market not resolved\");\n        }\n\n        _markets[marketId].outcome = outcome;\n    }\n\n    function _marketExists(bytes32 marketId) private view returns (bool) {\n        return _markets[marketId].requestHash != bytes32(0);\n    }\n\n    function _marketResolved(bytes32 marketId) internal view returns (bool) {\n        return _markets[marketId].outcome != 2;\n    }\n\n    function _hashRequest(\n        IWeb2Json.RequestBody calldata request,\n        bytes32 salt\n    ) private pure returns (bytes32) {\n        return keccak256(abi.encode(request, salt));\n    }\n\n    function _isJsonApiProofValid(\n        IWeb2Json.Proof calldata _proof\n    ) private view returns (bool) {\n        // Inline the check for now until we have an official contract deployed\n        return ContractRegistry.getFdcVerification().verifyJsonApi(_proof);\n    }\n}\n"
      }
    }
  }
}